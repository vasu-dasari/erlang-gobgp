-module(gobgp_client).

%% this file was generated by grpc

-export(['StartServer'/3,
         'StopServer'/3,
         'GetServer'/3,
         'AddNeighbor'/3,
         'DeleteNeighbor'/3,
         'GetNeighbor'/3,
         'ResetNeighbor'/3,
         'SoftResetNeighbor'/3,
         'ShutdownNeighbor'/3,
         'EnableNeighbor'/3,
         'DisableNeighbor'/3,
         'GetRib'/3,
         'ValidateRib'/3,
         'AddPath'/3,
         'DeletePath'/3,
         'EnableMrt'/3,
         'DisableMrt'/3,
         'AddBmp'/3,
         'DeleteBmp'/3,
         'GetRpki'/3,
         'AddRpki'/3,
         'DeleteRpki'/3,
         'EnableRpki'/3,
         'DisableRpki'/3,
         'ResetRpki'/3,
         'SoftResetRpki'/3,
         'GetRoa'/3,
         'EnableZebra'/3,
         'AddVrf'/3,
         'DeleteVrf'/3,
         'GetVrf'/3,
         'GetDefinedSet'/3,
         'AddDefinedSet'/3,
         'DeleteDefinedSet'/3,
         'ReplaceDefinedSet'/3,
         'GetStatement'/3,
         'AddStatement'/3,
         'DeleteStatement'/3,
         'ReplaceStatement'/3,
         'GetPolicy'/3,
         'AddPolicy'/3,
         'DeletePolicy'/3,
         'ReplacePolicy'/3,
         'GetPolicyAssignment'/3,
         'AddPolicyAssignment'/3,
         'DeletePolicyAssignment'/3,
         'ReplacePolicyAssignment'/3,
         'GetRibInfo'/3]).

-type 'SoftResetNeighborRequest.SoftResetDirection'() ::
    'IN' |
    'OUT' |
    'BOTH'.

-type 'AddBmpRequest.MonitoringPolicy'() ::
    'PRE' |
    'POST' |
    'BOTH' |
    'LOCAL' |
    'ALL'.

-type 'Resource'() ::
    'GLOBAL' |
    'LOCAL' |
    'ADJ_IN' |
    'ADJ_OUT' |
    'VRF'.

-type 'RPKIValidation.State'() ::
    'STATE_NONE' |
    'STATE_NOT_FOUND' |
    'STATE_VALID' |
    'STATE_INVALID'.

-type 'RPKIValidation.Reason'() ::
    'REASOT_NONE' |
    'REASON_AS' |
    'REASON_LENGTH'.

-type 'TableLookupOption'() ::
    'LOOKUP_EXACT' |
    'LOOKUP_LONGER' |
    'LOOKUP_SHORTER'.

-type 'PeerConf.RemovePrivateAs'() ::
    'NONE' |
    'ALL' |
    'REPLACE'.

-type 'PeerState.AdminState'() ::
    'UP' |
    'DOWN' |
    'PFX_CT'.

-type 'DefinedType'() ::
    'PREFIX' |
    'NEIGHBOR' |
    'TAG' |
    'AS_PATH' |
    'COMMUNITY' |
    'EXT_COMMUNITY' |
    'LARGE_COMMUNITY'.

-type 'MatchType'() ::
    'ANY' |
    'ALL' |
    'INVERT'.

-type 'AsPathLengthType'() ::
    'EQ' |
    'GE' |
    'LE'.

-type 'Conditions.RouteType'() ::
    'ROUTE_TYPE_NONE' |
    'ROUTE_TYPE_INTERNAL' |
    'ROUTE_TYPE_EXTERNAL' |
    'ROUTE_TYPE_LOCAL'.

-type 'RouteAction'() ::
    'NONE' |
    'ACCEPT' |
    'REJECT'.

-type 'CommunityActionType'() ::
    'COMMUNITY_ADD' |
    'COMMUNITY_REMOVE' |
    'COMMUNITY_REPLACE'.

-type 'MedActionType'() ::
    'MED_MOD' |
    'MED_REPLACE'.

-type 'PolicyType'() ::
    'IN' |
    'IMPORT' |
    'EXPORT'.

-type 'MedAction'() ::
    #{type => 'MedActionType'() | integer(),
      value => integer()}.

-type 'DisableNeighborResponse'() ::
    #{}.

-type 'DeleteNeighborResponse'() ::
    #{}.

-type 'Global'() ::
    #{as => integer(),
      router_id => string(),
      listen_port => integer(),
      listen_addresses => [string()],
      families => [integer()],
      use_multiple_paths => boolean()}.

-type 'StartServerRequest'() ::
    #{global => 'Global'()}.

-type 'DeleteRpkiRequest'() ::
    #{address => string(),
      port => integer()}.

-type 'GetPolicyRequest'() ::
    #{}.

-type 'RPKIConf'() ::
    #{address => string(),
      remote_port => string()}.

-type 'Roa'() ::
    #{as => integer(),
      prefixlen => integer(),
      maxlen => integer(),
      prefix => string(),
      conf => 'RPKIConf'()}.

-type 'GetRoaResponse'() ::
    #{roas => ['Roa'()]}.

-type 'GetDefinedSetRequest'() ::
    #{type => 'DefinedType'() | integer(),
      name => string()}.

-type 'DeleteVrfResponse'() ::
    #{}.

-type 'TableLookupPrefix'() ::
    #{prefix => string(),
      lookup_option => 'TableLookupOption'() | integer()}.

-type 'AfiSafiConfig'() ::
    #{family => integer(),
      enabled => boolean()}.

-type 'DisableMrtResponse'() ::
    #{}.

-type 'AddStatementResponse'() ::
    #{}.

-type 'TableInfo'() ::
    #{type => 'Resource'() | integer(),
      name => string(),
      family => integer(),
      num_destination => integer(),
      num_path => integer(),
      num_accepted => integer()}.

-type 'GetRibInfoResponse'() ::
    #{info => 'TableInfo'()}.

-type 'CommunityAction'() ::
    #{type => 'CommunityActionType'() | integer(),
      communities => [string()]}.

-type 'LocalPrefAction'() ::
    #{value => integer()}.

-type 'NexthopAction'() ::
    #{address => string(),
      self => boolean()}.

-type 'AsPrependAction'() ::
    #{asn => integer(),
      repeat => integer(),
      use_left_most => boolean()}.

-type 'Actions'() ::
    #{route_action => 'RouteAction'() | integer(),
      community => 'CommunityAction'(),
      med => 'MedAction'(),
      as_prepend => 'AsPrependAction'(),
      ext_community => 'CommunityAction'(),
      nexthop => 'NexthopAction'(),
      local_pref => 'LocalPrefAction'(),
      large_community => 'CommunityAction'()}.

-type 'MatchSet'() ::
    #{type => 'MatchType'() | integer(),
      name => string()}.

-type 'AsPathLength'() ::
    #{type => 'AsPathLengthType'() | integer(),
      length => integer()}.

-type 'Conditions'() ::
    #{prefix_set => 'MatchSet'(),
      neighbor_set => 'MatchSet'(),
      as_path_length => 'AsPathLength'(),
      as_path_set => 'MatchSet'(),
      community_set => 'MatchSet'(),
      ext_community_set => 'MatchSet'(),
      rpki_result => integer(),
      route_type => 'Conditions.RouteType'() | integer(),
      large_community_set => 'MatchSet'()}.

-type 'Statement'() ::
    #{name => string(),
      conditions => 'Conditions'(),
      actions => 'Actions'()}.

-type 'GetStatementResponse'() ::
    #{statements => ['Statement'()]}.

-type 'UseMultiplePathsConfig'() ::
    #{enabled => boolean()}.

-type 'AddVrfResponse'() ::
    #{}.

-type 'PrefixLimit'() ::
    #{family => integer(),
      max_prefixes => integer(),
      shutdown_threshold_pct => integer()}.

-type 'PeerConf'() ::
    #{auth_password => string(),
      description => string(),
      local_as => integer(),
      neighbor_address => string(),
      peer_as => integer(),
      peer_group => string(),
      peer_type => integer(),
      remove_private_as => 'PeerConf.RemovePrivateAs'() | integer(),
      route_flap_damping => boolean(),
      send_community => integer(),
      remote_cap => [binary()],
      local_cap => [binary()],
      id => string(),
      prefix_limits => ['PrefixLimit'()],
      local_address => string(),
      neighbor_interface => string(),
      vrf => string(),
      allow_own_as => integer(),
      replace_peer_as => boolean()}.

-type 'Policy'() ::
    #{name => string(),
      statements => ['Statement'()]}.

-type 'PolicyAssignment'() ::
    #{type => 'PolicyType'() | integer(),
      resource => 'Resource'() | integer(),
      name => string(),
      policies => ['Policy'()],
      default => 'RouteAction'() | integer()}.

-type 'AddPolicyAssignmentRequest'() ::
    #{assignment => 'PolicyAssignment'()}.

-type 'GetPolicyResponse'() ::
    #{policies => ['Policy'()]}.

-type 'RouteSelectionOptionsConfig'() ::
    #{always_compare_med => boolean(),
      ignore_as_path_length => boolean(),
      external_compare_router_id => boolean(),
      advertise_inactive_routes => boolean(),
      enable_aigp => boolean(),
      ignore_next_hop_igp_metric => boolean()}.

-type 'ApplyPolicy'() ::
    #{in_policy => 'PolicyAssignment'(),
      export_policy => 'PolicyAssignment'(),
      import_policy => 'PolicyAssignment'()}.

-type 'AddPolicyAssignmentResponse'() ::
    #{}.

-type 'Transport'() ::
    #{local_address => string(),
      local_port => integer(),
      mtu_discovery => boolean(),
      passive_mode => boolean(),
      remote_address => string(),
      remote_port => integer(),
      tcp_mss => integer()}.

-type 'AddNeighborResponse'() ::
    #{}.

-type 'GetVrfRequest'() ::
    #{}.

-type 'AddStatementRequest'() ::
    #{statement => 'Statement'()}.

-type 'IbgpState'() ::
    #{maximum_paths => integer()}.

-type 'IbgpConfig'() ::
    #{maximum_paths => integer()}.

-type 'Ibgp'() ::
    #{config => 'IbgpConfig'(),
      state => 'IbgpState'()}.

-type 'EbgpState'() ::
    #{allow_multiple_as => boolean(),
      maximum_paths => integer()}.

-type 'EbgpConfig'() ::
    #{allow_multiple_as => boolean(),
      maximum_paths => integer()}.

-type 'Ebgp'() ::
    #{config => 'EbgpConfig'(),
      state => 'EbgpState'()}.

-type 'UseMultiplePathsState'() ::
    #{enabled => boolean()}.

-type 'UseMultiplePaths'() ::
    #{config => 'UseMultiplePathsConfig'(),
      state => 'UseMultiplePathsState'(),
      ebgp => 'Ebgp'(),
      ibgp => 'Ibgp'()}.

-type 'LongLivedGracefulRestartState'() ::
    #{enabled => boolean(),
      received => boolean(),
      advertised => boolean(),
      peer_restart_time => integer(),
      peer_restart_timer_expired => boolean()}.

-type 'LongLivedGracefulRestartConfig'() ::
    #{enabled => boolean(),
      restart_time => integer()}.

-type 'LongLivedGracefulRestart'() ::
    #{config => 'LongLivedGracefulRestartConfig'(),
      state => 'LongLivedGracefulRestartState'()}.

-type 'ResetNeighborResponse'() ::
    #{}.

-type 'AddPathsState'() ::
    #{'receive' => boolean(),
      send_max => integer()}.

-type 'AddPathsConfig'() ::
    #{'receive' => boolean(),
      send_max => integer()}.

-type 'AddPaths'() ::
    #{config => 'AddPathsConfig'(),
      state => 'AddPathsState'()}.

-type 'RouteTargetMembershipState'() ::
    #{deferral_time => integer()}.

-type 'RouteTargetMembershipConfig'() ::
    #{deferral_time => integer()}.

-type 'RouteTargetMembership'() ::
    #{config => 'RouteTargetMembershipConfig'(),
      state => 'RouteTargetMembershipState'()}.

-type 'RouteSelectionOptionsState'() ::
    #{always_compare_med => boolean(),
      ignore_as_path_length => boolean(),
      external_compare_router_id => boolean(),
      advertise_inactive_routes => boolean(),
      enable_aigp => boolean(),
      ignore_next_hop_igp_metric => boolean()}.

-type 'RouteSelectionOptions'() ::
    #{config => 'RouteSelectionOptionsConfig'(),
      state => 'RouteSelectionOptionsState'()}.

-type 'MpGracefulRestartState'() ::
    #{enabled => boolean(),
      received => boolean(),
      advertised => boolean(),
      end_of_rib_received => boolean(),
      end_of_rib_sent => boolean()}.

-type 'MpGracefulRestartConfig'() ::
    #{enabled => boolean()}.

-type 'MpGracefulRestart'() ::
    #{config => 'MpGracefulRestartConfig'(),
      state => 'MpGracefulRestartState'()}.

-type 'AfiSafi'() ::
    #{mp_graceful_restart => 'MpGracefulRestart'(),
      config => 'AfiSafiConfig'(),
      apply_policy => 'ApplyPolicy'(),
      route_selection_options => 'RouteSelectionOptions'(),
      use_multiple_paths => 'UseMultiplePaths'(),
      prefix_limits => 'PrefixLimit'(),
      route_target_membership => 'RouteTargetMembership'(),
      long_lived_graceful_restart => 'LongLivedGracefulRestart'(),
      add_paths => 'AddPaths'()}.

-type 'GracefulRestart'() ::
    #{enabled => boolean(),
      restart_time => integer(),
      helper_only => boolean(),
      deferral_time => integer(),
      notification_enabled => boolean(),
      longlived_enabled => boolean()}.

-type 'RouteServer'() ::
    #{route_server_client => boolean()}.

-type 'TimersState'() ::
    #{connect_retry => integer(),
      hold_time => integer(),
      keepalive_interval => integer(),
      minimum_advertisement_interval => integer(),
      negotiated_hold_time => integer(),
      uptime => integer(),
      downtime => integer()}.

-type 'TimersConfig'() ::
    #{connect_retry => integer(),
      hold_time => integer(),
      keepalive_interval => integer(),
      minimum_advertisement_interval => integer()}.

-type 'Timers'() ::
    #{config => 'TimersConfig'(),
      state => 'TimersState'()}.

-type 'Queues'() ::
    #{input => integer(),
      output => integer()}.

-type 'Message'() ::
    #{'NOTIFICATION' => integer(),
      'UPDATE' => integer(),
      'OPEN' => integer(),
      'KEEPALIVE' => integer(),
      'REFRESH' => integer(),
      'DISCARDED' => integer(),
      'TOTAL' => integer()}.

-type 'Messages'() ::
    #{received => 'Message'(),
      sent => 'Message'()}.

-type 'PeerState'() ::
    #{auth_password => string(),
      description => string(),
      local_as => integer(),
      messages => 'Messages'(),
      neighbor_address => string(),
      peer_as => integer(),
      peer_group => string(),
      peer_type => integer(),
      queues => 'Queues'(),
      remove_private_as => integer(),
      route_flap_damping => boolean(),
      send_community => integer(),
      session_state => integer(),
      supported_capabilities => [string()],
      bgp_state => string(),
      admin_state => 'PeerState.AdminState'() | integer(),
      received => integer(),
      accepted => integer(),
      advertised => integer(),
      out_q => integer(),
      flops => integer()}.

-type 'RouteReflector'() ::
    #{route_reflector_client => boolean(),
      route_reflector_cluster_id => string()}.

-type 'EbgpMultihop'() ::
    #{enabled => boolean(),
      multihop_ttl => integer()}.

-type 'Peer'() ::
    #{families => [integer()],
      apply_policy => 'ApplyPolicy'(),
      conf => 'PeerConf'(),
      ebgp_multihop => 'EbgpMultihop'(),
      route_reflector => 'RouteReflector'(),
      info => 'PeerState'(),
      timers => 'Timers'(),
      transport => 'Transport'(),
      route_server => 'RouteServer'(),
      graceful_restart => 'GracefulRestart'(),
      afi_safis => ['AfiSafi'()],
      add_paths => 'AddPaths'()}.

-type 'AddNeighborRequest'() ::
    #{peer => 'Peer'()}.

-type 'ValidateRibRequest'() ::
    #{type => 'Resource'() | integer(),
      family => integer(),
      prefix => string()}.

-type 'DeletePolicyAssignmentRequest'() ::
    #{assignment => 'PolicyAssignment'(),
      all => boolean()}.

-type 'RPKIValidation'() ::
    #{state => 'RPKIValidation.State'() | integer(),
      reason => 'RPKIValidation.Reason'() | integer(),
      matched => ['Roa'()],
      unmatched_as => ['Roa'()],
      unmatched_length => ['Roa'()]}.

-type 'Path'() ::
    #{nlri => binary(),
      pattrs => [binary()],
      age => integer(),
      best => boolean(),
      is_withdraw => boolean(),
      validation => integer(),
      validation_detail => 'RPKIValidation'(),
      no_implicit_withdraw => boolean(),
      family => integer(),
      source_asn => integer(),
      source_id => string(),
      filtered => boolean(),
      stale => boolean(),
      is_from_external => boolean(),
      neighbor_ip => string(),
      uuid => binary(),
      is_nexthop_invalid => boolean(),
      identifier => integer(),
      local_identifier => integer()}.

-type 'Destination'() ::
    #{prefix => string(),
      paths => ['Path'()],
      longer_prefixes => boolean(),
      shorter_prefixes => boolean()}.

-type 'Table'() ::
    #{type => 'Resource'() | integer(),
      name => string(),
      family => integer(),
      destinations => ['Destination'()],
      post_policy => boolean()}.

-type 'MonitorRibRequest'() ::
    #{table => 'Table'(),
      current => boolean()}.

-type 'ShutdownNeighborResponse'() ::
    #{}.

-type 'AddRpkiResponse'() ::
    #{}.

-type 'AddPolicyRequest'() ::
    #{policy => 'Policy'(),
      refer_existing_statements => boolean()}.

-type 'RPKIState'() ::
    #{uptime => integer(),
      downtime => integer(),
      up => boolean(),
      record_ipv4 => integer(),
      record_ipv6 => integer(),
      prefix_ipv4 => integer(),
      prefix_ipv6 => integer(),
      serial => integer(),
      received_ipv4 => integer(),
      received_ipv6 => integer(),
      serial_notify => integer(),
      cache_reset => integer(),
      cache_response => integer(),
      end_of_data => integer(),
      error => integer(),
      serial_query => integer(),
      reset_query => integer()}.

-type 'Rpki'() ::
    #{conf => 'RPKIConf'(),
      state => 'RPKIState'()}.

-type 'AddPathRequest'() ::
    #{resource => 'Resource'() | integer(),
      vrf_id => string(),
      path => 'Path'()}.

-type 'ResetRpkiResponse'() ::
    #{}.

-type 'ResetRpkiRequest'() ::
    #{address => string()}.

-type 'SoftResetNeighborRequest'() ::
    #{address => string(),
      direction => 'SoftResetNeighborRequest.SoftResetDirection'() | integer()}.

-type 'AddPolicyResponse'() ::
    #{}.

-type 'EnableNeighborRequest'() ::
    #{address => string()}.

-type 'AddPathResponse'() ::
    #{uuid => binary()}.

-type 'Vrf'() ::
    #{name => string(),
      rd => binary(),
      import_rt => [binary()],
      export_rt => [binary()],
      id => integer()}.

-type 'GetVrfResponse'() ::
    #{vrfs => ['Vrf'()]}.

-type 'SoftResetRpkiRequest'() ::
    #{address => string()}.

-type 'StopServerRequest'() ::
    #{}.

-type 'AddBmpResponse'() ::
    #{}.

-type 'GetRpkiRequest'() ::
    #{family => integer()}.

-type 'DeleteNeighborRequest'() ::
    #{peer => 'Peer'()}.

-type 'AfiSafiState'() ::
    #{family => integer(),
      enabled => boolean(),
      total_paths => integer(),
      total_prefixes => integer()}.

-type 'GetServerResponse'() ::
    #{global => 'Global'()}.

-type 'EnableMrtResponse'() ::
    #{}.

-type 'InjectMrtRequest'() ::
    #{resource => 'Resource'() | integer(),
      vrf_id => string(),
      paths => ['Path'()]}.

-type 'Prefix'() ::
    #{ip_prefix => string(),
      mask_length_min => integer(),
      mask_length_max => integer()}.

-type 'DefinedSet'() ::
    #{type => 'DefinedType'() | integer(),
      name => string(),
      list => [string()],
      prefixes => ['Prefix'()]}.

-type 'AddDefinedSetRequest'() ::
    #{set => 'DefinedSet'()}.

-type 'ReplacePolicyAssignmentRequest'() ::
    #{assignment => 'PolicyAssignment'()}.

-type 'DeletePathResponse'() ::
    #{}.

-type 'DeletePolicyRequest'() ::
    #{policy => 'Policy'(),
      preserve_statements => boolean(),
      all => boolean()}.

-type 'DeleteVrfRequest'() ::
    #{vrf => 'Vrf'()}.

-type 'GetPolicyAssignmentResponse'() ::
    #{assignment => 'PolicyAssignment'()}.

-type 'DeleteDefinedSetResponse'() ::
    #{}.

-type 'ReplacePolicyAssignmentResponse'() ::
    #{}.

-type 'GetServerRequest'() ::
    #{}.

-type 'AddBmpRequest'() ::
    #{address => string(),
      port => integer(),
      type => 'AddBmpRequest.MonitoringPolicy'() | integer()}.

-type 'ResetNeighborRequest'() ::
    #{address => string(),
      communication => string()}.

-type 'GetRibInfoRequest'() ::
    #{info => 'TableInfo'()}.

-type 'GetRibRequest'() ::
    #{table => 'Table'()}.

-type 'GetStatementRequest'() ::
    #{}.

-type 'ReplaceStatementRequest'() ::
    #{statement => 'Statement'()}.

-type 'StopServerResponse'() ::
    #{}.

-type 'DeleteStatementRequest'() ::
    #{statement => 'Statement'(),
      all => boolean()}.

-type 'AddRpkiRequest'() ::
    #{address => string(),
      port => integer(),
      lifetime => integer()}.

-type 'GetRibResponse'() ::
    #{table => 'Table'()}.

-type 'DisableMrtRequest'() ::
    #{}.

-type 'DisableRpkiRequest'() ::
    #{address => string()}.

-type 'EnableRpkiResponse'() ::
    #{}.

-type 'ReplaceDefinedSetRequest'() ::
    #{set => 'DefinedSet'()}.

-type 'DisableNeighborRequest'() ::
    #{address => string(),
      communication => string()}.

-type 'DeletePolicyResponse'() ::
    #{}.

-type 'SoftResetRpkiResponse'() ::
    #{}.

-type 'GetNeighborResponse'() ::
    #{peers => ['Peer'()]}.

-type 'ReplacePolicyResponse'() ::
    #{}.

-type 'GetRpkiResponse'() ::
    #{servers => ['Rpki'()]}.

-type 'SoftResetNeighborResponse'() ::
    #{}.

-type 'AddDefinedSetResponse'() ::
    #{}.

-type 'GetNeighborRequest'() ::
    #{enableAdvertised => boolean(),
      address => string()}.

-type 'EnableMrtRequest'() ::
    #{dump_type => integer(),
      filename => string(),
      interval => integer()}.

-type 'ReplacePolicyRequest'() ::
    #{policy => 'Policy'(),
      refer_existing_statements => boolean(),
      preserve_statements => boolean()}.

-type 'Arguments'() ::
    #{resource => 'Resource'() | integer(),
      family => integer(),
      name => string()}.

-type 'GetRoaRequest'() ::
    #{family => integer()}.

-type 'DeleteDefinedSetRequest'() ::
    #{set => 'DefinedSet'(),
      all => boolean()}.

-type 'DeleteRpkiResponse'() ::
    #{}.

-type 'EnableZebraResponse'() ::
    #{}.

-type 'StartServerResponse'() ::
    #{}.

-type 'ReplaceDefinedSetResponse'() ::
    #{}.

-type 'GetDefinedSetResponse'() ::
    #{sets => ['DefinedSet'()]}.

-type 'ShutdownNeighborRequest'() ::
    #{address => string(),
      communication => string()}.

-type 'ValidateRibResponse'() ::
    #{}.

-type 'DeletePolicyAssignmentResponse'() ::
    #{}.

-type 'InjectMrtResponse'() ::
    #{}.

-type 'DisableRpkiResponse'() ::
    #{}.

-type 'EnableZebraRequest'() ::
    #{url => string(),
      route_types => [string()],
      version => integer(),
      nexthop_trigger_enable => boolean(),
      nexthop_trigger_delay => integer()}.

-type 'AddVrfRequest'() ::
    #{vrf => 'Vrf'()}.

-type 'DeletePathRequest'() ::
    #{resource => 'Resource'() | integer(),
      vrf_id => string(),
      family => integer(),
      path => 'Path'(),
      uuid => binary()}.

-type 'EnableNeighborResponse'() ::
    #{}.

-type 'EnableRpkiRequest'() ::
    #{address => string()}.

-type 'GetPathRequest'() ::
    #{type => 'Resource'() | integer(),
      name => string(),
      family => integer(),
      prefixes => ['TableLookupPrefix'()]}.

-type 'ReplaceStatementResponse'() ::
    #{}.

-type 'DeleteBmpRequest'() ::
    #{address => string(),
      port => integer()}.

-type 'DeleteBmpResponse'() ::
    #{}.

-type 'GetPolicyAssignmentRequest'() ::
    #{assignment => 'PolicyAssignment'()}.

-type 'DeleteStatementResponse'() ::
    #{}.

-export_type(['SoftResetNeighborRequest.SoftResetDirection'/0,
              'AddBmpRequest.MonitoringPolicy'/0,
              'Resource'/0,
              'RPKIValidation.State'/0,
              'RPKIValidation.Reason'/0,
              'TableLookupOption'/0,
              'PeerConf.RemovePrivateAs'/0,
              'PeerState.AdminState'/0,
              'DefinedType'/0,
              'MatchType'/0,
              'AsPathLengthType'/0,
              'Conditions.RouteType'/0,
              'RouteAction'/0,
              'CommunityActionType'/0,
              'MedActionType'/0,
              'PolicyType'/0,
              'MedAction'/0,
              'DisableNeighborResponse'/0,
              'DeleteNeighborResponse'/0,
              'Global'/0,
              'StartServerRequest'/0,
              'DeleteRpkiRequest'/0,
              'GetPolicyRequest'/0,
              'RPKIConf'/0,
              'Roa'/0,
              'GetRoaResponse'/0,
              'GetDefinedSetRequest'/0,
              'DeleteVrfResponse'/0,
              'TableLookupPrefix'/0,
              'AfiSafiConfig'/0,
              'DisableMrtResponse'/0,
              'AddStatementResponse'/0,
              'TableInfo'/0,
              'GetRibInfoResponse'/0,
              'CommunityAction'/0,
              'LocalPrefAction'/0,
              'NexthopAction'/0,
              'AsPrependAction'/0,
              'Actions'/0,
              'MatchSet'/0,
              'AsPathLength'/0,
              'Conditions'/0,
              'Statement'/0,
              'GetStatementResponse'/0,
              'UseMultiplePathsConfig'/0,
              'AddVrfResponse'/0,
              'PrefixLimit'/0,
              'PeerConf'/0,
              'Policy'/0,
              'PolicyAssignment'/0,
              'AddPolicyAssignmentRequest'/0,
              'GetPolicyResponse'/0,
              'RouteSelectionOptionsConfig'/0,
              'ApplyPolicy'/0,
              'AddPolicyAssignmentResponse'/0,
              'Transport'/0,
              'AddNeighborResponse'/0,
              'GetVrfRequest'/0,
              'AddStatementRequest'/0,
              'IbgpState'/0,
              'IbgpConfig'/0,
              'Ibgp'/0,
              'EbgpState'/0,
              'EbgpConfig'/0,
              'Ebgp'/0,
              'UseMultiplePathsState'/0,
              'UseMultiplePaths'/0,
              'LongLivedGracefulRestartState'/0,
              'LongLivedGracefulRestartConfig'/0,
              'LongLivedGracefulRestart'/0,
              'ResetNeighborResponse'/0,
              'AddPathsState'/0,
              'AddPathsConfig'/0,
              'AddPaths'/0,
              'RouteTargetMembershipState'/0,
              'RouteTargetMembershipConfig'/0,
              'RouteTargetMembership'/0,
              'RouteSelectionOptionsState'/0,
              'RouteSelectionOptions'/0,
              'MpGracefulRestartState'/0,
              'MpGracefulRestartConfig'/0,
              'MpGracefulRestart'/0,
              'AfiSafi'/0,
              'GracefulRestart'/0,
              'RouteServer'/0,
              'TimersState'/0,
              'TimersConfig'/0,
              'Timers'/0,
              'Queues'/0,
              'Message'/0,
              'Messages'/0,
              'PeerState'/0,
              'RouteReflector'/0,
              'EbgpMultihop'/0,
              'Peer'/0,
              'AddNeighborRequest'/0,
              'ValidateRibRequest'/0,
              'DeletePolicyAssignmentRequest'/0,
              'RPKIValidation'/0,
              'Path'/0,
              'Destination'/0,
              'Table'/0,
              'MonitorRibRequest'/0,
              'ShutdownNeighborResponse'/0,
              'AddRpkiResponse'/0,
              'AddPolicyRequest'/0,
              'RPKIState'/0,
              'Rpki'/0,
              'AddPathRequest'/0,
              'ResetRpkiResponse'/0,
              'ResetRpkiRequest'/0,
              'SoftResetNeighborRequest'/0,
              'AddPolicyResponse'/0,
              'EnableNeighborRequest'/0,
              'AddPathResponse'/0,
              'Vrf'/0,
              'GetVrfResponse'/0,
              'SoftResetRpkiRequest'/0,
              'StopServerRequest'/0,
              'AddBmpResponse'/0,
              'GetRpkiRequest'/0,
              'DeleteNeighborRequest'/0,
              'AfiSafiState'/0,
              'GetServerResponse'/0,
              'EnableMrtResponse'/0,
              'InjectMrtRequest'/0,
              'Prefix'/0,
              'DefinedSet'/0,
              'AddDefinedSetRequest'/0,
              'ReplacePolicyAssignmentRequest'/0,
              'DeletePathResponse'/0,
              'DeletePolicyRequest'/0,
              'DeleteVrfRequest'/0,
              'GetPolicyAssignmentResponse'/0,
              'DeleteDefinedSetResponse'/0,
              'ReplacePolicyAssignmentResponse'/0,
              'GetServerRequest'/0,
              'AddBmpRequest'/0,
              'ResetNeighborRequest'/0,
              'GetRibInfoRequest'/0,
              'GetRibRequest'/0,
              'GetStatementRequest'/0,
              'ReplaceStatementRequest'/0,
              'StopServerResponse'/0,
              'DeleteStatementRequest'/0,
              'AddRpkiRequest'/0,
              'GetRibResponse'/0,
              'DisableMrtRequest'/0,
              'DisableRpkiRequest'/0,
              'EnableRpkiResponse'/0,
              'ReplaceDefinedSetRequest'/0,
              'DisableNeighborRequest'/0,
              'DeletePolicyResponse'/0,
              'SoftResetRpkiResponse'/0,
              'GetNeighborResponse'/0,
              'ReplacePolicyResponse'/0,
              'GetRpkiResponse'/0,
              'SoftResetNeighborResponse'/0,
              'AddDefinedSetResponse'/0,
              'GetNeighborRequest'/0,
              'EnableMrtRequest'/0,
              'ReplacePolicyRequest'/0,
              'Arguments'/0,
              'GetRoaRequest'/0,
              'DeleteDefinedSetRequest'/0,
              'DeleteRpkiResponse'/0,
              'EnableZebraResponse'/0,
              'StartServerResponse'/0,
              'ReplaceDefinedSetResponse'/0,
              'GetDefinedSetResponse'/0,
              'ShutdownNeighborRequest'/0,
              'ValidateRibResponse'/0,
              'DeletePolicyAssignmentResponse'/0,
              'InjectMrtResponse'/0,
              'DisableRpkiResponse'/0,
              'EnableZebraRequest'/0,
              'AddVrfRequest'/0,
              'DeletePathRequest'/0,
              'EnableNeighborResponse'/0,
              'EnableRpkiRequest'/0,
              'GetPathRequest'/0,
              'ReplaceStatementResponse'/0,
              'DeleteBmpRequest'/0,
              'DeleteBmpResponse'/0,
              'GetPolicyAssignmentRequest'/0,
              'DeleteStatementResponse'/0]).

-spec decoder() -> module().
%% The module (generated by gpb) used to encode and decode protobuf
%% messages.
decoder() -> gobgp.

%% RPCs for service 'GobgpApi'

-spec 'StartServer'(
        Connection::grpc_client:connection(),
        Message::'StartServerRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('StartServerResponse'()).
%% This is a unary RPC
'StartServer'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'StartServer',
                       decoder(), Options).

-spec 'StopServer'(
        Connection::grpc_client:connection(),
        Message::'StopServerRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('StopServerResponse'()).
%% This is a unary RPC
'StopServer'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'StopServer',
                       decoder(), Options).

-spec 'GetServer'(
        Connection::grpc_client:connection(),
        Message::'GetServerRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetServerResponse'()).
%% This is a unary RPC
'GetServer'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetServer',
                       decoder(), Options).

-spec 'AddNeighbor'(
        Connection::grpc_client:connection(),
        Message::'AddNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddNeighborResponse'()).
%% This is a unary RPC
'AddNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddNeighbor',
                       decoder(), Options).

-spec 'DeleteNeighbor'(
        Connection::grpc_client:connection(),
        Message::'DeleteNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeleteNeighborResponse'()).
%% This is a unary RPC
'DeleteNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeleteNeighbor',
                       decoder(), Options).

-spec 'GetNeighbor'(
        Connection::grpc_client:connection(),
        Message::'GetNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetNeighborResponse'()).
%% This is a unary RPC
'GetNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetNeighbor',
                       decoder(), Options).

-spec 'ResetNeighbor'(
        Connection::grpc_client:connection(),
        Message::'ResetNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ResetNeighborResponse'()).
%% This is a unary RPC
'ResetNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ResetNeighbor',
                       decoder(), Options).

-spec 'SoftResetNeighbor'(
        Connection::grpc_client:connection(),
        Message::'SoftResetNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('SoftResetNeighborResponse'()).
%% This is a unary RPC
'SoftResetNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'SoftResetNeighbor',
                       decoder(), Options).

-spec 'ShutdownNeighbor'(
        Connection::grpc_client:connection(),
        Message::'ShutdownNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ShutdownNeighborResponse'()).
%% This is a unary RPC
'ShutdownNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ShutdownNeighbor',
                       decoder(), Options).

-spec 'EnableNeighbor'(
        Connection::grpc_client:connection(),
        Message::'EnableNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('EnableNeighborResponse'()).
%% This is a unary RPC
'EnableNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'EnableNeighbor',
                       decoder(), Options).

-spec 'DisableNeighbor'(
        Connection::grpc_client:connection(),
        Message::'DisableNeighborRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DisableNeighborResponse'()).
%% This is a unary RPC
'DisableNeighbor'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DisableNeighbor',
                       decoder(), Options).

-spec 'GetRib'(
        Connection::grpc_client:connection(),
        Message::'GetRibRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetRibResponse'()).
%% This is a unary RPC
'GetRib'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetRib',
                       decoder(), Options).

-spec 'ValidateRib'(
        Connection::grpc_client:connection(),
        Message::'ValidateRibRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ValidateRibResponse'()).
%% This is a unary RPC
'ValidateRib'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ValidateRib',
                       decoder(), Options).

-spec 'AddPath'(
        Connection::grpc_client:connection(),
        Message::'AddPathRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddPathResponse'()).
%% This is a unary RPC
'AddPath'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddPath',
                       decoder(), Options).

-spec 'DeletePath'(
        Connection::grpc_client:connection(),
        Message::'DeletePathRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeletePathResponse'()).
%% This is a unary RPC
'DeletePath'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeletePath',
                       decoder(), Options).

-spec 'EnableMrt'(
        Connection::grpc_client:connection(),
        Message::'EnableMrtRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('EnableMrtResponse'()).
%% This is a unary RPC
'EnableMrt'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'EnableMrt',
                       decoder(), Options).

-spec 'DisableMrt'(
        Connection::grpc_client:connection(),
        Message::'DisableMrtRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DisableMrtResponse'()).
%% This is a unary RPC
'DisableMrt'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DisableMrt',
                       decoder(), Options).

-spec 'AddBmp'(
        Connection::grpc_client:connection(),
        Message::'AddBmpRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddBmpResponse'()).
%% This is a unary RPC
'AddBmp'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddBmp',
                       decoder(), Options).

-spec 'DeleteBmp'(
        Connection::grpc_client:connection(),
        Message::'DeleteBmpRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeleteBmpResponse'()).
%% This is a unary RPC
'DeleteBmp'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeleteBmp',
                       decoder(), Options).

-spec 'GetRpki'(
        Connection::grpc_client:connection(),
        Message::'GetRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetRpkiResponse'()).
%% This is a unary RPC
'GetRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetRpki',
                       decoder(), Options).

-spec 'AddRpki'(
        Connection::grpc_client:connection(),
        Message::'AddRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddRpkiResponse'()).
%% This is a unary RPC
'AddRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddRpki',
                       decoder(), Options).

-spec 'DeleteRpki'(
        Connection::grpc_client:connection(),
        Message::'DeleteRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeleteRpkiResponse'()).
%% This is a unary RPC
'DeleteRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeleteRpki',
                       decoder(), Options).

-spec 'EnableRpki'(
        Connection::grpc_client:connection(),
        Message::'EnableRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('EnableRpkiResponse'()).
%% This is a unary RPC
'EnableRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'EnableRpki',
                       decoder(), Options).

-spec 'DisableRpki'(
        Connection::grpc_client:connection(),
        Message::'DisableRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DisableRpkiResponse'()).
%% This is a unary RPC
'DisableRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DisableRpki',
                       decoder(), Options).

-spec 'ResetRpki'(
        Connection::grpc_client:connection(),
        Message::'ResetRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ResetRpkiResponse'()).
%% This is a unary RPC
'ResetRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ResetRpki',
                       decoder(), Options).

-spec 'SoftResetRpki'(
        Connection::grpc_client:connection(),
        Message::'SoftResetRpkiRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('SoftResetRpkiResponse'()).
%% This is a unary RPC
'SoftResetRpki'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'SoftResetRpki',
                       decoder(), Options).

-spec 'GetRoa'(
        Connection::grpc_client:connection(),
        Message::'GetRoaRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetRoaResponse'()).
%% This is a unary RPC
'GetRoa'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetRoa',
                       decoder(), Options).

-spec 'EnableZebra'(
        Connection::grpc_client:connection(),
        Message::'EnableZebraRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('EnableZebraResponse'()).
%% This is a unary RPC
'EnableZebra'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'EnableZebra',
                       decoder(), Options).

-spec 'AddVrf'(
        Connection::grpc_client:connection(),
        Message::'AddVrfRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddVrfResponse'()).
%% This is a unary RPC
'AddVrf'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddVrf',
                       decoder(), Options).

-spec 'DeleteVrf'(
        Connection::grpc_client:connection(),
        Message::'DeleteVrfRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeleteVrfResponse'()).
%% This is a unary RPC
'DeleteVrf'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeleteVrf',
                       decoder(), Options).

-spec 'GetVrf'(
        Connection::grpc_client:connection(),
        Message::'GetVrfRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetVrfResponse'()).
%% This is a unary RPC
'GetVrf'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetVrf',
                       decoder(), Options).

-spec 'GetDefinedSet'(
        Connection::grpc_client:connection(),
        Message::'GetDefinedSetRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetDefinedSetResponse'()).
%% This is a unary RPC
'GetDefinedSet'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetDefinedSet',
                       decoder(), Options).

-spec 'AddDefinedSet'(
        Connection::grpc_client:connection(),
        Message::'AddDefinedSetRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddDefinedSetResponse'()).
%% This is a unary RPC
'AddDefinedSet'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddDefinedSet',
                       decoder(), Options).

-spec 'DeleteDefinedSet'(
        Connection::grpc_client:connection(),
        Message::'DeleteDefinedSetRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeleteDefinedSetResponse'()).
%% This is a unary RPC
'DeleteDefinedSet'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeleteDefinedSet',
                       decoder(), Options).

-spec 'ReplaceDefinedSet'(
        Connection::grpc_client:connection(),
        Message::'ReplaceDefinedSetRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ReplaceDefinedSetResponse'()).
%% This is a unary RPC
'ReplaceDefinedSet'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ReplaceDefinedSet',
                       decoder(), Options).

-spec 'GetStatement'(
        Connection::grpc_client:connection(),
        Message::'GetStatementRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetStatementResponse'()).
%% This is a unary RPC
'GetStatement'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetStatement',
                       decoder(), Options).

-spec 'AddStatement'(
        Connection::grpc_client:connection(),
        Message::'AddStatementRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddStatementResponse'()).
%% This is a unary RPC
'AddStatement'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddStatement',
                       decoder(), Options).

-spec 'DeleteStatement'(
        Connection::grpc_client:connection(),
        Message::'DeleteStatementRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeleteStatementResponse'()).
%% This is a unary RPC
'DeleteStatement'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeleteStatement',
                       decoder(), Options).

-spec 'ReplaceStatement'(
        Connection::grpc_client:connection(),
        Message::'ReplaceStatementRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ReplaceStatementResponse'()).
%% This is a unary RPC
'ReplaceStatement'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ReplaceStatement',
                       decoder(), Options).

-spec 'GetPolicy'(
        Connection::grpc_client:connection(),
        Message::'GetPolicyRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetPolicyResponse'()).
%% This is a unary RPC
'GetPolicy'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetPolicy',
                       decoder(), Options).

-spec 'AddPolicy'(
        Connection::grpc_client:connection(),
        Message::'AddPolicyRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddPolicyResponse'()).
%% This is a unary RPC
'AddPolicy'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddPolicy',
                       decoder(), Options).

-spec 'DeletePolicy'(
        Connection::grpc_client:connection(),
        Message::'DeletePolicyRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeletePolicyResponse'()).
%% This is a unary RPC
'DeletePolicy'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeletePolicy',
                       decoder(), Options).

-spec 'ReplacePolicy'(
        Connection::grpc_client:connection(),
        Message::'ReplacePolicyRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ReplacePolicyResponse'()).
%% This is a unary RPC
'ReplacePolicy'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ReplacePolicy',
                       decoder(), Options).

-spec 'GetPolicyAssignment'(
        Connection::grpc_client:connection(),
        Message::'GetPolicyAssignmentRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetPolicyAssignmentResponse'()).
%% This is a unary RPC
'GetPolicyAssignment'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetPolicyAssignment',
                       decoder(), Options).

-spec 'AddPolicyAssignment'(
        Connection::grpc_client:connection(),
        Message::'AddPolicyAssignmentRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('AddPolicyAssignmentResponse'()).
%% This is a unary RPC
'AddPolicyAssignment'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'AddPolicyAssignment',
                       decoder(), Options).

-spec 'DeletePolicyAssignment'(
        Connection::grpc_client:connection(),
        Message::'DeletePolicyAssignmentRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('DeletePolicyAssignmentResponse'()).
%% This is a unary RPC
'DeletePolicyAssignment'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'DeletePolicyAssignment',
                       decoder(), Options).

-spec 'ReplacePolicyAssignment'(
        Connection::grpc_client:connection(),
        Message::'ReplacePolicyAssignmentRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('ReplacePolicyAssignmentResponse'()).
%% This is a unary RPC
'ReplacePolicyAssignment'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'ReplacePolicyAssignment',
                       decoder(), Options).

-spec 'GetRibInfo'(
        Connection::grpc_client:connection(),
        Message::'GetRibInfoRequest'(),
        Options::[grpc_client:stream_option() |
                  {timeout, timeout()}]) ->
        grpc_client:unary_response('GetRibInfoResponse'()).
%% This is a unary RPC
'GetRibInfo'(Connection, Message, Options) ->
    grpc_client:unary(Connection, Message,
                      'GobgpApi', 'GetRibInfo',
                       decoder(), Options).

