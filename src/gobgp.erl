%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.28.0
-module(gobgp).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_SoftResetNeighborRequest.SoftResetDirection'/1, 'enum_value_by_symbol_SoftResetNeighborRequest.SoftResetDirection'/1]).
-export(['enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'/1, 'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'/1]).
-export([enum_symbol_by_value_Resource/1, enum_value_by_symbol_Resource/1]).
-export(['enum_symbol_by_value_RPKIValidation.State'/1, 'enum_value_by_symbol_RPKIValidation.State'/1]).
-export(['enum_symbol_by_value_RPKIValidation.Reason'/1, 'enum_value_by_symbol_RPKIValidation.Reason'/1]).
-export([enum_symbol_by_value_TableLookupOption/1, enum_value_by_symbol_TableLookupOption/1]).
-export(['enum_symbol_by_value_PeerConf.RemovePrivateAs'/1, 'enum_value_by_symbol_PeerConf.RemovePrivateAs'/1]).
-export(['enum_symbol_by_value_PeerState.AdminState'/1, 'enum_value_by_symbol_PeerState.AdminState'/1]).
-export([enum_symbol_by_value_DefinedType/1, enum_value_by_symbol_DefinedType/1]).
-export([enum_symbol_by_value_MatchType/1, enum_value_by_symbol_MatchType/1]).
-export([enum_symbol_by_value_AsPathLengthType/1, enum_value_by_symbol_AsPathLengthType/1]).
-export(['enum_symbol_by_value_Conditions.RouteType'/1, 'enum_value_by_symbol_Conditions.RouteType'/1]).
-export([enum_symbol_by_value_RouteAction/1, enum_value_by_symbol_RouteAction/1]).
-export([enum_symbol_by_value_CommunityActionType/1, enum_value_by_symbol_CommunityActionType/1]).
-export([enum_symbol_by_value_MedActionType/1, enum_value_by_symbol_MedActionType/1]).
-export([enum_symbol_by_value_PolicyType/1, enum_value_by_symbol_PolicyType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



-spec encode_msg(map(),'MedAction' | 'DisableNeighborResponse' | 'DeleteNeighborResponse' | 'Global' | 'StartServerRequest' | 'DeleteRpkiRequest' | 'GetPolicyRequest' | 'RPKIConf' | 'Roa' | 'GetRoaResponse' | 'GetDefinedSetRequest' | 'DeleteVrfResponse' | 'TableLookupPrefix' | 'AfiSafiConfig' | 'DisableMrtResponse' | 'AddStatementResponse' | 'TableInfo' | 'GetRibInfoResponse' | 'CommunityAction' | 'LocalPrefAction' | 'NexthopAction' | 'AsPrependAction' | 'Actions' | 'MatchSet' | 'AsPathLength' | 'Conditions' | 'Statement' | 'GetStatementResponse' | 'UseMultiplePathsConfig' | 'AddVrfResponse' | 'PrefixLimit' | 'PeerConf' | 'Policy' | 'PolicyAssignment' | 'AddPolicyAssignmentRequest' | 'GetPolicyResponse' | 'RouteSelectionOptionsConfig' | 'ApplyPolicy' | 'AddPolicyAssignmentResponse' | 'Transport' | 'AddNeighborResponse' | 'GetVrfRequest' | 'AddStatementRequest' | 'IbgpState' | 'IbgpConfig' | 'Ibgp' | 'EbgpState' | 'EbgpConfig' | 'Ebgp' | 'UseMultiplePathsState' | 'UseMultiplePaths' | 'LongLivedGracefulRestartState' | 'LongLivedGracefulRestartConfig' | 'LongLivedGracefulRestart' | 'ResetNeighborResponse' | 'AddPathsState' | 'AddPathsConfig' | 'AddPaths' | 'RouteTargetMembershipState' | 'RouteTargetMembershipConfig' | 'RouteTargetMembership' | 'RouteSelectionOptionsState' | 'RouteSelectionOptions' | 'MpGracefulRestartState' | 'MpGracefulRestartConfig' | 'MpGracefulRestart' | 'AfiSafi' | 'GracefulRestart' | 'RouteServer' | 'TimersState' | 'TimersConfig' | 'Timers' | 'Queues' | 'Message' | 'Messages' | 'PeerState' | 'RouteReflector' | 'EbgpMultihop' | 'Peer' | 'AddNeighborRequest' | 'ValidateRibRequest' | 'DeletePolicyAssignmentRequest' | 'RPKIValidation' | 'Path' | 'Destination' | 'Table' | 'MonitorRibRequest' | 'ShutdownNeighborResponse' | 'AddRpkiResponse' | 'AddPolicyRequest' | 'RPKIState' | 'Rpki' | 'AddPathRequest' | 'ResetRpkiResponse' | 'ResetRpkiRequest' | 'SoftResetNeighborRequest' | 'AddPolicyResponse' | 'EnableNeighborRequest' | 'AddPathResponse' | 'Vrf' | 'GetVrfResponse' | 'SoftResetRpkiRequest' | 'StopServerRequest' | 'AddBmpResponse' | 'GetRpkiRequest' | 'DeleteNeighborRequest' | 'AfiSafiState' | 'GetServerResponse' | 'EnableMrtResponse' | 'InjectMrtRequest' | 'Prefix' | 'DefinedSet' | 'AddDefinedSetRequest' | 'ReplacePolicyAssignmentRequest' | 'DeletePathResponse' | 'DeletePolicyRequest' | 'DeleteVrfRequest' | 'GetPolicyAssignmentResponse' | 'DeleteDefinedSetResponse' | 'ReplacePolicyAssignmentResponse' | 'GetServerRequest' | 'AddBmpRequest' | 'ResetNeighborRequest' | 'GetRibInfoRequest' | 'GetRibRequest' | 'GetStatementRequest' | 'ReplaceStatementRequest' | 'StopServerResponse' | 'DeleteStatementRequest' | 'AddRpkiRequest' | 'GetRibResponse' | 'DisableMrtRequest' | 'DisableRpkiRequest' | 'EnableRpkiResponse' | 'ReplaceDefinedSetRequest' | 'DisableNeighborRequest' | 'DeletePolicyResponse' | 'SoftResetRpkiResponse' | 'GetNeighborResponse' | 'ReplacePolicyResponse' | 'GetRpkiResponse' | 'SoftResetNeighborResponse' | 'AddDefinedSetResponse' | 'GetNeighborRequest' | 'EnableMrtRequest' | 'ReplacePolicyRequest' | 'Arguments' | 'GetRoaRequest' | 'DeleteDefinedSetRequest' | 'DeleteRpkiResponse' | 'EnableZebraResponse' | 'StartServerResponse' | 'ReplaceDefinedSetResponse' | 'GetDefinedSetResponse' | 'ShutdownNeighborRequest' | 'ValidateRibResponse' | 'DeletePolicyAssignmentResponse' | 'InjectMrtResponse' | 'DisableRpkiResponse' | 'EnableZebraRequest' | 'AddVrfRequest' | 'DeletePathRequest' | 'EnableNeighborResponse' | 'EnableRpkiRequest' | 'GetPathRequest' | 'ReplaceStatementResponse' | 'DeleteBmpRequest' | 'DeleteBmpResponse' | 'GetPolicyAssignmentRequest' | 'DeleteStatementResponse') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg(map(),'MedAction' | 'DisableNeighborResponse' | 'DeleteNeighborResponse' | 'Global' | 'StartServerRequest' | 'DeleteRpkiRequest' | 'GetPolicyRequest' | 'RPKIConf' | 'Roa' | 'GetRoaResponse' | 'GetDefinedSetRequest' | 'DeleteVrfResponse' | 'TableLookupPrefix' | 'AfiSafiConfig' | 'DisableMrtResponse' | 'AddStatementResponse' | 'TableInfo' | 'GetRibInfoResponse' | 'CommunityAction' | 'LocalPrefAction' | 'NexthopAction' | 'AsPrependAction' | 'Actions' | 'MatchSet' | 'AsPathLength' | 'Conditions' | 'Statement' | 'GetStatementResponse' | 'UseMultiplePathsConfig' | 'AddVrfResponse' | 'PrefixLimit' | 'PeerConf' | 'Policy' | 'PolicyAssignment' | 'AddPolicyAssignmentRequest' | 'GetPolicyResponse' | 'RouteSelectionOptionsConfig' | 'ApplyPolicy' | 'AddPolicyAssignmentResponse' | 'Transport' | 'AddNeighborResponse' | 'GetVrfRequest' | 'AddStatementRequest' | 'IbgpState' | 'IbgpConfig' | 'Ibgp' | 'EbgpState' | 'EbgpConfig' | 'Ebgp' | 'UseMultiplePathsState' | 'UseMultiplePaths' | 'LongLivedGracefulRestartState' | 'LongLivedGracefulRestartConfig' | 'LongLivedGracefulRestart' | 'ResetNeighborResponse' | 'AddPathsState' | 'AddPathsConfig' | 'AddPaths' | 'RouteTargetMembershipState' | 'RouteTargetMembershipConfig' | 'RouteTargetMembership' | 'RouteSelectionOptionsState' | 'RouteSelectionOptions' | 'MpGracefulRestartState' | 'MpGracefulRestartConfig' | 'MpGracefulRestart' | 'AfiSafi' | 'GracefulRestart' | 'RouteServer' | 'TimersState' | 'TimersConfig' | 'Timers' | 'Queues' | 'Message' | 'Messages' | 'PeerState' | 'RouteReflector' | 'EbgpMultihop' | 'Peer' | 'AddNeighborRequest' | 'ValidateRibRequest' | 'DeletePolicyAssignmentRequest' | 'RPKIValidation' | 'Path' | 'Destination' | 'Table' | 'MonitorRibRequest' | 'ShutdownNeighborResponse' | 'AddRpkiResponse' | 'AddPolicyRequest' | 'RPKIState' | 'Rpki' | 'AddPathRequest' | 'ResetRpkiResponse' | 'ResetRpkiRequest' | 'SoftResetNeighborRequest' | 'AddPolicyResponse' | 'EnableNeighborRequest' | 'AddPathResponse' | 'Vrf' | 'GetVrfResponse' | 'SoftResetRpkiRequest' | 'StopServerRequest' | 'AddBmpResponse' | 'GetRpkiRequest' | 'DeleteNeighborRequest' | 'AfiSafiState' | 'GetServerResponse' | 'EnableMrtResponse' | 'InjectMrtRequest' | 'Prefix' | 'DefinedSet' | 'AddDefinedSetRequest' | 'ReplacePolicyAssignmentRequest' | 'DeletePathResponse' | 'DeletePolicyRequest' | 'DeleteVrfRequest' | 'GetPolicyAssignmentResponse' | 'DeleteDefinedSetResponse' | 'ReplacePolicyAssignmentResponse' | 'GetServerRequest' | 'AddBmpRequest' | 'ResetNeighborRequest' | 'GetRibInfoRequest' | 'GetRibRequest' | 'GetStatementRequest' | 'ReplaceStatementRequest' | 'StopServerResponse' | 'DeleteStatementRequest' | 'AddRpkiRequest' | 'GetRibResponse' | 'DisableMrtRequest' | 'DisableRpkiRequest' | 'EnableRpkiResponse' | 'ReplaceDefinedSetRequest' | 'DisableNeighborRequest' | 'DeletePolicyResponse' | 'SoftResetRpkiResponse' | 'GetNeighborResponse' | 'ReplacePolicyResponse' | 'GetRpkiResponse' | 'SoftResetNeighborResponse' | 'AddDefinedSetResponse' | 'GetNeighborRequest' | 'EnableMrtRequest' | 'ReplacePolicyRequest' | 'Arguments' | 'GetRoaRequest' | 'DeleteDefinedSetRequest' | 'DeleteRpkiResponse' | 'EnableZebraResponse' | 'StartServerResponse' | 'ReplaceDefinedSetResponse' | 'GetDefinedSetResponse' | 'ShutdownNeighborRequest' | 'ValidateRibResponse' | 'DeletePolicyAssignmentResponse' | 'InjectMrtResponse' | 'DisableRpkiResponse' | 'EnableZebraRequest' | 'AddVrfRequest' | 'DeletePathRequest' | 'EnableNeighborResponse' | 'EnableRpkiRequest' | 'GetPathRequest' | 'ReplaceStatementResponse' | 'DeleteBmpRequest' | 'DeleteBmpResponse' | 'GetPolicyAssignmentRequest' | 'DeleteStatementResponse', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MedAction' -> e_msg_MedAction(Msg, TrUserData);
      'DisableNeighborResponse' ->
	  e_msg_DisableNeighborResponse(Msg, TrUserData);
      'DeleteNeighborResponse' ->
	  e_msg_DeleteNeighborResponse(Msg, TrUserData);
      'Global' -> e_msg_Global(Msg, TrUserData);
      'StartServerRequest' ->
	  e_msg_StartServerRequest(Msg, TrUserData);
      'DeleteRpkiRequest' ->
	  e_msg_DeleteRpkiRequest(Msg, TrUserData);
      'GetPolicyRequest' ->
	  e_msg_GetPolicyRequest(Msg, TrUserData);
      'RPKIConf' -> e_msg_RPKIConf(Msg, TrUserData);
      'Roa' -> e_msg_Roa(Msg, TrUserData);
      'GetRoaResponse' ->
	  e_msg_GetRoaResponse(Msg, TrUserData);
      'GetDefinedSetRequest' ->
	  e_msg_GetDefinedSetRequest(Msg, TrUserData);
      'DeleteVrfResponse' ->
	  e_msg_DeleteVrfResponse(Msg, TrUserData);
      'TableLookupPrefix' ->
	  e_msg_TableLookupPrefix(Msg, TrUserData);
      'AfiSafiConfig' -> e_msg_AfiSafiConfig(Msg, TrUserData);
      'DisableMrtResponse' ->
	  e_msg_DisableMrtResponse(Msg, TrUserData);
      'AddStatementResponse' ->
	  e_msg_AddStatementResponse(Msg, TrUserData);
      'TableInfo' -> e_msg_TableInfo(Msg, TrUserData);
      'GetRibInfoResponse' ->
	  e_msg_GetRibInfoResponse(Msg, TrUserData);
      'CommunityAction' ->
	  e_msg_CommunityAction(Msg, TrUserData);
      'LocalPrefAction' ->
	  e_msg_LocalPrefAction(Msg, TrUserData);
      'NexthopAction' -> e_msg_NexthopAction(Msg, TrUserData);
      'AsPrependAction' ->
	  e_msg_AsPrependAction(Msg, TrUserData);
      'Actions' -> e_msg_Actions(Msg, TrUserData);
      'MatchSet' -> e_msg_MatchSet(Msg, TrUserData);
      'AsPathLength' -> e_msg_AsPathLength(Msg, TrUserData);
      'Conditions' -> e_msg_Conditions(Msg, TrUserData);
      'Statement' -> e_msg_Statement(Msg, TrUserData);
      'GetStatementResponse' ->
	  e_msg_GetStatementResponse(Msg, TrUserData);
      'UseMultiplePathsConfig' ->
	  e_msg_UseMultiplePathsConfig(Msg, TrUserData);
      'AddVrfResponse' ->
	  e_msg_AddVrfResponse(Msg, TrUserData);
      'PrefixLimit' -> e_msg_PrefixLimit(Msg, TrUserData);
      'PeerConf' -> e_msg_PeerConf(Msg, TrUserData);
      'Policy' -> e_msg_Policy(Msg, TrUserData);
      'PolicyAssignment' ->
	  e_msg_PolicyAssignment(Msg, TrUserData);
      'AddPolicyAssignmentRequest' ->
	  e_msg_AddPolicyAssignmentRequest(Msg, TrUserData);
      'GetPolicyResponse' ->
	  e_msg_GetPolicyResponse(Msg, TrUserData);
      'RouteSelectionOptionsConfig' ->
	  e_msg_RouteSelectionOptionsConfig(Msg, TrUserData);
      'ApplyPolicy' -> e_msg_ApplyPolicy(Msg, TrUserData);
      'AddPolicyAssignmentResponse' ->
	  e_msg_AddPolicyAssignmentResponse(Msg, TrUserData);
      'Transport' -> e_msg_Transport(Msg, TrUserData);
      'AddNeighborResponse' ->
	  e_msg_AddNeighborResponse(Msg, TrUserData);
      'GetVrfRequest' -> e_msg_GetVrfRequest(Msg, TrUserData);
      'AddStatementRequest' ->
	  e_msg_AddStatementRequest(Msg, TrUserData);
      'IbgpState' -> e_msg_IbgpState(Msg, TrUserData);
      'IbgpConfig' -> e_msg_IbgpConfig(Msg, TrUserData);
      'Ibgp' -> e_msg_Ibgp(Msg, TrUserData);
      'EbgpState' -> e_msg_EbgpState(Msg, TrUserData);
      'EbgpConfig' -> e_msg_EbgpConfig(Msg, TrUserData);
      'Ebgp' -> e_msg_Ebgp(Msg, TrUserData);
      'UseMultiplePathsState' ->
	  e_msg_UseMultiplePathsState(Msg, TrUserData);
      'UseMultiplePaths' ->
	  e_msg_UseMultiplePaths(Msg, TrUserData);
      'LongLivedGracefulRestartState' ->
	  e_msg_LongLivedGracefulRestartState(Msg, TrUserData);
      'LongLivedGracefulRestartConfig' ->
	  e_msg_LongLivedGracefulRestartConfig(Msg, TrUserData);
      'LongLivedGracefulRestart' ->
	  e_msg_LongLivedGracefulRestart(Msg, TrUserData);
      'ResetNeighborResponse' ->
	  e_msg_ResetNeighborResponse(Msg, TrUserData);
      'AddPathsState' -> e_msg_AddPathsState(Msg, TrUserData);
      'AddPathsConfig' ->
	  e_msg_AddPathsConfig(Msg, TrUserData);
      'AddPaths' -> e_msg_AddPaths(Msg, TrUserData);
      'RouteTargetMembershipState' ->
	  e_msg_RouteTargetMembershipState(Msg, TrUserData);
      'RouteTargetMembershipConfig' ->
	  e_msg_RouteTargetMembershipConfig(Msg, TrUserData);
      'RouteTargetMembership' ->
	  e_msg_RouteTargetMembership(Msg, TrUserData);
      'RouteSelectionOptionsState' ->
	  e_msg_RouteSelectionOptionsState(Msg, TrUserData);
      'RouteSelectionOptions' ->
	  e_msg_RouteSelectionOptions(Msg, TrUserData);
      'MpGracefulRestartState' ->
	  e_msg_MpGracefulRestartState(Msg, TrUserData);
      'MpGracefulRestartConfig' ->
	  e_msg_MpGracefulRestartConfig(Msg, TrUserData);
      'MpGracefulRestart' ->
	  e_msg_MpGracefulRestart(Msg, TrUserData);
      'AfiSafi' -> e_msg_AfiSafi(Msg, TrUserData);
      'GracefulRestart' ->
	  e_msg_GracefulRestart(Msg, TrUserData);
      'RouteServer' -> e_msg_RouteServer(Msg, TrUserData);
      'TimersState' -> e_msg_TimersState(Msg, TrUserData);
      'TimersConfig' -> e_msg_TimersConfig(Msg, TrUserData);
      'Timers' -> e_msg_Timers(Msg, TrUserData);
      'Queues' -> e_msg_Queues(Msg, TrUserData);
      'Message' -> e_msg_Message(Msg, TrUserData);
      'Messages' -> e_msg_Messages(Msg, TrUserData);
      'PeerState' -> e_msg_PeerState(Msg, TrUserData);
      'RouteReflector' ->
	  e_msg_RouteReflector(Msg, TrUserData);
      'EbgpMultihop' -> e_msg_EbgpMultihop(Msg, TrUserData);
      'Peer' -> e_msg_Peer(Msg, TrUserData);
      'AddNeighborRequest' ->
	  e_msg_AddNeighborRequest(Msg, TrUserData);
      'ValidateRibRequest' ->
	  e_msg_ValidateRibRequest(Msg, TrUserData);
      'DeletePolicyAssignmentRequest' ->
	  e_msg_DeletePolicyAssignmentRequest(Msg, TrUserData);
      'RPKIValidation' ->
	  e_msg_RPKIValidation(Msg, TrUserData);
      'Path' -> e_msg_Path(Msg, TrUserData);
      'Destination' -> e_msg_Destination(Msg, TrUserData);
      'Table' -> e_msg_Table(Msg, TrUserData);
      'MonitorRibRequest' ->
	  e_msg_MonitorRibRequest(Msg, TrUserData);
      'ShutdownNeighborResponse' ->
	  e_msg_ShutdownNeighborResponse(Msg, TrUserData);
      'AddRpkiResponse' ->
	  e_msg_AddRpkiResponse(Msg, TrUserData);
      'AddPolicyRequest' ->
	  e_msg_AddPolicyRequest(Msg, TrUserData);
      'RPKIState' -> e_msg_RPKIState(Msg, TrUserData);
      'Rpki' -> e_msg_Rpki(Msg, TrUserData);
      'AddPathRequest' ->
	  e_msg_AddPathRequest(Msg, TrUserData);
      'ResetRpkiResponse' ->
	  e_msg_ResetRpkiResponse(Msg, TrUserData);
      'ResetRpkiRequest' ->
	  e_msg_ResetRpkiRequest(Msg, TrUserData);
      'SoftResetNeighborRequest' ->
	  e_msg_SoftResetNeighborRequest(Msg, TrUserData);
      'AddPolicyResponse' ->
	  e_msg_AddPolicyResponse(Msg, TrUserData);
      'EnableNeighborRequest' ->
	  e_msg_EnableNeighborRequest(Msg, TrUserData);
      'AddPathResponse' ->
	  e_msg_AddPathResponse(Msg, TrUserData);
      'Vrf' -> e_msg_Vrf(Msg, TrUserData);
      'GetVrfResponse' ->
	  e_msg_GetVrfResponse(Msg, TrUserData);
      'SoftResetRpkiRequest' ->
	  e_msg_SoftResetRpkiRequest(Msg, TrUserData);
      'StopServerRequest' ->
	  e_msg_StopServerRequest(Msg, TrUserData);
      'AddBmpResponse' ->
	  e_msg_AddBmpResponse(Msg, TrUserData);
      'GetRpkiRequest' ->
	  e_msg_GetRpkiRequest(Msg, TrUserData);
      'DeleteNeighborRequest' ->
	  e_msg_DeleteNeighborRequest(Msg, TrUserData);
      'AfiSafiState' -> e_msg_AfiSafiState(Msg, TrUserData);
      'GetServerResponse' ->
	  e_msg_GetServerResponse(Msg, TrUserData);
      'EnableMrtResponse' ->
	  e_msg_EnableMrtResponse(Msg, TrUserData);
      'InjectMrtRequest' ->
	  e_msg_InjectMrtRequest(Msg, TrUserData);
      'Prefix' -> e_msg_Prefix(Msg, TrUserData);
      'DefinedSet' -> e_msg_DefinedSet(Msg, TrUserData);
      'AddDefinedSetRequest' ->
	  e_msg_AddDefinedSetRequest(Msg, TrUserData);
      'ReplacePolicyAssignmentRequest' ->
	  e_msg_ReplacePolicyAssignmentRequest(Msg, TrUserData);
      'DeletePathResponse' ->
	  e_msg_DeletePathResponse(Msg, TrUserData);
      'DeletePolicyRequest' ->
	  e_msg_DeletePolicyRequest(Msg, TrUserData);
      'DeleteVrfRequest' ->
	  e_msg_DeleteVrfRequest(Msg, TrUserData);
      'GetPolicyAssignmentResponse' ->
	  e_msg_GetPolicyAssignmentResponse(Msg, TrUserData);
      'DeleteDefinedSetResponse' ->
	  e_msg_DeleteDefinedSetResponse(Msg, TrUserData);
      'ReplacePolicyAssignmentResponse' ->
	  e_msg_ReplacePolicyAssignmentResponse(Msg, TrUserData);
      'GetServerRequest' ->
	  e_msg_GetServerRequest(Msg, TrUserData);
      'AddBmpRequest' -> e_msg_AddBmpRequest(Msg, TrUserData);
      'ResetNeighborRequest' ->
	  e_msg_ResetNeighborRequest(Msg, TrUserData);
      'GetRibInfoRequest' ->
	  e_msg_GetRibInfoRequest(Msg, TrUserData);
      'GetRibRequest' -> e_msg_GetRibRequest(Msg, TrUserData);
      'GetStatementRequest' ->
	  e_msg_GetStatementRequest(Msg, TrUserData);
      'ReplaceStatementRequest' ->
	  e_msg_ReplaceStatementRequest(Msg, TrUserData);
      'StopServerResponse' ->
	  e_msg_StopServerResponse(Msg, TrUserData);
      'DeleteStatementRequest' ->
	  e_msg_DeleteStatementRequest(Msg, TrUserData);
      'AddRpkiRequest' ->
	  e_msg_AddRpkiRequest(Msg, TrUserData);
      'GetRibResponse' ->
	  e_msg_GetRibResponse(Msg, TrUserData);
      'DisableMrtRequest' ->
	  e_msg_DisableMrtRequest(Msg, TrUserData);
      'DisableRpkiRequest' ->
	  e_msg_DisableRpkiRequest(Msg, TrUserData);
      'EnableRpkiResponse' ->
	  e_msg_EnableRpkiResponse(Msg, TrUserData);
      'ReplaceDefinedSetRequest' ->
	  e_msg_ReplaceDefinedSetRequest(Msg, TrUserData);
      'DisableNeighborRequest' ->
	  e_msg_DisableNeighborRequest(Msg, TrUserData);
      'DeletePolicyResponse' ->
	  e_msg_DeletePolicyResponse(Msg, TrUserData);
      'SoftResetRpkiResponse' ->
	  e_msg_SoftResetRpkiResponse(Msg, TrUserData);
      'GetNeighborResponse' ->
	  e_msg_GetNeighborResponse(Msg, TrUserData);
      'ReplacePolicyResponse' ->
	  e_msg_ReplacePolicyResponse(Msg, TrUserData);
      'GetRpkiResponse' ->
	  e_msg_GetRpkiResponse(Msg, TrUserData);
      'SoftResetNeighborResponse' ->
	  e_msg_SoftResetNeighborResponse(Msg, TrUserData);
      'AddDefinedSetResponse' ->
	  e_msg_AddDefinedSetResponse(Msg, TrUserData);
      'GetNeighborRequest' ->
	  e_msg_GetNeighborRequest(Msg, TrUserData);
      'EnableMrtRequest' ->
	  e_msg_EnableMrtRequest(Msg, TrUserData);
      'ReplacePolicyRequest' ->
	  e_msg_ReplacePolicyRequest(Msg, TrUserData);
      'Arguments' -> e_msg_Arguments(Msg, TrUserData);
      'GetRoaRequest' -> e_msg_GetRoaRequest(Msg, TrUserData);
      'DeleteDefinedSetRequest' ->
	  e_msg_DeleteDefinedSetRequest(Msg, TrUserData);
      'DeleteRpkiResponse' ->
	  e_msg_DeleteRpkiResponse(Msg, TrUserData);
      'EnableZebraResponse' ->
	  e_msg_EnableZebraResponse(Msg, TrUserData);
      'StartServerResponse' ->
	  e_msg_StartServerResponse(Msg, TrUserData);
      'ReplaceDefinedSetResponse' ->
	  e_msg_ReplaceDefinedSetResponse(Msg, TrUserData);
      'GetDefinedSetResponse' ->
	  e_msg_GetDefinedSetResponse(Msg, TrUserData);
      'ShutdownNeighborRequest' ->
	  e_msg_ShutdownNeighborRequest(Msg, TrUserData);
      'ValidateRibResponse' ->
	  e_msg_ValidateRibResponse(Msg, TrUserData);
      'DeletePolicyAssignmentResponse' ->
	  e_msg_DeletePolicyAssignmentResponse(Msg, TrUserData);
      'InjectMrtResponse' ->
	  e_msg_InjectMrtResponse(Msg, TrUserData);
      'DisableRpkiResponse' ->
	  e_msg_DisableRpkiResponse(Msg, TrUserData);
      'EnableZebraRequest' ->
	  e_msg_EnableZebraRequest(Msg, TrUserData);
      'AddVrfRequest' -> e_msg_AddVrfRequest(Msg, TrUserData);
      'DeletePathRequest' ->
	  e_msg_DeletePathRequest(Msg, TrUserData);
      'EnableNeighborResponse' ->
	  e_msg_EnableNeighborResponse(Msg, TrUserData);
      'EnableRpkiRequest' ->
	  e_msg_EnableRpkiRequest(Msg, TrUserData);
      'GetPathRequest' ->
	  e_msg_GetPathRequest(Msg, TrUserData);
      'ReplaceStatementResponse' ->
	  e_msg_ReplaceStatementResponse(Msg, TrUserData);
      'DeleteBmpRequest' ->
	  e_msg_DeleteBmpRequest(Msg, TrUserData);
      'DeleteBmpResponse' ->
	  e_msg_DeleteBmpResponse(Msg, TrUserData);
      'GetPolicyAssignmentRequest' ->
	  e_msg_GetPolicyAssignmentRequest(Msg, TrUserData);
      'DeleteStatementResponse' ->
	  e_msg_DeleteStatementResponse(Msg, TrUserData)
    end.



e_msg_MedAction(Msg, TrUserData) ->
    e_msg_MedAction(Msg, <<>>, TrUserData).


e_msg_MedAction(#{type := F1, value := F2}, Bin,
		TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'MED_MOD' -> Bin;
		     true -> e_enum_MedActionType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int64(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_DisableNeighborResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_DeleteNeighborResponse(_Msg, _TrUserData) -> <<>>.

e_msg_Global(Msg, TrUserData) ->
    e_msg_Global(Msg, <<>>, TrUserData).


e_msg_Global(#{as := F1, router_id := F2,
	       listen_port := F3, listen_addresses := F4,
	       families := F5, use_multiple_paths := F6},
	     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int32(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_Global_listen_addresses(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_Global_families(TrF5, B4, TrUserData)
	   end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= false -> B5;
		true -> e_type_bool(TrF6, <<B5/binary, 48>>)
	     end
	   end
    end.

e_msg_StartServerRequest(Msg, TrUserData) ->
    e_msg_StartServerRequest(Msg, <<>>, TrUserData).


e_msg_StartServerRequest(#{global := F1}, Bin,
			 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_StartServerRequest_global(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	     end
	   end
    end.

e_msg_DeleteRpkiRequest(Msg, TrUserData) ->
    e_msg_DeleteRpkiRequest(Msg, <<>>, TrUserData).


e_msg_DeleteRpkiRequest(#{address := F1, port := F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_GetPolicyRequest(_Msg, _TrUserData) -> <<>>.

e_msg_RPKIConf(Msg, TrUserData) ->
    e_msg_RPKIConf(Msg, <<>>, TrUserData).


e_msg_RPKIConf(#{address := F1, remote_port := F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_Roa(Msg, TrUserData) ->
    e_msg_Roa(Msg, <<>>, TrUserData).


e_msg_Roa(#{as := F1, prefixlen := F2, maxlen := F3,
	    prefix := F4, conf := F5},
	  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= undefined -> B4;
		true ->
		    e_mfield_Roa_conf(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

e_msg_GetRoaResponse(Msg, TrUserData) ->
    e_msg_GetRoaResponse(Msg, <<>>, TrUserData).


e_msg_GetRoaResponse(#{roas := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetRoaResponse_roas(TrF1, Bin, TrUserData)
      end
    end.

e_msg_GetDefinedSetRequest(Msg, TrUserData) ->
    e_msg_GetDefinedSetRequest(Msg, <<>>, TrUserData).


e_msg_GetDefinedSetRequest(#{type := F1, name := F2},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'PREFIX' -> Bin;
		     true -> e_enum_DefinedType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_DeleteVrfResponse(_Msg, _TrUserData) -> <<>>.

e_msg_TableLookupPrefix(Msg, TrUserData) ->
    e_msg_TableLookupPrefix(Msg, <<>>, TrUserData).


e_msg_TableLookupPrefix(#{prefix := F1,
			  lookup_option := F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'LOOKUP_EXACT' -> B1;
		true ->
		    e_enum_TableLookupOption(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_AfiSafiConfig(Msg, TrUserData) ->
    e_msg_AfiSafiConfig(Msg, <<>>, TrUserData).


e_msg_AfiSafiConfig(#{family := F1, enabled := F2}, Bin,
		    TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_DisableMrtResponse(_Msg, _TrUserData) -> <<>>.

e_msg_AddStatementResponse(_Msg, _TrUserData) -> <<>>.

e_msg_TableInfo(Msg, TrUserData) ->
    e_msg_TableInfo(Msg, <<>>, TrUserData).


e_msg_TableInfo(#{type := F1, name := F2, family := F3,
		  num_destination := F4, num_path := F5,
		  num_accepted := F6},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= 0 -> B5;
		true -> e_varint(TrF6, <<B5/binary, 48>>)
	     end
	   end
    end.

e_msg_GetRibInfoResponse(Msg, TrUserData) ->
    e_msg_GetRibInfoResponse(Msg, <<>>, TrUserData).


e_msg_GetRibInfoResponse(#{info := F1}, Bin,
			 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetRibInfoResponse_info(TrF1,
						     <<Bin/binary, 10>>,
						     TrUserData)
	     end
	   end
    end.

e_msg_CommunityAction(Msg, TrUserData) ->
    e_msg_CommunityAction(Msg, <<>>, TrUserData).


e_msg_CommunityAction(#{type := F1, communities := F2},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'COMMUNITY_ADD' -> Bin;
		     true ->
			 e_enum_CommunityActionType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_CommunityAction_communities(TrF2, B1,
						 TrUserData)
      end
    end.

e_msg_LocalPrefAction(Msg, TrUserData) ->
    e_msg_LocalPrefAction(Msg, <<>>, TrUserData).


e_msg_LocalPrefAction(#{value := F1}, Bin,
		      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_NexthopAction(Msg, TrUserData) ->
    e_msg_NexthopAction(Msg, <<>>, TrUserData).


e_msg_NexthopAction(#{address := F1, self := F2}, Bin,
		    TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_AsPrependAction(Msg, TrUserData) ->
    e_msg_AsPrependAction(Msg, <<>>, TrUserData).


e_msg_AsPrependAction(#{asn := F1, repeat := F2,
			use_left_most := F3},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= false -> B2;
		true -> e_type_bool(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_Actions(Msg, TrUserData) ->
    e_msg_Actions(Msg, <<>>, TrUserData).


e_msg_Actions(#{route_action := F1, community := F2,
		med := F3, as_prepend := F4, ext_community := F5,
		nexthop := F6, local_pref := F7, large_community := F8},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'NONE' -> Bin;
		     true -> e_enum_RouteAction(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_Actions_community(TrF2, <<B1/binary, 18>>,
						    TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_Actions_med(TrF3, <<B2/binary, 26>>,
					      TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_Actions_as_prepend(TrF4, <<B3/binary, 34>>,
						     TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_Actions_ext_community(TrF5, <<B4/binary, 42>>,
							TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 e_mfield_Actions_nexthop(TrF6, <<B5/binary, 50>>,
						  TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 e_mfield_Actions_local_pref(TrF7, <<B6/binary, 58>>,
						     TrUserData)
		  end
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     if TrF8 =:= undefined -> B7;
		true ->
		    e_mfield_Actions_large_community(TrF8,
						     <<B7/binary, 66>>,
						     TrUserData)
	     end
	   end
    end.

e_msg_MatchSet(Msg, TrUserData) ->
    e_msg_MatchSet(Msg, <<>>, TrUserData).


e_msg_MatchSet(#{type := F1, name := F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'ANY' -> Bin;
		     true -> e_enum_MatchType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_AsPathLength(Msg, TrUserData) ->
    e_msg_AsPathLength(Msg, <<>>, TrUserData).


e_msg_AsPathLength(#{type := F1, length := F2}, Bin,
		   TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'EQ' -> Bin;
		     true -> e_enum_AsPathLengthType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_Conditions(Msg, TrUserData) ->
    e_msg_Conditions(Msg, <<>>, TrUserData).


e_msg_Conditions(#{prefix_set := F1, neighbor_set := F2,
		   as_path_length := F3, as_path_set := F4,
		   community_set := F5, ext_community_set := F6,
		   rpki_result := F7, route_type := F8,
		   large_community_set := F9},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Conditions_prefix_set(TrF1,
							<<Bin/binary, 10>>,
							TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_Conditions_neighbor_set(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_Conditions_as_path_length(TrF3,
							    <<B2/binary, 26>>,
							    TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_Conditions_as_path_set(TrF4,
							 <<B3/binary, 34>>,
							 TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_Conditions_community_set(TrF5,
							   <<B4/binary, 42>>,
							   TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 e_mfield_Conditions_ext_community_set(TrF6,
							       <<B5/binary,
								 50>>,
							       TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_type_int32(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 'ROUTE_TYPE_NONE' -> B7;
		     true ->
			 'e_enum_Conditions.RouteType'(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     if TrF9 =:= undefined -> B8;
		true ->
		    e_mfield_Conditions_large_community_set(TrF9,
							    <<B8/binary, 74>>,
							    TrUserData)
	     end
	   end
    end.

e_msg_Statement(Msg, TrUserData) ->
    e_msg_Statement(Msg, <<>>, TrUserData).


e_msg_Statement(#{name := F1, conditions := F2,
		  actions := F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_Statement_conditions(TrF2, <<B1/binary, 18>>,
						       TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    e_mfield_Statement_actions(TrF3, <<B2/binary, 26>>,
					       TrUserData)
	     end
	   end
    end.

e_msg_GetStatementResponse(Msg, TrUserData) ->
    e_msg_GetStatementResponse(Msg, <<>>, TrUserData).


e_msg_GetStatementResponse(#{statements := F1}, Bin,
			   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetStatementResponse_statements(TrF1, Bin,
						     TrUserData)
      end
    end.

e_msg_UseMultiplePathsConfig(Msg, TrUserData) ->
    e_msg_UseMultiplePathsConfig(Msg, <<>>, TrUserData).


e_msg_UseMultiplePathsConfig(#{enabled := F1}, Bin,
			     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_AddVrfResponse(_Msg, _TrUserData) -> <<>>.

e_msg_PrefixLimit(Msg, TrUserData) ->
    e_msg_PrefixLimit(Msg, <<>>, TrUserData).


e_msg_PrefixLimit(#{family := F1, max_prefixes := F2,
		    shutdown_threshold_pct := F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_PeerConf(Msg, TrUserData) ->
    e_msg_PeerConf(Msg, <<>>, TrUserData).


e_msg_PeerConf(#{auth_password := F1, description := F2,
		 local_as := F3, neighbor_address := F4, peer_as := F5,
		 peer_group := F6, peer_type := F7,
		 remove_private_as := F8, route_flap_damping := F9,
		 send_community := F10, remote_cap := F11,
		 local_cap := F12, id := F13, prefix_limits := F14,
		 local_address := F15, neighbor_interface := F16,
		 vrf := F17, allow_own_as := F18,
		 replace_peer_as := F19},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false -> e_type_string(TrF6, <<B5/binary, 50>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 'NONE' -> B7;
		     true ->
			 'e_enum_PeerConf.RemovePrivateAs'(TrF8,
							   <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= false -> B8;
		     true -> e_type_bool(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    if TrF11 == [] -> B10;
	       true ->
		   e_field_PeerConf_remote_cap(TrF11, B10, TrUserData)
	    end
	  end,
    B12 = begin
	    TrF12 = id(F12, TrUserData),
	    if TrF12 == [] -> B11;
	       true ->
		   e_field_PeerConf_local_cap(TrF12, B11, TrUserData)
	    end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   case is_empty_string(TrF13) of
		     true -> B12;
		     false -> e_type_string(TrF13, <<B12/binary, 106>>)
		   end
		 end
	  end,
    B14 = begin
	    TrF14 = id(F14, TrUserData),
	    if TrF14 == [] -> B13;
	       true ->
		   e_field_PeerConf_prefix_limits(TrF14, B13, TrUserData)
	    end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   case is_empty_string(TrF15) of
		     true -> B14;
		     false -> e_type_string(TrF15, <<B14/binary, 122>>)
		   end
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   case is_empty_string(TrF16) of
		     true -> B15;
		     false -> e_type_string(TrF16, <<B15/binary, 130, 1>>)
		   end
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   case is_empty_string(TrF17) of
		     true -> B16;
		     false -> e_type_string(TrF17, <<B16/binary, 138, 1>>)
		   end
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   if TrF18 =:= 0 -> B17;
		      true -> e_varint(TrF18, <<B17/binary, 144, 1>>)
		   end
		 end
	  end,
    if F19 == undefined -> B18;
       true ->
	   begin
	     TrF19 = id(F19, TrUserData),
	     if TrF19 =:= false -> B18;
		true -> e_type_bool(TrF19, <<B18/binary, 152, 1>>)
	     end
	   end
    end.

e_msg_Policy(Msg, TrUserData) ->
    e_msg_Policy(Msg, <<>>, TrUserData).


e_msg_Policy(#{name := F1, statements := F2}, Bin,
	     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_Policy_statements(TrF2, B1, TrUserData)
      end
    end.

e_msg_PolicyAssignment(Msg, TrUserData) ->
    e_msg_PolicyAssignment(Msg, <<>>, TrUserData).


e_msg_PolicyAssignment(#{type := F1, resource := F2,
			 name := F3, policies := F4, default := F5},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'IN' -> Bin;
		     true -> e_enum_PolicyType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 'GLOBAL' -> B1;
		     true -> e_enum_Resource(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_PolicyAssignment_policies(TrF4, B3, TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 'NONE' -> B4;
		true -> e_enum_RouteAction(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_AddPolicyAssignmentRequest(Msg, TrUserData) ->
    e_msg_AddPolicyAssignmentRequest(Msg, <<>>, TrUserData).


e_msg_AddPolicyAssignmentRequest(#{assignment := F1},
				 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_AddPolicyAssignmentRequest_assignment(TrF1,
								   <<Bin/binary,
								     10>>,
								   TrUserData)
	     end
	   end
    end.

e_msg_GetPolicyResponse(Msg, TrUserData) ->
    e_msg_GetPolicyResponse(Msg, <<>>, TrUserData).


e_msg_GetPolicyResponse(#{policies := F1}, Bin,
			TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetPolicyResponse_policies(TrF1, Bin,
						TrUserData)
      end
    end.

e_msg_RouteSelectionOptionsConfig(Msg, TrUserData) ->
    e_msg_RouteSelectionOptionsConfig(Msg, <<>>,
				      TrUserData).


e_msg_RouteSelectionOptionsConfig(#{always_compare_med
					:= F1,
				    ignore_as_path_length := F2,
				    external_compare_router_id := F3,
				    advertise_inactive_routes := F4,
				    enable_aigp := F5,
				    ignore_next_hop_igp_metric := F6},
				  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= false -> B4;
		     true -> e_type_bool(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= false -> B5;
		true -> e_type_bool(TrF6, <<B5/binary, 48>>)
	     end
	   end
    end.

e_msg_ApplyPolicy(Msg, TrUserData) ->
    e_msg_ApplyPolicy(Msg, <<>>, TrUserData).


e_msg_ApplyPolicy(#{in_policy := F1,
		    export_policy := F2, import_policy := F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_ApplyPolicy_in_policy(TrF1,
							<<Bin/binary, 10>>,
							TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_ApplyPolicy_export_policy(TrF2,
							    <<B1/binary, 18>>,
							    TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    e_mfield_ApplyPolicy_import_policy(TrF3,
						       <<B2/binary, 26>>,
						       TrUserData)
	     end
	   end
    end.

e_msg_AddPolicyAssignmentResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_Transport(Msg, TrUserData) ->
    e_msg_Transport(Msg, <<>>, TrUserData).


e_msg_Transport(#{local_address := F1, local_port := F2,
		  mtu_discovery := F3, passive_mode := F4,
		  remote_address := F5, remote_port := F6, tcp_mss := F7},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false -> e_type_string(TrF5, <<B4/binary, 42>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= 0 -> B6;
		true -> e_varint(TrF7, <<B6/binary, 56>>)
	     end
	   end
    end.

e_msg_AddNeighborResponse(_Msg, _TrUserData) -> <<>>.

e_msg_GetVrfRequest(_Msg, _TrUserData) -> <<>>.

e_msg_AddStatementRequest(Msg, TrUserData) ->
    e_msg_AddStatementRequest(Msg, <<>>, TrUserData).


e_msg_AddStatementRequest(#{statement := F1}, Bin,
			  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_AddStatementRequest_statement(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
	     end
	   end
    end.

e_msg_IbgpState(Msg, TrUserData) ->
    e_msg_IbgpState(Msg, <<>>, TrUserData).


e_msg_IbgpState(#{maximum_paths := F1}, Bin,
		TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_IbgpConfig(Msg, TrUserData) ->
    e_msg_IbgpConfig(Msg, <<>>, TrUserData).


e_msg_IbgpConfig(#{maximum_paths := F1}, Bin,
		 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_Ibgp(Msg, TrUserData) ->
    e_msg_Ibgp(Msg, <<>>, TrUserData).


e_msg_Ibgp(#{config := F1, state := F2}, Bin,
	   TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Ibgp_config(TrF1, <<Bin/binary, 10>>,
					      TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_Ibgp_state(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

e_msg_EbgpState(Msg, TrUserData) ->
    e_msg_EbgpState(Msg, <<>>, TrUserData).


e_msg_EbgpState(#{allow_multiple_as := F1,
		  maximum_paths := F2},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_EbgpConfig(Msg, TrUserData) ->
    e_msg_EbgpConfig(Msg, <<>>, TrUserData).


e_msg_EbgpConfig(#{allow_multiple_as := F1,
		   maximum_paths := F2},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_Ebgp(Msg, TrUserData) ->
    e_msg_Ebgp(Msg, <<>>, TrUserData).


e_msg_Ebgp(#{config := F1, state := F2}, Bin,
	   TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Ebgp_config(TrF1, <<Bin/binary, 10>>,
					      TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_Ebgp_state(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

e_msg_UseMultiplePathsState(Msg, TrUserData) ->
    e_msg_UseMultiplePathsState(Msg, <<>>, TrUserData).


e_msg_UseMultiplePathsState(#{enabled := F1}, Bin,
			    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_UseMultiplePaths(Msg, TrUserData) ->
    e_msg_UseMultiplePaths(Msg, <<>>, TrUserData).


e_msg_UseMultiplePaths(#{config := F1, state := F2,
			 ebgp := F3, ibgp := F4},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_UseMultiplePaths_config(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_UseMultiplePaths_state(TrF2,
							 <<B1/binary, 18>>,
							 TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_UseMultiplePaths_ebgp(TrF3, <<B2/binary, 26>>,
							TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= undefined -> B3;
		true ->
		    e_mfield_UseMultiplePaths_ibgp(TrF4, <<B3/binary, 34>>,
						   TrUserData)
	     end
	   end
    end.

e_msg_LongLivedGracefulRestartState(Msg, TrUserData) ->
    e_msg_LongLivedGracefulRestartState(Msg, <<>>,
					TrUserData).


e_msg_LongLivedGracefulRestartState(#{enabled := F1,
				      received := F2, advertised := F3,
				      peer_restart_time := F4,
				      peer_restart_timer_expired := F5},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= false -> B4;
		true -> e_type_bool(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_LongLivedGracefulRestartConfig(Msg, TrUserData) ->
    e_msg_LongLivedGracefulRestartConfig(Msg, <<>>,
					 TrUserData).


e_msg_LongLivedGracefulRestartConfig(#{enabled := F1,
				       restart_time := F2},
				     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_LongLivedGracefulRestart(Msg, TrUserData) ->
    e_msg_LongLivedGracefulRestart(Msg, <<>>, TrUserData).


e_msg_LongLivedGracefulRestart(#{config := F1,
				 state := F2},
			       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_LongLivedGracefulRestart_config(TrF1,
								  <<Bin/binary,
								    10>>,
								  TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_LongLivedGracefulRestart_state(TrF2,
							    <<B1/binary, 18>>,
							    TrUserData)
	     end
	   end
    end.

e_msg_ResetNeighborResponse(_Msg, _TrUserData) -> <<>>.

e_msg_AddPathsState(Msg, TrUserData) ->
    e_msg_AddPathsState(Msg, <<>>, TrUserData).


e_msg_AddPathsState(#{'receive' := F1, send_max := F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_AddPathsConfig(Msg, TrUserData) ->
    e_msg_AddPathsConfig(Msg, <<>>, TrUserData).


e_msg_AddPathsConfig(#{'receive' := F1, send_max := F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_AddPaths(Msg, TrUserData) ->
    e_msg_AddPaths(Msg, <<>>, TrUserData).


e_msg_AddPaths(#{config := F1, state := F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_AddPaths_config(TrF1, <<Bin/binary, 10>>,
						  TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_AddPaths_state(TrF2, <<B1/binary, 18>>,
					    TrUserData)
	     end
	   end
    end.

e_msg_RouteTargetMembershipState(Msg, TrUserData) ->
    e_msg_RouteTargetMembershipState(Msg, <<>>, TrUserData).


e_msg_RouteTargetMembershipState(#{deferral_time := F1},
				 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_RouteTargetMembershipConfig(Msg, TrUserData) ->
    e_msg_RouteTargetMembershipConfig(Msg, <<>>,
				      TrUserData).


e_msg_RouteTargetMembershipConfig(#{deferral_time :=
					F1},
				  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_RouteTargetMembership(Msg, TrUserData) ->
    e_msg_RouteTargetMembership(Msg, <<>>, TrUserData).


e_msg_RouteTargetMembership(#{config := F1,
			      state := F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_RouteTargetMembership_config(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_RouteTargetMembership_state(TrF2,
							 <<B1/binary, 18>>,
							 TrUserData)
	     end
	   end
    end.

e_msg_RouteSelectionOptionsState(Msg, TrUserData) ->
    e_msg_RouteSelectionOptionsState(Msg, <<>>, TrUserData).


e_msg_RouteSelectionOptionsState(#{always_compare_med :=
				       F1,
				   ignore_as_path_length := F2,
				   external_compare_router_id := F3,
				   advertise_inactive_routes := F4,
				   enable_aigp := F5,
				   ignore_next_hop_igp_metric := F6},
				 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= false -> B4;
		     true -> e_type_bool(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= false -> B5;
		true -> e_type_bool(TrF6, <<B5/binary, 48>>)
	     end
	   end
    end.

e_msg_RouteSelectionOptions(Msg, TrUserData) ->
    e_msg_RouteSelectionOptions(Msg, <<>>, TrUserData).


e_msg_RouteSelectionOptions(#{config := F1,
			      state := F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_RouteSelectionOptions_config(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_RouteSelectionOptions_state(TrF2,
							 <<B1/binary, 18>>,
							 TrUserData)
	     end
	   end
    end.

e_msg_MpGracefulRestartState(Msg, TrUserData) ->
    e_msg_MpGracefulRestartState(Msg, <<>>, TrUserData).


e_msg_MpGracefulRestartState(#{enabled := F1,
			       received := F2, advertised := F3,
			       end_of_rib_received := F4,
			       end_of_rib_sent := F5},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= false -> B4;
		true -> e_type_bool(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_MpGracefulRestartConfig(Msg, TrUserData) ->
    e_msg_MpGracefulRestartConfig(Msg, <<>>, TrUserData).


e_msg_MpGracefulRestartConfig(#{enabled := F1}, Bin,
			      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_MpGracefulRestart(Msg, TrUserData) ->
    e_msg_MpGracefulRestart(Msg, <<>>, TrUserData).


e_msg_MpGracefulRestart(#{config := F1, state := F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_MpGracefulRestart_config(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_MpGracefulRestart_state(TrF2,
						     <<B1/binary, 18>>,
						     TrUserData)
	     end
	   end
    end.

e_msg_AfiSafi(Msg, TrUserData) ->
    e_msg_AfiSafi(Msg, <<>>, TrUserData).


e_msg_AfiSafi(#{mp_graceful_restart := F1, config := F2,
		apply_policy := F3, route_selection_options := F4,
		use_multiple_paths := F5, prefix_limits := F6,
		route_target_membership := F7,
		long_lived_graceful_restart := F8, add_paths := F9},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_AfiSafi_mp_graceful_restart(TrF1,
							      <<Bin/binary,
								10>>,
							      TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_AfiSafi_config(TrF2, <<B1/binary, 18>>,
						 TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_AfiSafi_apply_policy(TrF3, <<B2/binary, 26>>,
						       TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_AfiSafi_route_selection_options(TrF4,
								  <<B3/binary,
								    34>>,
								  TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_AfiSafi_use_multiple_paths(TrF5,
							     <<B4/binary, 42>>,
							     TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 e_mfield_AfiSafi_prefix_limits(TrF6, <<B5/binary, 50>>,
							TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 e_mfield_AfiSafi_route_target_membership(TrF7,
								  <<B6/binary,
								    58>>,
								  TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= undefined -> B7;
		     true ->
			 e_mfield_AfiSafi_long_lived_graceful_restart(TrF8,
								      <<B7/binary,
									66>>,
								      TrUserData)
		  end
		end
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     if TrF9 =:= undefined -> B8;
		true ->
		    e_mfield_AfiSafi_add_paths(TrF9, <<B8/binary, 74>>,
					       TrUserData)
	     end
	   end
    end.

e_msg_GracefulRestart(Msg, TrUserData) ->
    e_msg_GracefulRestart(Msg, <<>>, TrUserData).


e_msg_GracefulRestart(#{enabled := F1,
			restart_time := F2, helper_only := F3,
			deferral_time := F4, notification_enabled := F5,
			longlived_enabled := F6},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= false -> B4;
		     true -> e_type_bool(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= false -> B5;
		true -> e_type_bool(TrF6, <<B5/binary, 48>>)
	     end
	   end
    end.

e_msg_RouteServer(Msg, TrUserData) ->
    e_msg_RouteServer(Msg, <<>>, TrUserData).


e_msg_RouteServer(#{route_server_client := F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_TimersState(Msg, TrUserData) ->
    e_msg_TimersState(Msg, <<>>, TrUserData).


e_msg_TimersState(#{connect_retry := F1,
		    hold_time := F2, keepalive_interval := F3,
		    minimum_advertisement_interval := F4,
		    negotiated_hold_time := F5, uptime := F6,
		    downtime := F7},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= 0 -> B6;
		true -> e_varint(TrF7, <<B6/binary, 56>>)
	     end
	   end
    end.

e_msg_TimersConfig(Msg, TrUserData) ->
    e_msg_TimersConfig(Msg, <<>>, TrUserData).


e_msg_TimersConfig(#{connect_retry := F1,
		     hold_time := F2, keepalive_interval := F3,
		     minimum_advertisement_interval := F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_Timers(Msg, TrUserData) ->
    e_msg_Timers(Msg, <<>>, TrUserData).


e_msg_Timers(#{config := F1, state := F2}, Bin,
	     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Timers_config(TrF1, <<Bin/binary, 10>>,
						TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_Timers_state(TrF2, <<B1/binary, 18>>,
					  TrUserData)
	     end
	   end
    end.

e_msg_Queues(Msg, TrUserData) ->
    e_msg_Queues(Msg, <<>>, TrUserData).


e_msg_Queues(#{input := F1, output := F2}, Bin,
	     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_Message(Msg, TrUserData) ->
    e_msg_Message(Msg, <<>>, TrUserData).


e_msg_Message(#{'NOTIFICATION' := F1, 'UPDATE' := F2,
		'OPEN' := F3, 'KEEPALIVE' := F4, 'REFRESH' := F5,
		'DISCARDED' := F6, 'TOTAL' := F7},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= 0 -> B6;
		true -> e_varint(TrF7, <<B6/binary, 56>>)
	     end
	   end
    end.

e_msg_Messages(Msg, TrUserData) ->
    e_msg_Messages(Msg, <<>>, TrUserData).


e_msg_Messages(#{received := F1, sent := F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Messages_received(TrF1, <<Bin/binary, 10>>,
						    TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_Messages_sent(TrF2, <<B1/binary, 18>>,
					   TrUserData)
	     end
	   end
    end.

e_msg_PeerState(Msg, TrUserData) ->
    e_msg_PeerState(Msg, <<>>, TrUserData).


e_msg_PeerState(#{auth_password := F1,
		  description := F2, local_as := F3, messages := F4,
		  neighbor_address := F5, peer_as := F6, peer_group := F7,
		  peer_type := F8, queues := F9, remove_private_as := F10,
		  route_flap_damping := F11, send_community := F12,
		  session_state := F13, supported_capabilities := F14,
		  bgp_state := F15, admin_state := F16, received := F17,
		  accepted := F18, advertised := F19, out_q := F20,
		  flops := F21},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_PeerState_messages(TrF4, <<B3/binary, 34>>,
						     TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false -> e_type_string(TrF5, <<B4/binary, 42>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  case is_empty_string(TrF7) of
		    true -> B6;
		    false -> e_type_string(TrF7, <<B6/binary, 58>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= undefined -> B8;
		     true ->
			 e_mfield_PeerState_queues(TrF9, <<B8/binary, 74>>,
						   TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= false -> B10;
		      true -> e_type_bool(TrF11, <<B10/binary, 88>>)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= 0 -> B11;
		      true -> e_varint(TrF12, <<B11/binary, 96>>)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0 -> B12;
		      true -> e_varint(TrF13, <<B12/binary, 104>>)
		   end
		 end
	  end,
    B14 = begin
	    TrF14 = id(F14, TrUserData),
	    if TrF14 == [] -> B13;
	       true ->
		   e_field_PeerState_supported_capabilities(TrF14, B13,
							    TrUserData)
	    end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   case is_empty_string(TrF15) of
		     true -> B14;
		     false -> e_type_string(TrF15, <<B14/binary, 122>>)
		   end
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   if TrF16 =:= 'UP' -> B15;
		      true ->
			  'e_enum_PeerState.AdminState'(TrF16,
							<<B15/binary, 128, 1>>)
		   end
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   if TrF17 =:= 0 -> B16;
		      true -> e_varint(TrF17, <<B16/binary, 136, 1>>)
		   end
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   if TrF18 =:= 0 -> B17;
		      true -> e_varint(TrF18, <<B17/binary, 144, 1>>)
		   end
		 end
	  end,
    B19 = if F19 == undefined -> B18;
	     true ->
		 begin
		   TrF19 = id(F19, TrUserData),
		   if TrF19 =:= 0 -> B18;
		      true -> e_varint(TrF19, <<B18/binary, 152, 1>>)
		   end
		 end
	  end,
    B20 = if F20 == undefined -> B19;
	     true ->
		 begin
		   TrF20 = id(F20, TrUserData),
		   if TrF20 =:= 0 -> B19;
		      true -> e_varint(TrF20, <<B19/binary, 160, 1>>)
		   end
		 end
	  end,
    if F21 == undefined -> B20;
       true ->
	   begin
	     TrF21 = id(F21, TrUserData),
	     if TrF21 =:= 0 -> B20;
		true -> e_varint(TrF21, <<B20/binary, 168, 1>>)
	     end
	   end
    end.

e_msg_RouteReflector(Msg, TrUserData) ->
    e_msg_RouteReflector(Msg, <<>>, TrUserData).


e_msg_RouteReflector(#{route_reflector_client := F1,
		       route_reflector_cluster_id := F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_EbgpMultihop(Msg, TrUserData) ->
    e_msg_EbgpMultihop(Msg, <<>>, TrUserData).


e_msg_EbgpMultihop(#{enabled := F1, multihop_ttl := F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_Peer(Msg, TrUserData) ->
    e_msg_Peer(Msg, <<>>, TrUserData).


e_msg_Peer(#{families := F1, apply_policy := F2,
	     conf := F3, ebgp_multihop := F4, route_reflector := F5,
	     info := F6, timers := F7, transport := F8,
	     route_server := F9, graceful_restart := F10,
	     afi_safis := F11, add_paths := F12},
	   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_Peer_families(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_Peer_apply_policy(TrF2, <<B1/binary, 18>>,
						    TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_Peer_conf(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_Peer_ebgp_multihop(TrF4, <<B3/binary, 34>>,
						     TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_Peer_route_reflector(TrF5, <<B4/binary, 42>>,
						       TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 e_mfield_Peer_info(TrF6, <<B5/binary, 50>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 e_mfield_Peer_timers(TrF7, <<B6/binary, 58>>,
					      TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= undefined -> B7;
		     true ->
			 e_mfield_Peer_transport(TrF8, <<B7/binary, 66>>,
						 TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= undefined -> B8;
		     true ->
			 e_mfield_Peer_route_server(TrF9, <<B8/binary, 74>>,
						    TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= undefined -> B9;
		      true ->
			  e_mfield_Peer_graceful_restart(TrF10,
							 <<B9/binary, 82>>,
							 TrUserData)
		   end
		 end
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    if TrF11 == [] -> B10;
	       true -> e_field_Peer_afi_safis(TrF11, B10, TrUserData)
	    end
	  end,
    if F12 == undefined -> B11;
       true ->
	   begin
	     TrF12 = id(F12, TrUserData),
	     if TrF12 =:= undefined -> B11;
		true ->
		    e_mfield_Peer_add_paths(TrF12, <<B11/binary, 98>>,
					    TrUserData)
	     end
	   end
    end.

e_msg_AddNeighborRequest(Msg, TrUserData) ->
    e_msg_AddNeighborRequest(Msg, <<>>, TrUserData).


e_msg_AddNeighborRequest(#{peer := F1}, Bin,
			 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_AddNeighborRequest_peer(TrF1,
						     <<Bin/binary, 10>>,
						     TrUserData)
	     end
	   end
    end.

e_msg_ValidateRibRequest(Msg, TrUserData) ->
    e_msg_ValidateRibRequest(Msg, <<>>, TrUserData).


e_msg_ValidateRibRequest(#{type := F1, family := F2,
			   prefix := F3},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_DeletePolicyAssignmentRequest(Msg, TrUserData) ->
    e_msg_DeletePolicyAssignmentRequest(Msg, <<>>,
					TrUserData).


e_msg_DeletePolicyAssignmentRequest(#{assignment := F1,
				      all := F2},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_DeletePolicyAssignmentRequest_assignment(TrF1,
									   <<Bin/binary,
									     10>>,
									   TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_RPKIValidation(Msg, TrUserData) ->
    e_msg_RPKIValidation(Msg, <<>>, TrUserData).


e_msg_RPKIValidation(#{state := F1, reason := F2,
		       matched := F3, unmatched_as := F4,
		       unmatched_length := F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'STATE_NONE' -> Bin;
		     true ->
			 'e_enum_RPKIValidation.State'(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 'REASOT_NONE' -> B1;
		     true ->
			 'e_enum_RPKIValidation.Reason'(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_RPKIValidation_matched(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_RPKIValidation_unmatched_as(TrF4, B3,
						      TrUserData)
	   end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_RPKIValidation_unmatched_length(TrF5, B4,
						     TrUserData)
      end
    end.

e_msg_Path(Msg, TrUserData) ->
    e_msg_Path(Msg, <<>>, TrUserData).


e_msg_Path(#{nlri := F1, pattrs := F2, age := F3,
	     best := F4, is_withdraw := F5, validation := F6,
	     validation_detail := F7, no_implicit_withdraw := F8,
	     family := F9, source_asn := F10, source_id := F11,
	     filtered := F12, stale := F13, is_from_external := F14,
	     neighbor_ip := F15, uuid := F16,
	     is_nexthop_invalid := F17, identifier := F18,
	     local_identifier := F19},
	   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_Path_pattrs(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int64(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= false -> B4;
		     true -> e_type_bool(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_type_int32(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 e_mfield_Path_validation_detail(TrF7,
							 <<B6/binary, 58>>,
							 TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= false -> B7;
		     true -> e_type_bool(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   case is_empty_string(TrF11) of
		     true -> B10;
		     false -> e_type_string(TrF11, <<B10/binary, 90>>)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= false -> B11;
		      true -> e_type_bool(TrF12, <<B11/binary, 96>>)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= false -> B12;
		      true -> e_type_bool(TrF13, <<B12/binary, 104>>)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= false -> B13;
		      true -> e_type_bool(TrF14, <<B13/binary, 112>>)
		   end
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   case is_empty_string(TrF15) of
		     true -> B14;
		     false -> e_type_string(TrF15, <<B14/binary, 122>>)
		   end
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   case iolist_size(TrF16) of
		     0 -> B15;
		     _ -> e_type_bytes(TrF16, <<B15/binary, 130, 1>>)
		   end
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   if TrF17 =:= false -> B16;
		      true -> e_type_bool(TrF17, <<B16/binary, 136, 1>>)
		   end
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   if TrF18 =:= 0 -> B17;
		      true -> e_varint(TrF18, <<B17/binary, 144, 1>>)
		   end
		 end
	  end,
    if F19 == undefined -> B18;
       true ->
	   begin
	     TrF19 = id(F19, TrUserData),
	     if TrF19 =:= 0 -> B18;
		true -> e_varint(TrF19, <<B18/binary, 152, 1>>)
	     end
	   end
    end.

e_msg_Destination(Msg, TrUserData) ->
    e_msg_Destination(Msg, <<>>, TrUserData).


e_msg_Destination(#{prefix := F1, paths := F2,
		    longer_prefixes := F3, shorter_prefixes := F4},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_Destination_paths(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= false -> B3;
		true -> e_type_bool(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_Table(Msg, TrUserData) ->
    e_msg_Table(Msg, <<>>, TrUserData).


e_msg_Table(#{type := F1, name := F2, family := F3,
	      destinations := F4, post_policy := F5},
	    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true -> e_field_Table_destinations(TrF4, B3, TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= false -> B4;
		true -> e_type_bool(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_MonitorRibRequest(Msg, TrUserData) ->
    e_msg_MonitorRibRequest(Msg, <<>>, TrUserData).


e_msg_MonitorRibRequest(#{table := F1, current := F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_MonitorRibRequest_table(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_ShutdownNeighborResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_AddRpkiResponse(_Msg, _TrUserData) -> <<>>.

e_msg_AddPolicyRequest(Msg, TrUserData) ->
    e_msg_AddPolicyRequest(Msg, <<>>, TrUserData).


e_msg_AddPolicyRequest(#{policy := F1,
			 refer_existing_statements := F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_AddPolicyRequest_policy(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_RPKIState(Msg, TrUserData) ->
    e_msg_RPKIState(Msg, <<>>, TrUserData).


e_msg_RPKIState(#{uptime := F1, downtime := F2,
		  up := F3, record_ipv4 := F4, record_ipv6 := F5,
		  prefix_ipv4 := F6, prefix_ipv6 := F7, serial := F8,
		  received_ipv4 := F9, received_ipv6 := F10,
		  serial_notify := F11, cache_reset := F12,
		  cache_response := F13, end_of_data := F14, error := F15,
		  serial_query := F16, reset_query := F17},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int64(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_type_int64(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_type_int64(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= 0 -> B10;
		      true -> e_type_int64(TrF11, <<B10/binary, 88>>)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= 0 -> B11;
		      true -> e_type_int64(TrF12, <<B11/binary, 96>>)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0 -> B12;
		      true -> e_type_int64(TrF13, <<B12/binary, 104>>)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= 0 -> B13;
		      true -> e_type_int64(TrF14, <<B13/binary, 112>>)
		   end
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   if TrF15 =:= 0 -> B14;
		      true -> e_type_int64(TrF15, <<B14/binary, 120>>)
		   end
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   if TrF16 =:= 0 -> B15;
		      true -> e_type_int64(TrF16, <<B15/binary, 128, 1>>)
		   end
		 end
	  end,
    if F17 == undefined -> B16;
       true ->
	   begin
	     TrF17 = id(F17, TrUserData),
	     if TrF17 =:= 0 -> B16;
		true -> e_type_int64(TrF17, <<B16/binary, 136, 1>>)
	     end
	   end
    end.

e_msg_Rpki(Msg, TrUserData) ->
    e_msg_Rpki(Msg, <<>>, TrUserData).


e_msg_Rpki(#{conf := F1, state := F2}, Bin,
	   TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Rpki_conf(TrF1, <<Bin/binary, 10>>,
					    TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_Rpki_state(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

e_msg_AddPathRequest(Msg, TrUserData) ->
    e_msg_AddPathRequest(Msg, <<>>, TrUserData).


e_msg_AddPathRequest(#{resource := F1, vrf_id := F2,
		       path := F3},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    e_mfield_AddPathRequest_path(TrF3, <<B2/binary, 26>>,
						 TrUserData)
	     end
	   end
    end.

e_msg_ResetRpkiResponse(_Msg, _TrUserData) -> <<>>.

e_msg_ResetRpkiRequest(Msg, TrUserData) ->
    e_msg_ResetRpkiRequest(Msg, <<>>, TrUserData).


e_msg_ResetRpkiRequest(#{address := F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_SoftResetNeighborRequest(Msg, TrUserData) ->
    e_msg_SoftResetNeighborRequest(Msg, <<>>, TrUserData).


e_msg_SoftResetNeighborRequest(#{address := F1,
				 direction := F2},
			       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'IN' -> B1;
		true ->
		    'e_enum_SoftResetNeighborRequest.SoftResetDirection'(TrF2,
									 <<B1/binary,
									   16>>)
	     end
	   end
    end.

e_msg_AddPolicyResponse(_Msg, _TrUserData) -> <<>>.

e_msg_EnableNeighborRequest(Msg, TrUserData) ->
    e_msg_EnableNeighborRequest(Msg, <<>>, TrUserData).


e_msg_EnableNeighborRequest(#{address := F1}, Bin,
			    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_AddPathResponse(Msg, TrUserData) ->
    e_msg_AddPathResponse(Msg, <<>>, TrUserData).


e_msg_AddPathResponse(#{uuid := F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_Vrf(Msg, TrUserData) ->
    e_msg_Vrf(Msg, <<>>, TrUserData).


e_msg_Vrf(#{name := F1, rd := F2, import_rt := F3,
	    export_rt := F4, id := F5},
	  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_Vrf_import_rt(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true -> e_field_Vrf_export_rt(TrF4, B3, TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true -> e_varint(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_GetVrfResponse(Msg, TrUserData) ->
    e_msg_GetVrfResponse(Msg, <<>>, TrUserData).


e_msg_GetVrfResponse(#{vrfs := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetVrfResponse_vrfs(TrF1, Bin, TrUserData)
      end
    end.

e_msg_SoftResetRpkiRequest(Msg, TrUserData) ->
    e_msg_SoftResetRpkiRequest(Msg, <<>>, TrUserData).


e_msg_SoftResetRpkiRequest(#{address := F1}, Bin,
			   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_StopServerRequest(_Msg, _TrUserData) -> <<>>.

e_msg_AddBmpResponse(_Msg, _TrUserData) -> <<>>.

e_msg_GetRpkiRequest(Msg, TrUserData) ->
    e_msg_GetRpkiRequest(Msg, <<>>, TrUserData).


e_msg_GetRpkiRequest(#{family := F1}, Bin,
		     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_DeleteNeighborRequest(Msg, TrUserData) ->
    e_msg_DeleteNeighborRequest(Msg, <<>>, TrUserData).


e_msg_DeleteNeighborRequest(#{peer := F1}, Bin,
			    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_DeleteNeighborRequest_peer(TrF1,
							<<Bin/binary, 10>>,
							TrUserData)
	     end
	   end
    end.

e_msg_AfiSafiState(Msg, TrUserData) ->
    e_msg_AfiSafiState(Msg, <<>>, TrUserData).


e_msg_AfiSafiState(#{family := F1, enabled := F2,
		     total_paths := F3, total_prefixes := F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_GetServerResponse(Msg, TrUserData) ->
    e_msg_GetServerResponse(Msg, <<>>, TrUserData).


e_msg_GetServerResponse(#{global := F1}, Bin,
			TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetServerResponse_global(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
	     end
	   end
    end.

e_msg_EnableMrtResponse(_Msg, _TrUserData) -> <<>>.

e_msg_InjectMrtRequest(Msg, TrUserData) ->
    e_msg_InjectMrtRequest(Msg, <<>>, TrUserData).


e_msg_InjectMrtRequest(#{resource := F1, vrf_id := F2,
			 paths := F3},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_InjectMrtRequest_paths(TrF3, B2, TrUserData)
      end
    end.

e_msg_Prefix(Msg, TrUserData) ->
    e_msg_Prefix(Msg, <<>>, TrUserData).


e_msg_Prefix(#{ip_prefix := F1, mask_length_min := F2,
	       mask_length_max := F3},
	     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_DefinedSet(Msg, TrUserData) ->
    e_msg_DefinedSet(Msg, <<>>, TrUserData).


e_msg_DefinedSet(#{type := F1, name := F2, list := F3,
		   prefixes := F4},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'PREFIX' -> Bin;
		     true -> e_enum_DefinedType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_DefinedSet_list(TrF3, B2, TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_DefinedSet_prefixes(TrF4, B3, TrUserData)
      end
    end.

e_msg_AddDefinedSetRequest(Msg, TrUserData) ->
    e_msg_AddDefinedSetRequest(Msg, <<>>, TrUserData).


e_msg_AddDefinedSetRequest(#{set := F1}, Bin,
			   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_AddDefinedSetRequest_set(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
	     end
	   end
    end.

e_msg_ReplacePolicyAssignmentRequest(Msg, TrUserData) ->
    e_msg_ReplacePolicyAssignmentRequest(Msg, <<>>,
					 TrUserData).


e_msg_ReplacePolicyAssignmentRequest(#{assignment :=
					   F1},
				     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_ReplacePolicyAssignmentRequest_assignment(TrF1,
								       <<Bin/binary,
									 10>>,
								       TrUserData)
	     end
	   end
    end.

e_msg_DeletePathResponse(_Msg, _TrUserData) -> <<>>.

e_msg_DeletePolicyRequest(Msg, TrUserData) ->
    e_msg_DeletePolicyRequest(Msg, <<>>, TrUserData).


e_msg_DeletePolicyRequest(#{policy := F1,
			    preserve_statements := F2, all := F3},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_DeletePolicyRequest_policy(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= false -> B2;
		true -> e_type_bool(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_DeleteVrfRequest(Msg, TrUserData) ->
    e_msg_DeleteVrfRequest(Msg, <<>>, TrUserData).


e_msg_DeleteVrfRequest(#{vrf := F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_DeleteVrfRequest_vrf(TrF1, <<Bin/binary, 10>>,
						  TrUserData)
	     end
	   end
    end.

e_msg_GetPolicyAssignmentResponse(Msg, TrUserData) ->
    e_msg_GetPolicyAssignmentResponse(Msg, <<>>,
				      TrUserData).


e_msg_GetPolicyAssignmentResponse(#{assignment := F1},
				  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetPolicyAssignmentResponse_assignment(TrF1,
								    <<Bin/binary,
								      10>>,
								    TrUserData)
	     end
	   end
    end.

e_msg_DeleteDefinedSetResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_ReplacePolicyAssignmentResponse(_Msg,
				      _TrUserData) ->
    <<>>.

e_msg_GetServerRequest(_Msg, _TrUserData) -> <<>>.

e_msg_AddBmpRequest(Msg, TrUserData) ->
    e_msg_AddBmpRequest(Msg, <<>>, TrUserData).


e_msg_AddBmpRequest(#{address := F1, port := F2,
		      type := F3},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 'PRE' -> B2;
		true ->
		    'e_enum_AddBmpRequest.MonitoringPolicy'(TrF3,
							    <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_ResetNeighborRequest(Msg, TrUserData) ->
    e_msg_ResetNeighborRequest(Msg, <<>>, TrUserData).


e_msg_ResetNeighborRequest(#{address := F1,
			     communication := F2},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_GetRibInfoRequest(Msg, TrUserData) ->
    e_msg_GetRibInfoRequest(Msg, <<>>, TrUserData).


e_msg_GetRibInfoRequest(#{info := F1}, Bin,
			TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetRibInfoRequest_info(TrF1,
						    <<Bin/binary, 10>>,
						    TrUserData)
	     end
	   end
    end.

e_msg_GetRibRequest(Msg, TrUserData) ->
    e_msg_GetRibRequest(Msg, <<>>, TrUserData).


e_msg_GetRibRequest(#{table := F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetRibRequest_table(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
	     end
	   end
    end.

e_msg_GetStatementRequest(_Msg, _TrUserData) -> <<>>.

e_msg_ReplaceStatementRequest(Msg, TrUserData) ->
    e_msg_ReplaceStatementRequest(Msg, <<>>, TrUserData).


e_msg_ReplaceStatementRequest(#{statement := F1}, Bin,
			      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_ReplaceStatementRequest_statement(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
	     end
	   end
    end.

e_msg_StopServerResponse(_Msg, _TrUserData) -> <<>>.

e_msg_DeleteStatementRequest(Msg, TrUserData) ->
    e_msg_DeleteStatementRequest(Msg, <<>>, TrUserData).


e_msg_DeleteStatementRequest(#{statement := F1,
			       all := F2},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_DeleteStatementRequest_statement(TrF1,
								   <<Bin/binary,
								     10>>,
								   TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_AddRpkiRequest(Msg, TrUserData) ->
    e_msg_AddRpkiRequest(Msg, <<>>, TrUserData).


e_msg_AddRpkiRequest(#{address := F1, port := F2,
		       lifetime := F3},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_type_int64(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_GetRibResponse(Msg, TrUserData) ->
    e_msg_GetRibResponse(Msg, <<>>, TrUserData).


e_msg_GetRibResponse(#{table := F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetRibResponse_table(TrF1, <<Bin/binary, 10>>,
						  TrUserData)
	     end
	   end
    end.

e_msg_DisableMrtRequest(_Msg, _TrUserData) -> <<>>.

e_msg_DisableRpkiRequest(Msg, TrUserData) ->
    e_msg_DisableRpkiRequest(Msg, <<>>, TrUserData).


e_msg_DisableRpkiRequest(#{address := F1}, Bin,
			 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_EnableRpkiResponse(_Msg, _TrUserData) -> <<>>.

e_msg_ReplaceDefinedSetRequest(Msg, TrUserData) ->
    e_msg_ReplaceDefinedSetRequest(Msg, <<>>, TrUserData).


e_msg_ReplaceDefinedSetRequest(#{set := F1}, Bin,
			       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_ReplaceDefinedSetRequest_set(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
	     end
	   end
    end.

e_msg_DisableNeighborRequest(Msg, TrUserData) ->
    e_msg_DisableNeighborRequest(Msg, <<>>, TrUserData).


e_msg_DisableNeighborRequest(#{address := F1,
			       communication := F2},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_DeletePolicyResponse(_Msg, _TrUserData) -> <<>>.

e_msg_SoftResetRpkiResponse(_Msg, _TrUserData) -> <<>>.

e_msg_GetNeighborResponse(Msg, TrUserData) ->
    e_msg_GetNeighborResponse(Msg, <<>>, TrUserData).


e_msg_GetNeighborResponse(#{peers := F1}, Bin,
			  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetNeighborResponse_peers(TrF1, Bin, TrUserData)
      end
    end.

e_msg_ReplacePolicyResponse(_Msg, _TrUserData) -> <<>>.

e_msg_GetRpkiResponse(Msg, TrUserData) ->
    e_msg_GetRpkiResponse(Msg, <<>>, TrUserData).


e_msg_GetRpkiResponse(#{servers := F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetRpkiResponse_servers(TrF1, Bin, TrUserData)
      end
    end.

e_msg_SoftResetNeighborResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_AddDefinedSetResponse(_Msg, _TrUserData) -> <<>>.

e_msg_GetNeighborRequest(Msg, TrUserData) ->
    e_msg_GetNeighborRequest(Msg, <<>>, TrUserData).


e_msg_GetNeighborRequest(#{enableAdvertised := F1,
			   address := F2},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_EnableMrtRequest(Msg, TrUserData) ->
    e_msg_EnableMrtRequest(Msg, <<>>, TrUserData).


e_msg_EnableMrtRequest(#{dump_type := F1,
			 filename := F2, interval := F3},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_ReplacePolicyRequest(Msg, TrUserData) ->
    e_msg_ReplacePolicyRequest(Msg, <<>>, TrUserData).


e_msg_ReplacePolicyRequest(#{policy := F1,
			     refer_existing_statements := F2,
			     preserve_statements := F3},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_ReplacePolicyRequest_policy(TrF1,
							      <<Bin/binary,
								10>>,
							      TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= false -> B2;
		true -> e_type_bool(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_Arguments(Msg, TrUserData) ->
    e_msg_Arguments(Msg, <<>>, TrUserData).


e_msg_Arguments(#{resource := F1, family := F2,
		  name := F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_GetRoaRequest(Msg, TrUserData) ->
    e_msg_GetRoaRequest(Msg, <<>>, TrUserData).


e_msg_GetRoaRequest(#{family := F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_DeleteDefinedSetRequest(Msg, TrUserData) ->
    e_msg_DeleteDefinedSetRequest(Msg, <<>>, TrUserData).


e_msg_DeleteDefinedSetRequest(#{set := F1, all := F2},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_DeleteDefinedSetRequest_set(TrF1,
							      <<Bin/binary,
								10>>,
							      TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_DeleteRpkiResponse(_Msg, _TrUserData) -> <<>>.

e_msg_EnableZebraResponse(_Msg, _TrUserData) -> <<>>.

e_msg_StartServerResponse(_Msg, _TrUserData) -> <<>>.

e_msg_ReplaceDefinedSetResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_GetDefinedSetResponse(Msg, TrUserData) ->
    e_msg_GetDefinedSetResponse(Msg, <<>>, TrUserData).


e_msg_GetDefinedSetResponse(#{sets := F1}, Bin,
			    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetDefinedSetResponse_sets(TrF1, Bin,
						TrUserData)
      end
    end.

e_msg_ShutdownNeighborRequest(Msg, TrUserData) ->
    e_msg_ShutdownNeighborRequest(Msg, <<>>, TrUserData).


e_msg_ShutdownNeighborRequest(#{address := F1,
				communication := F2},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_ValidateRibResponse(_Msg, _TrUserData) -> <<>>.

e_msg_DeletePolicyAssignmentResponse(_Msg,
				     _TrUserData) ->
    <<>>.

e_msg_InjectMrtResponse(_Msg, _TrUserData) -> <<>>.

e_msg_DisableRpkiResponse(_Msg, _TrUserData) -> <<>>.

e_msg_EnableZebraRequest(Msg, TrUserData) ->
    e_msg_EnableZebraRequest(Msg, <<>>, TrUserData).


e_msg_EnableZebraRequest(#{url := F1, route_types := F2,
			   version := F3, nexthop_trigger_enable := F4,
			   nexthop_trigger_delay := F5},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_EnableZebraRequest_route_types(TrF2, B1,
							 TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true -> e_varint(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_AddVrfRequest(Msg, TrUserData) ->
    e_msg_AddVrfRequest(Msg, <<>>, TrUserData).


e_msg_AddVrfRequest(#{vrf := F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_AddVrfRequest_vrf(TrF1, <<Bin/binary, 10>>,
					       TrUserData)
	     end
	   end
    end.

e_msg_DeletePathRequest(Msg, TrUserData) ->
    e_msg_DeletePathRequest(Msg, <<>>, TrUserData).


e_msg_DeletePathRequest(#{resource := F1, vrf_id := F2,
			  family := F3, path := F4, uuid := F5},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_DeletePathRequest_path(TrF4,
							 <<B3/binary, 34>>,
							 TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case iolist_size(TrF5) of
	       0 -> B4;
	       _ -> e_type_bytes(TrF5, <<B4/binary, 42>>)
	     end
	   end
    end.

e_msg_EnableNeighborResponse(_Msg, _TrUserData) -> <<>>.

e_msg_EnableRpkiRequest(Msg, TrUserData) ->
    e_msg_EnableRpkiRequest(Msg, <<>>, TrUserData).


e_msg_EnableRpkiRequest(#{address := F1}, Bin,
			TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_GetPathRequest(Msg, TrUserData) ->
    e_msg_GetPathRequest(Msg, <<>>, TrUserData).


e_msg_GetPathRequest(#{type := F1, name := F2,
		       family := F3, prefixes := F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'GLOBAL' -> Bin;
		     true -> e_enum_Resource(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_GetPathRequest_prefixes(TrF4, B3, TrUserData)
      end
    end.

e_msg_ReplaceStatementResponse(_Msg, _TrUserData) ->
    <<>>.

e_msg_DeleteBmpRequest(Msg, TrUserData) ->
    e_msg_DeleteBmpRequest(Msg, <<>>, TrUserData).


e_msg_DeleteBmpRequest(#{address := F1, port := F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_DeleteBmpResponse(_Msg, _TrUserData) -> <<>>.

e_msg_GetPolicyAssignmentRequest(Msg, TrUserData) ->
    e_msg_GetPolicyAssignmentRequest(Msg, <<>>, TrUserData).


e_msg_GetPolicyAssignmentRequest(#{assignment := F1},
				 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_GetPolicyAssignmentRequest_assignment(TrF1,
								   <<Bin/binary,
								     10>>,
								   TrUserData)
	     end
	   end
    end.

e_msg_DeleteStatementResponse(_Msg, _TrUserData) ->
    <<>>.

e_field_Global_listen_addresses([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_Global_listen_addresses(Rest, Bin3, TrUserData);
e_field_Global_listen_addresses([], Bin, _TrUserData) ->
    Bin.

e_field_Global_families(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_Global_families(Elems, <<>>,
				      TrUserData),
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_Global_families([], Bin, _TrUserData) -> Bin.

e_pfield_Global_families([Value | Rest], Bin,
			 TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin),
    e_pfield_Global_families(Rest, Bin2, TrUserData);
e_pfield_Global_families([], Bin, _TrUserData) -> Bin.

e_mfield_StartServerRequest_global(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_Global(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Roa_conf(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RPKIConf(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRoaResponse_roas(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Roa(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetRoaResponse_roas([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetRoaResponse_roas(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_GetRoaResponse_roas(Rest, Bin3, TrUserData);
e_field_GetRoaResponse_roas([], Bin, _TrUserData) ->
    Bin.

e_mfield_GetRibInfoResponse_info(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_TableInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CommunityAction_communities([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_CommunityAction_communities(Rest, Bin3,
					TrUserData);
e_field_CommunityAction_communities([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_Actions_community(Msg, Bin, TrUserData) ->
    SubBin = e_msg_CommunityAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Actions_med(Msg, Bin, TrUserData) ->
    SubBin = e_msg_MedAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Actions_as_prepend(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AsPrependAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Actions_ext_community(Msg, Bin, TrUserData) ->
    SubBin = e_msg_CommunityAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Actions_nexthop(Msg, Bin, TrUserData) ->
    SubBin = e_msg_NexthopAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Actions_local_pref(Msg, Bin, TrUserData) ->
    SubBin = e_msg_LocalPrefAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Actions_large_community(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_CommunityAction(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_prefix_set(Msg, Bin, TrUserData) ->
    SubBin = e_msg_MatchSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_neighbor_set(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_MatchSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_as_path_length(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_AsPathLength(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_as_path_set(Msg, Bin, TrUserData) ->
    SubBin = e_msg_MatchSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_community_set(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_MatchSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_ext_community_set(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_MatchSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Conditions_large_community_set(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_MatchSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Statement_conditions(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Conditions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Statement_actions(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Actions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetStatementResponse_statements(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_Statement(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetStatementResponse_statements([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetStatementResponse_statements(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_GetStatementResponse_statements(Rest, Bin3,
					    TrUserData);
e_field_GetStatementResponse_statements([], Bin,
					_TrUserData) ->
    Bin.

e_field_PeerConf_remote_cap([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_PeerConf_remote_cap(Rest, Bin3, TrUserData);
e_field_PeerConf_remote_cap([], Bin, _TrUserData) ->
    Bin.

e_field_PeerConf_local_cap([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 98>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_PeerConf_local_cap(Rest, Bin3, TrUserData);
e_field_PeerConf_local_cap([], Bin, _TrUserData) -> Bin.

e_mfield_PeerConf_prefix_limits(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PrefixLimit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PeerConf_prefix_limits([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 114>>,
    Bin3 = e_mfield_PeerConf_prefix_limits(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_PeerConf_prefix_limits(Rest, Bin3, TrUserData);
e_field_PeerConf_prefix_limits([], Bin, _TrUserData) ->
    Bin.

e_mfield_Policy_statements(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Statement(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Policy_statements([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Policy_statements(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_Policy_statements(Rest, Bin3, TrUserData);
e_field_Policy_statements([], Bin, _TrUserData) -> Bin.

e_mfield_PolicyAssignment_policies(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_Policy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PolicyAssignment_policies([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_PolicyAssignment_policies(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_PolicyAssignment_policies(Rest, Bin3,
				      TrUserData);
e_field_PolicyAssignment_policies([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_AddPolicyAssignmentRequest_assignment(Msg, Bin,
					       TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetPolicyResponse_policies(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_Policy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetPolicyResponse_policies([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetPolicyResponse_policies(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_GetPolicyResponse_policies(Rest, Bin3,
				       TrUserData);
e_field_GetPolicyResponse_policies([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_ApplyPolicy_in_policy(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ApplyPolicy_export_policy(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ApplyPolicy_import_policy(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddStatementRequest_statement(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_Statement(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Ibgp_config(Msg, Bin, TrUserData) ->
    SubBin = e_msg_IbgpConfig(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Ibgp_state(Msg, Bin, TrUserData) ->
    SubBin = e_msg_IbgpState(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Ebgp_config(Msg, Bin, TrUserData) ->
    SubBin = e_msg_EbgpConfig(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Ebgp_state(Msg, Bin, TrUserData) ->
    SubBin = e_msg_EbgpState(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UseMultiplePaths_config(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_UseMultiplePathsConfig(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UseMultiplePaths_state(Msg, Bin, TrUserData) ->
    SubBin = e_msg_UseMultiplePathsState(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UseMultiplePaths_ebgp(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Ebgp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UseMultiplePaths_ibgp(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Ibgp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LongLivedGracefulRestart_config(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_LongLivedGracefulRestartConfig(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LongLivedGracefulRestart_state(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_LongLivedGracefulRestartState(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddPaths_config(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AddPathsConfig(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddPaths_state(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AddPathsState(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RouteTargetMembership_config(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_RouteTargetMembershipConfig(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RouteTargetMembership_state(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_RouteTargetMembershipState(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RouteSelectionOptions_config(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_RouteSelectionOptionsConfig(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RouteSelectionOptions_state(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_RouteSelectionOptionsState(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MpGracefulRestart_config(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_MpGracefulRestartConfig(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MpGracefulRestart_state(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_MpGracefulRestartState(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_mp_graceful_restart(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_MpGracefulRestart(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_config(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AfiSafiConfig(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_apply_policy(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ApplyPolicy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_route_selection_options(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_RouteSelectionOptions(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_use_multiple_paths(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_UseMultiplePaths(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_prefix_limits(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PrefixLimit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_route_target_membership(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_RouteTargetMembership(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_long_lived_graceful_restart(Msg, Bin,
					     TrUserData) ->
    SubBin = e_msg_LongLivedGracefulRestart(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AfiSafi_add_paths(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AddPaths(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Timers_config(Msg, Bin, TrUserData) ->
    SubBin = e_msg_TimersConfig(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Timers_state(Msg, Bin, TrUserData) ->
    SubBin = e_msg_TimersState(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Messages_received(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Messages_sent(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_PeerState_messages(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Messages(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_PeerState_queues(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Queues(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PeerState_supported_capabilities([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 114>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_PeerState_supported_capabilities(Rest, Bin3,
					     TrUserData);
e_field_PeerState_supported_capabilities([], Bin,
					 _TrUserData) ->
    Bin.

e_field_Peer_families(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_Peer_families(Elems, <<>>,
				    TrUserData),
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_Peer_families([], Bin, _TrUserData) -> Bin.

e_pfield_Peer_families([Value | Rest], Bin,
		       TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin),
    e_pfield_Peer_families(Rest, Bin2, TrUserData);
e_pfield_Peer_families([], Bin, _TrUserData) -> Bin.

e_mfield_Peer_apply_policy(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ApplyPolicy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_conf(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PeerConf(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_ebgp_multihop(Msg, Bin, TrUserData) ->
    SubBin = e_msg_EbgpMultihop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_route_reflector(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RouteReflector(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PeerState(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_timers(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Timers(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_transport(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Transport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_route_server(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RouteServer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_graceful_restart(Msg, Bin, TrUserData) ->
    SubBin = e_msg_GracefulRestart(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Peer_afi_safis(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AfiSafi(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Peer_afi_safis([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_Peer_afi_safis(id(Elem, TrUserData),
				   Bin2, TrUserData),
    e_field_Peer_afi_safis(Rest, Bin3, TrUserData);
e_field_Peer_afi_safis([], Bin, _TrUserData) -> Bin.

e_mfield_Peer_add_paths(Msg, Bin, TrUserData) ->
    SubBin = e_msg_AddPaths(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddNeighborRequest_peer(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_Peer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeletePolicyAssignmentRequest_assignment(Msg,
						  Bin, TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RPKIValidation_matched(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Roa(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RPKIValidation_matched([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_RPKIValidation_matched(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_RPKIValidation_matched(Rest, Bin3, TrUserData);
e_field_RPKIValidation_matched([], Bin, _TrUserData) ->
    Bin.

e_mfield_RPKIValidation_unmatched_as(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_Roa(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RPKIValidation_unmatched_as([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_RPKIValidation_unmatched_as(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_RPKIValidation_unmatched_as(Rest, Bin3,
					TrUserData);
e_field_RPKIValidation_unmatched_as([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_RPKIValidation_unmatched_length(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_Roa(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RPKIValidation_unmatched_length([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_RPKIValidation_unmatched_length(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_RPKIValidation_unmatched_length(Rest, Bin3,
					    TrUserData);
e_field_RPKIValidation_unmatched_length([], Bin,
					_TrUserData) ->
    Bin.

e_field_Path_pattrs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_Path_pattrs(Rest, Bin3, TrUserData);
e_field_Path_pattrs([], Bin, _TrUserData) -> Bin.

e_mfield_Path_validation_detail(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RPKIValidation(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Destination_paths(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Path(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Destination_paths([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Destination_paths(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_Destination_paths(Rest, Bin3, TrUserData);
e_field_Destination_paths([], Bin, _TrUserData) -> Bin.

e_mfield_Table_destinations(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Destination(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Table_destinations([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Table_destinations(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_Table_destinations(Rest, Bin3, TrUserData);
e_field_Table_destinations([], Bin, _TrUserData) -> Bin.

e_mfield_MonitorRibRequest_table(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_Table(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddPolicyRequest_policy(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_Policy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Rpki_conf(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RPKIConf(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Rpki_state(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RPKIState(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddPathRequest_path(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Path(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Vrf_import_rt([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_Vrf_import_rt(Rest, Bin3, TrUserData);
e_field_Vrf_import_rt([], Bin, _TrUserData) -> Bin.

e_field_Vrf_export_rt([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_Vrf_export_rt(Rest, Bin3, TrUserData);
e_field_Vrf_export_rt([], Bin, _TrUserData) -> Bin.

e_mfield_GetVrfResponse_vrfs(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Vrf(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetVrfResponse_vrfs([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetVrfResponse_vrfs(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_GetVrfResponse_vrfs(Rest, Bin3, TrUserData);
e_field_GetVrfResponse_vrfs([], Bin, _TrUserData) ->
    Bin.

e_mfield_DeleteNeighborRequest_peer(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_Peer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetServerResponse_global(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_Global(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_InjectMrtRequest_paths(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Path(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_InjectMrtRequest_paths([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_InjectMrtRequest_paths(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_InjectMrtRequest_paths(Rest, Bin3, TrUserData);
e_field_InjectMrtRequest_paths([], Bin, _TrUserData) ->
    Bin.

e_field_DefinedSet_list([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_DefinedSet_list(Rest, Bin3, TrUserData);
e_field_DefinedSet_list([], Bin, _TrUserData) -> Bin.

e_mfield_DefinedSet_prefixes(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Prefix(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DefinedSet_prefixes([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_DefinedSet_prefixes(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_DefinedSet_prefixes(Rest, Bin3, TrUserData);
e_field_DefinedSet_prefixes([], Bin, _TrUserData) ->
    Bin.

e_mfield_AddDefinedSetRequest_set(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_DefinedSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ReplacePolicyAssignmentRequest_assignment(Msg,
						   Bin, TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeletePolicyRequest_policy(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_Policy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteVrfRequest_vrf(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Vrf(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetPolicyAssignmentResponse_assignment(Msg,
						Bin, TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRibInfoRequest_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_TableInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRibRequest_table(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Table(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ReplaceStatementRequest_statement(Msg, Bin,
					   TrUserData) ->
    SubBin = e_msg_Statement(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteStatementRequest_statement(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_Statement(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRibResponse_table(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Table(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ReplaceDefinedSetRequest_set(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_DefinedSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetNeighborResponse_peers(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_Peer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetNeighborResponse_peers([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetNeighborResponse_peers(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_GetNeighborResponse_peers(Rest, Bin3,
				      TrUserData);
e_field_GetNeighborResponse_peers([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_GetRpkiResponse_servers(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_Rpki(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetRpkiResponse_servers([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetRpkiResponse_servers(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_GetRpkiResponse_servers(Rest, Bin3, TrUserData);
e_field_GetRpkiResponse_servers([], Bin, _TrUserData) ->
    Bin.

e_mfield_ReplacePolicyRequest_policy(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_Policy(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteDefinedSetRequest_set(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_DefinedSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetDefinedSetResponse_sets(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_DefinedSet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetDefinedSetResponse_sets([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetDefinedSetResponse_sets(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_GetDefinedSetResponse_sets(Rest, Bin3,
				       TrUserData);
e_field_GetDefinedSetResponse_sets([], Bin,
				   _TrUserData) ->
    Bin.

e_field_EnableZebraRequest_route_types([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_EnableZebraRequest_route_types(Rest, Bin3,
					   TrUserData);
e_field_EnableZebraRequest_route_types([], Bin,
				       _TrUserData) ->
    Bin.

e_mfield_AddVrfRequest_vrf(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Vrf(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeletePathRequest_path(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Path(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetPathRequest_prefixes(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_TableLookupPrefix(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetPathRequest_prefixes([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_GetPathRequest_prefixes(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_GetPathRequest_prefixes(Rest, Bin3, TrUserData);
e_field_GetPathRequest_prefixes([], Bin, _TrUserData) ->
    Bin.

e_mfield_GetPolicyAssignmentRequest_assignment(Msg, Bin,
					       TrUserData) ->
    SubBin = e_msg_PolicyAssignment(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_SoftResetNeighborRequest.SoftResetDirection'('IN',
						     Bin) ->
    <<Bin/binary, 0>>;
'e_enum_SoftResetNeighborRequest.SoftResetDirection'('OUT',
						     Bin) ->
    <<Bin/binary, 1>>;
'e_enum_SoftResetNeighborRequest.SoftResetDirection'('BOTH',
						     Bin) ->
    <<Bin/binary, 2>>;
'e_enum_SoftResetNeighborRequest.SoftResetDirection'(V,
						     Bin) ->
    e_varint(V, Bin).

'e_enum_AddBmpRequest.MonitoringPolicy'('PRE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_AddBmpRequest.MonitoringPolicy'('POST', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_AddBmpRequest.MonitoringPolicy'('BOTH', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_AddBmpRequest.MonitoringPolicy'('LOCAL', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_AddBmpRequest.MonitoringPolicy'('ALL', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_AddBmpRequest.MonitoringPolicy'(V, Bin) ->
    e_varint(V, Bin).

e_enum_Resource('GLOBAL', Bin) -> <<Bin/binary, 0>>;
e_enum_Resource('LOCAL', Bin) -> <<Bin/binary, 1>>;
e_enum_Resource('ADJ_IN', Bin) -> <<Bin/binary, 2>>;
e_enum_Resource('ADJ_OUT', Bin) -> <<Bin/binary, 3>>;
e_enum_Resource('VRF', Bin) -> <<Bin/binary, 4>>;
e_enum_Resource(V, Bin) -> e_varint(V, Bin).

'e_enum_RPKIValidation.State'('STATE_NONE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_RPKIValidation.State'('STATE_NOT_FOUND', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_RPKIValidation.State'('STATE_VALID', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_RPKIValidation.State'('STATE_INVALID', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_RPKIValidation.State'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_RPKIValidation.Reason'('REASOT_NONE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_RPKIValidation.Reason'('REASON_AS', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_RPKIValidation.Reason'('REASON_LENGTH', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_RPKIValidation.Reason'(V, Bin) ->
    e_varint(V, Bin).

e_enum_TableLookupOption('LOOKUP_EXACT', Bin) ->
    <<Bin/binary, 0>>;
e_enum_TableLookupOption('LOOKUP_LONGER', Bin) ->
    <<Bin/binary, 1>>;
e_enum_TableLookupOption('LOOKUP_SHORTER', Bin) ->
    <<Bin/binary, 2>>;
e_enum_TableLookupOption(V, Bin) -> e_varint(V, Bin).

'e_enum_PeerConf.RemovePrivateAs'('NONE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_PeerConf.RemovePrivateAs'('ALL', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_PeerConf.RemovePrivateAs'('REPLACE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_PeerConf.RemovePrivateAs'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_PeerState.AdminState'('UP', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_PeerState.AdminState'('DOWN', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_PeerState.AdminState'('PFX_CT', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_PeerState.AdminState'(V, Bin) ->
    e_varint(V, Bin).

e_enum_DefinedType('PREFIX', Bin) -> <<Bin/binary, 0>>;
e_enum_DefinedType('NEIGHBOR', Bin) ->
    <<Bin/binary, 1>>;
e_enum_DefinedType('TAG', Bin) -> <<Bin/binary, 2>>;
e_enum_DefinedType('AS_PATH', Bin) -> <<Bin/binary, 3>>;
e_enum_DefinedType('COMMUNITY', Bin) ->
    <<Bin/binary, 4>>;
e_enum_DefinedType('EXT_COMMUNITY', Bin) ->
    <<Bin/binary, 5>>;
e_enum_DefinedType('LARGE_COMMUNITY', Bin) ->
    <<Bin/binary, 6>>;
e_enum_DefinedType(V, Bin) -> e_varint(V, Bin).

e_enum_MatchType('ANY', Bin) -> <<Bin/binary, 0>>;
e_enum_MatchType('ALL', Bin) -> <<Bin/binary, 1>>;
e_enum_MatchType('INVERT', Bin) -> <<Bin/binary, 2>>;
e_enum_MatchType(V, Bin) -> e_varint(V, Bin).

e_enum_AsPathLengthType('EQ', Bin) -> <<Bin/binary, 0>>;
e_enum_AsPathLengthType('GE', Bin) -> <<Bin/binary, 1>>;
e_enum_AsPathLengthType('LE', Bin) -> <<Bin/binary, 2>>;
e_enum_AsPathLengthType(V, Bin) -> e_varint(V, Bin).

'e_enum_Conditions.RouteType'('ROUTE_TYPE_NONE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_Conditions.RouteType'('ROUTE_TYPE_INTERNAL',
			      Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Conditions.RouteType'('ROUTE_TYPE_EXTERNAL',
			      Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Conditions.RouteType'('ROUTE_TYPE_LOCAL',
			      Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Conditions.RouteType'(V, Bin) ->
    e_varint(V, Bin).

e_enum_RouteAction('NONE', Bin) -> <<Bin/binary, 0>>;
e_enum_RouteAction('ACCEPT', Bin) -> <<Bin/binary, 1>>;
e_enum_RouteAction('REJECT', Bin) -> <<Bin/binary, 2>>;
e_enum_RouteAction(V, Bin) -> e_varint(V, Bin).

e_enum_CommunityActionType('COMMUNITY_ADD', Bin) ->
    <<Bin/binary, 0>>;
e_enum_CommunityActionType('COMMUNITY_REMOVE', Bin) ->
    <<Bin/binary, 1>>;
e_enum_CommunityActionType('COMMUNITY_REPLACE', Bin) ->
    <<Bin/binary, 2>>;
e_enum_CommunityActionType(V, Bin) -> e_varint(V, Bin).

e_enum_MedActionType('MED_MOD', Bin) ->
    <<Bin/binary, 0>>;
e_enum_MedActionType('MED_REPLACE', Bin) ->
    <<Bin/binary, 1>>;
e_enum_MedActionType(V, Bin) -> e_varint(V, Bin).

e_enum_PolicyType('IN', Bin) -> <<Bin/binary, 0>>;
e_enum_PolicyType('IMPORT', Bin) -> <<Bin/binary, 1>>;
e_enum_PolicyType('EXPORT', Bin) -> <<Bin/binary, 2>>;
e_enum_PolicyType(V, Bin) -> e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MedAction' -> d_msg_MedAction(Bin, TrUserData);
      'DisableNeighborResponse' ->
	  d_msg_DisableNeighborResponse(Bin, TrUserData);
      'DeleteNeighborResponse' ->
	  d_msg_DeleteNeighborResponse(Bin, TrUserData);
      'Global' -> d_msg_Global(Bin, TrUserData);
      'StartServerRequest' ->
	  d_msg_StartServerRequest(Bin, TrUserData);
      'DeleteRpkiRequest' ->
	  d_msg_DeleteRpkiRequest(Bin, TrUserData);
      'GetPolicyRequest' ->
	  d_msg_GetPolicyRequest(Bin, TrUserData);
      'RPKIConf' -> d_msg_RPKIConf(Bin, TrUserData);
      'Roa' -> d_msg_Roa(Bin, TrUserData);
      'GetRoaResponse' ->
	  d_msg_GetRoaResponse(Bin, TrUserData);
      'GetDefinedSetRequest' ->
	  d_msg_GetDefinedSetRequest(Bin, TrUserData);
      'DeleteVrfResponse' ->
	  d_msg_DeleteVrfResponse(Bin, TrUserData);
      'TableLookupPrefix' ->
	  d_msg_TableLookupPrefix(Bin, TrUserData);
      'AfiSafiConfig' -> d_msg_AfiSafiConfig(Bin, TrUserData);
      'DisableMrtResponse' ->
	  d_msg_DisableMrtResponse(Bin, TrUserData);
      'AddStatementResponse' ->
	  d_msg_AddStatementResponse(Bin, TrUserData);
      'TableInfo' -> d_msg_TableInfo(Bin, TrUserData);
      'GetRibInfoResponse' ->
	  d_msg_GetRibInfoResponse(Bin, TrUserData);
      'CommunityAction' ->
	  d_msg_CommunityAction(Bin, TrUserData);
      'LocalPrefAction' ->
	  d_msg_LocalPrefAction(Bin, TrUserData);
      'NexthopAction' -> d_msg_NexthopAction(Bin, TrUserData);
      'AsPrependAction' ->
	  d_msg_AsPrependAction(Bin, TrUserData);
      'Actions' -> d_msg_Actions(Bin, TrUserData);
      'MatchSet' -> d_msg_MatchSet(Bin, TrUserData);
      'AsPathLength' -> d_msg_AsPathLength(Bin, TrUserData);
      'Conditions' -> d_msg_Conditions(Bin, TrUserData);
      'Statement' -> d_msg_Statement(Bin, TrUserData);
      'GetStatementResponse' ->
	  d_msg_GetStatementResponse(Bin, TrUserData);
      'UseMultiplePathsConfig' ->
	  d_msg_UseMultiplePathsConfig(Bin, TrUserData);
      'AddVrfResponse' ->
	  d_msg_AddVrfResponse(Bin, TrUserData);
      'PrefixLimit' -> d_msg_PrefixLimit(Bin, TrUserData);
      'PeerConf' -> d_msg_PeerConf(Bin, TrUserData);
      'Policy' -> d_msg_Policy(Bin, TrUserData);
      'PolicyAssignment' ->
	  d_msg_PolicyAssignment(Bin, TrUserData);
      'AddPolicyAssignmentRequest' ->
	  d_msg_AddPolicyAssignmentRequest(Bin, TrUserData);
      'GetPolicyResponse' ->
	  d_msg_GetPolicyResponse(Bin, TrUserData);
      'RouteSelectionOptionsConfig' ->
	  d_msg_RouteSelectionOptionsConfig(Bin, TrUserData);
      'ApplyPolicy' -> d_msg_ApplyPolicy(Bin, TrUserData);
      'AddPolicyAssignmentResponse' ->
	  d_msg_AddPolicyAssignmentResponse(Bin, TrUserData);
      'Transport' -> d_msg_Transport(Bin, TrUserData);
      'AddNeighborResponse' ->
	  d_msg_AddNeighborResponse(Bin, TrUserData);
      'GetVrfRequest' -> d_msg_GetVrfRequest(Bin, TrUserData);
      'AddStatementRequest' ->
	  d_msg_AddStatementRequest(Bin, TrUserData);
      'IbgpState' -> d_msg_IbgpState(Bin, TrUserData);
      'IbgpConfig' -> d_msg_IbgpConfig(Bin, TrUserData);
      'Ibgp' -> d_msg_Ibgp(Bin, TrUserData);
      'EbgpState' -> d_msg_EbgpState(Bin, TrUserData);
      'EbgpConfig' -> d_msg_EbgpConfig(Bin, TrUserData);
      'Ebgp' -> d_msg_Ebgp(Bin, TrUserData);
      'UseMultiplePathsState' ->
	  d_msg_UseMultiplePathsState(Bin, TrUserData);
      'UseMultiplePaths' ->
	  d_msg_UseMultiplePaths(Bin, TrUserData);
      'LongLivedGracefulRestartState' ->
	  d_msg_LongLivedGracefulRestartState(Bin, TrUserData);
      'LongLivedGracefulRestartConfig' ->
	  d_msg_LongLivedGracefulRestartConfig(Bin, TrUserData);
      'LongLivedGracefulRestart' ->
	  d_msg_LongLivedGracefulRestart(Bin, TrUserData);
      'ResetNeighborResponse' ->
	  d_msg_ResetNeighborResponse(Bin, TrUserData);
      'AddPathsState' -> d_msg_AddPathsState(Bin, TrUserData);
      'AddPathsConfig' ->
	  d_msg_AddPathsConfig(Bin, TrUserData);
      'AddPaths' -> d_msg_AddPaths(Bin, TrUserData);
      'RouteTargetMembershipState' ->
	  d_msg_RouteTargetMembershipState(Bin, TrUserData);
      'RouteTargetMembershipConfig' ->
	  d_msg_RouteTargetMembershipConfig(Bin, TrUserData);
      'RouteTargetMembership' ->
	  d_msg_RouteTargetMembership(Bin, TrUserData);
      'RouteSelectionOptionsState' ->
	  d_msg_RouteSelectionOptionsState(Bin, TrUserData);
      'RouteSelectionOptions' ->
	  d_msg_RouteSelectionOptions(Bin, TrUserData);
      'MpGracefulRestartState' ->
	  d_msg_MpGracefulRestartState(Bin, TrUserData);
      'MpGracefulRestartConfig' ->
	  d_msg_MpGracefulRestartConfig(Bin, TrUserData);
      'MpGracefulRestart' ->
	  d_msg_MpGracefulRestart(Bin, TrUserData);
      'AfiSafi' -> d_msg_AfiSafi(Bin, TrUserData);
      'GracefulRestart' ->
	  d_msg_GracefulRestart(Bin, TrUserData);
      'RouteServer' -> d_msg_RouteServer(Bin, TrUserData);
      'TimersState' -> d_msg_TimersState(Bin, TrUserData);
      'TimersConfig' -> d_msg_TimersConfig(Bin, TrUserData);
      'Timers' -> d_msg_Timers(Bin, TrUserData);
      'Queues' -> d_msg_Queues(Bin, TrUserData);
      'Message' -> d_msg_Message(Bin, TrUserData);
      'Messages' -> d_msg_Messages(Bin, TrUserData);
      'PeerState' -> d_msg_PeerState(Bin, TrUserData);
      'RouteReflector' ->
	  d_msg_RouteReflector(Bin, TrUserData);
      'EbgpMultihop' -> d_msg_EbgpMultihop(Bin, TrUserData);
      'Peer' -> d_msg_Peer(Bin, TrUserData);
      'AddNeighborRequest' ->
	  d_msg_AddNeighborRequest(Bin, TrUserData);
      'ValidateRibRequest' ->
	  d_msg_ValidateRibRequest(Bin, TrUserData);
      'DeletePolicyAssignmentRequest' ->
	  d_msg_DeletePolicyAssignmentRequest(Bin, TrUserData);
      'RPKIValidation' ->
	  d_msg_RPKIValidation(Bin, TrUserData);
      'Path' -> d_msg_Path(Bin, TrUserData);
      'Destination' -> d_msg_Destination(Bin, TrUserData);
      'Table' -> d_msg_Table(Bin, TrUserData);
      'MonitorRibRequest' ->
	  d_msg_MonitorRibRequest(Bin, TrUserData);
      'ShutdownNeighborResponse' ->
	  d_msg_ShutdownNeighborResponse(Bin, TrUserData);
      'AddRpkiResponse' ->
	  d_msg_AddRpkiResponse(Bin, TrUserData);
      'AddPolicyRequest' ->
	  d_msg_AddPolicyRequest(Bin, TrUserData);
      'RPKIState' -> d_msg_RPKIState(Bin, TrUserData);
      'Rpki' -> d_msg_Rpki(Bin, TrUserData);
      'AddPathRequest' ->
	  d_msg_AddPathRequest(Bin, TrUserData);
      'ResetRpkiResponse' ->
	  d_msg_ResetRpkiResponse(Bin, TrUserData);
      'ResetRpkiRequest' ->
	  d_msg_ResetRpkiRequest(Bin, TrUserData);
      'SoftResetNeighborRequest' ->
	  d_msg_SoftResetNeighborRequest(Bin, TrUserData);
      'AddPolicyResponse' ->
	  d_msg_AddPolicyResponse(Bin, TrUserData);
      'EnableNeighborRequest' ->
	  d_msg_EnableNeighborRequest(Bin, TrUserData);
      'AddPathResponse' ->
	  d_msg_AddPathResponse(Bin, TrUserData);
      'Vrf' -> d_msg_Vrf(Bin, TrUserData);
      'GetVrfResponse' ->
	  d_msg_GetVrfResponse(Bin, TrUserData);
      'SoftResetRpkiRequest' ->
	  d_msg_SoftResetRpkiRequest(Bin, TrUserData);
      'StopServerRequest' ->
	  d_msg_StopServerRequest(Bin, TrUserData);
      'AddBmpResponse' ->
	  d_msg_AddBmpResponse(Bin, TrUserData);
      'GetRpkiRequest' ->
	  d_msg_GetRpkiRequest(Bin, TrUserData);
      'DeleteNeighborRequest' ->
	  d_msg_DeleteNeighborRequest(Bin, TrUserData);
      'AfiSafiState' -> d_msg_AfiSafiState(Bin, TrUserData);
      'GetServerResponse' ->
	  d_msg_GetServerResponse(Bin, TrUserData);
      'EnableMrtResponse' ->
	  d_msg_EnableMrtResponse(Bin, TrUserData);
      'InjectMrtRequest' ->
	  d_msg_InjectMrtRequest(Bin, TrUserData);
      'Prefix' -> d_msg_Prefix(Bin, TrUserData);
      'DefinedSet' -> d_msg_DefinedSet(Bin, TrUserData);
      'AddDefinedSetRequest' ->
	  d_msg_AddDefinedSetRequest(Bin, TrUserData);
      'ReplacePolicyAssignmentRequest' ->
	  d_msg_ReplacePolicyAssignmentRequest(Bin, TrUserData);
      'DeletePathResponse' ->
	  d_msg_DeletePathResponse(Bin, TrUserData);
      'DeletePolicyRequest' ->
	  d_msg_DeletePolicyRequest(Bin, TrUserData);
      'DeleteVrfRequest' ->
	  d_msg_DeleteVrfRequest(Bin, TrUserData);
      'GetPolicyAssignmentResponse' ->
	  d_msg_GetPolicyAssignmentResponse(Bin, TrUserData);
      'DeleteDefinedSetResponse' ->
	  d_msg_DeleteDefinedSetResponse(Bin, TrUserData);
      'ReplacePolicyAssignmentResponse' ->
	  d_msg_ReplacePolicyAssignmentResponse(Bin, TrUserData);
      'GetServerRequest' ->
	  d_msg_GetServerRequest(Bin, TrUserData);
      'AddBmpRequest' -> d_msg_AddBmpRequest(Bin, TrUserData);
      'ResetNeighborRequest' ->
	  d_msg_ResetNeighborRequest(Bin, TrUserData);
      'GetRibInfoRequest' ->
	  d_msg_GetRibInfoRequest(Bin, TrUserData);
      'GetRibRequest' -> d_msg_GetRibRequest(Bin, TrUserData);
      'GetStatementRequest' ->
	  d_msg_GetStatementRequest(Bin, TrUserData);
      'ReplaceStatementRequest' ->
	  d_msg_ReplaceStatementRequest(Bin, TrUserData);
      'StopServerResponse' ->
	  d_msg_StopServerResponse(Bin, TrUserData);
      'DeleteStatementRequest' ->
	  d_msg_DeleteStatementRequest(Bin, TrUserData);
      'AddRpkiRequest' ->
	  d_msg_AddRpkiRequest(Bin, TrUserData);
      'GetRibResponse' ->
	  d_msg_GetRibResponse(Bin, TrUserData);
      'DisableMrtRequest' ->
	  d_msg_DisableMrtRequest(Bin, TrUserData);
      'DisableRpkiRequest' ->
	  d_msg_DisableRpkiRequest(Bin, TrUserData);
      'EnableRpkiResponse' ->
	  d_msg_EnableRpkiResponse(Bin, TrUserData);
      'ReplaceDefinedSetRequest' ->
	  d_msg_ReplaceDefinedSetRequest(Bin, TrUserData);
      'DisableNeighborRequest' ->
	  d_msg_DisableNeighborRequest(Bin, TrUserData);
      'DeletePolicyResponse' ->
	  d_msg_DeletePolicyResponse(Bin, TrUserData);
      'SoftResetRpkiResponse' ->
	  d_msg_SoftResetRpkiResponse(Bin, TrUserData);
      'GetNeighborResponse' ->
	  d_msg_GetNeighborResponse(Bin, TrUserData);
      'ReplacePolicyResponse' ->
	  d_msg_ReplacePolicyResponse(Bin, TrUserData);
      'GetRpkiResponse' ->
	  d_msg_GetRpkiResponse(Bin, TrUserData);
      'SoftResetNeighborResponse' ->
	  d_msg_SoftResetNeighborResponse(Bin, TrUserData);
      'AddDefinedSetResponse' ->
	  d_msg_AddDefinedSetResponse(Bin, TrUserData);
      'GetNeighborRequest' ->
	  d_msg_GetNeighborRequest(Bin, TrUserData);
      'EnableMrtRequest' ->
	  d_msg_EnableMrtRequest(Bin, TrUserData);
      'ReplacePolicyRequest' ->
	  d_msg_ReplacePolicyRequest(Bin, TrUserData);
      'Arguments' -> d_msg_Arguments(Bin, TrUserData);
      'GetRoaRequest' -> d_msg_GetRoaRequest(Bin, TrUserData);
      'DeleteDefinedSetRequest' ->
	  d_msg_DeleteDefinedSetRequest(Bin, TrUserData);
      'DeleteRpkiResponse' ->
	  d_msg_DeleteRpkiResponse(Bin, TrUserData);
      'EnableZebraResponse' ->
	  d_msg_EnableZebraResponse(Bin, TrUserData);
      'StartServerResponse' ->
	  d_msg_StartServerResponse(Bin, TrUserData);
      'ReplaceDefinedSetResponse' ->
	  d_msg_ReplaceDefinedSetResponse(Bin, TrUserData);
      'GetDefinedSetResponse' ->
	  d_msg_GetDefinedSetResponse(Bin, TrUserData);
      'ShutdownNeighborRequest' ->
	  d_msg_ShutdownNeighborRequest(Bin, TrUserData);
      'ValidateRibResponse' ->
	  d_msg_ValidateRibResponse(Bin, TrUserData);
      'DeletePolicyAssignmentResponse' ->
	  d_msg_DeletePolicyAssignmentResponse(Bin, TrUserData);
      'InjectMrtResponse' ->
	  d_msg_InjectMrtResponse(Bin, TrUserData);
      'DisableRpkiResponse' ->
	  d_msg_DisableRpkiResponse(Bin, TrUserData);
      'EnableZebraRequest' ->
	  d_msg_EnableZebraRequest(Bin, TrUserData);
      'AddVrfRequest' -> d_msg_AddVrfRequest(Bin, TrUserData);
      'DeletePathRequest' ->
	  d_msg_DeletePathRequest(Bin, TrUserData);
      'EnableNeighborResponse' ->
	  d_msg_EnableNeighborResponse(Bin, TrUserData);
      'EnableRpkiRequest' ->
	  d_msg_EnableRpkiRequest(Bin, TrUserData);
      'GetPathRequest' ->
	  d_msg_GetPathRequest(Bin, TrUserData);
      'ReplaceStatementResponse' ->
	  d_msg_ReplaceStatementResponse(Bin, TrUserData);
      'DeleteBmpRequest' ->
	  d_msg_DeleteBmpRequest(Bin, TrUserData);
      'DeleteBmpResponse' ->
	  d_msg_DeleteBmpResponse(Bin, TrUserData);
      'GetPolicyAssignmentRequest' ->
	  d_msg_GetPolicyAssignmentRequest(Bin, TrUserData);
      'DeleteStatementResponse' ->
	  d_msg_DeleteStatementResponse(Bin, TrUserData)
    end.



d_msg_MedAction(Bin, TrUserData) ->
    dfp_read_field_def_MedAction(Bin, 0, 0,
				 id('MED_MOD', TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_MedAction(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, TrUserData) ->
    d_field_MedAction_type(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_MedAction(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_MedAction_value(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_MedAction(<<>>, 0, 0, F1, F2, _) ->
    #{type => F1, value => F2};
dfp_read_field_def_MedAction(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_MedAction(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_MedAction(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MedAction(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_MedAction(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MedAction_type(Rest, 0, 0, F1, F2, TrUserData);
      16 ->
	  d_field_MedAction_value(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MedAction(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_MedAction(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_MedAction(Rest, 0, 0, F1, F2,
						TrUserData);
	    3 ->
		skip_group_MedAction(Rest, Key bsr 3, 0, F1, F2,
				     TrUserData);
	    5 -> skip_32_MedAction(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_MedAction(<<>>, 0, 0, F1, F2, _) ->
    #{type => F1, value => F2}.

d_field_MedAction_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MedAction_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_MedAction_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_MedActionType(Tmp),
    dfp_read_field_def_MedAction(Rest, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_MedAction_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MedAction_value(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_MedAction_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_MedAction(Rest, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_MedAction(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_MedAction(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_MedAction(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_MedAction(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_MedAction(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MedAction(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_MedAction(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MedAction(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_group_MedAction(Bin, FNum, Z2, F1, F2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MedAction(Rest, 0, Z2, F1, F2,
				 TrUserData).


skip_32_MedAction(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_MedAction(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_MedAction(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_MedAction(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_DisableNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_DisableNeighborResponse(Bin, 0, 0,
					       TrUserData).

dfp_read_field_def_DisableNeighborResponse(<<>>, 0, 0,
					   _) ->
    #{};
dfp_read_field_def_DisableNeighborResponse(Other, Z1,
					   Z2, TrUserData) ->
    dg_read_field_def_DisableNeighborResponse(Other, Z1, Z2,
					      TrUserData).

dg_read_field_def_DisableNeighborResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisableNeighborResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
dg_read_field_def_DisableNeighborResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DisableNeighborResponse(Rest, 0, 0,
					      TrUserData);
      1 ->
	  skip_64_DisableNeighborResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DisableNeighborResponse(Rest, 0,
							0, TrUserData);
      3 ->
	  skip_group_DisableNeighborResponse(Rest, Key bsr 3, 0,
					     TrUserData);
      5 ->
	  skip_32_DisableNeighborResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DisableNeighborResponse(<<>>, 0, 0,
					  _) ->
    #{}.

skip_varint_DisableNeighborResponse(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    skip_varint_DisableNeighborResponse(Rest, Z1, Z2,
					TrUserData);
skip_varint_DisableNeighborResponse(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_DisableNeighborResponse(Rest, Z1, Z2,
					       TrUserData).


skip_length_delimited_DisableNeighborResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisableNeighborResponse(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
skip_length_delimited_DisableNeighborResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisableNeighborResponse(Rest2, 0, 0,
					       TrUserData).


skip_group_DisableNeighborResponse(Bin, FNum, Z2,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisableNeighborResponse(Rest, 0, Z2,
					       TrUserData).


skip_32_DisableNeighborResponse(<<_:32, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_DisableNeighborResponse(Rest, Z1, Z2,
					       TrUserData).


skip_64_DisableNeighborResponse(<<_:64, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_DisableNeighborResponse(Rest, Z1, Z2,
					       TrUserData).


d_msg_DeleteNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteNeighborResponse(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_DeleteNeighborResponse(<<>>, 0, 0,
					  _) ->
    #{};
dfp_read_field_def_DeleteNeighborResponse(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_DeleteNeighborResponse(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_DeleteNeighborResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteNeighborResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteNeighborResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteNeighborResponse(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_DeleteNeighborResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeleteNeighborResponse(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_DeleteNeighborResponse(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_DeleteNeighborResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteNeighborResponse(<<>>, 0, 0,
					 _) ->
    #{}.

skip_varint_DeleteNeighborResponse(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_DeleteNeighborResponse(Rest, Z1, Z2,
				       TrUserData);
skip_varint_DeleteNeighborResponse(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteNeighborResponse(Rest, Z1, Z2,
					      TrUserData).


skip_length_delimited_DeleteNeighborResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteNeighborResponse(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_DeleteNeighborResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteNeighborResponse(Rest2, 0, 0,
					      TrUserData).


skip_group_DeleteNeighborResponse(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteNeighborResponse(Rest, 0, Z2,
					      TrUserData).


skip_32_DeleteNeighborResponse(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteNeighborResponse(Rest, Z1, Z2,
					      TrUserData).


skip_64_DeleteNeighborResponse(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteNeighborResponse(Rest, Z1, Z2,
					      TrUserData).


d_msg_Global(Bin, TrUserData) ->
    dfp_read_field_def_Global(Bin, 0, 0, id(0, TrUserData),
			      id([], TrUserData), id(0, TrUserData),
			      id([], TrUserData), id([], TrUserData),
			      id(false, TrUserData), TrUserData).

dfp_read_field_def_Global(<<8, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Global_as(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      TrUserData);
dfp_read_field_def_Global(<<18, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Global_router_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData);
dfp_read_field_def_Global(<<24, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Global_listen_port(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, TrUserData);
dfp_read_field_def_Global(<<34, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Global_listen_addresses(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, TrUserData);
dfp_read_field_def_Global(<<42, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_pfield_Global_families(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData);
dfp_read_field_def_Global(<<40, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Global_families(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, TrUserData);
dfp_read_field_def_Global(<<48, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Global_use_multiple_paths(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, TrUserData);
dfp_read_field_def_Global(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, F6, TrUserData) ->
    #{as => F1, router_id => F2, listen_port => F3,
      listen_addresses => lists_reverse(F4, TrUserData),
      families => lists_reverse(F5, TrUserData),
      use_multiple_paths => F6};
dfp_read_field_def_Global(Other, Z1, Z2, F1, F2, F3, F4,
			  F5, F6, TrUserData) ->
    dg_read_field_def_Global(Other, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).

dg_read_field_def_Global(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Global(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_Global(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Global_as(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    TrUserData);
      18 ->
	  d_field_Global_router_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, TrUserData);
      24 ->
	  d_field_Global_listen_port(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, TrUserData);
      34 ->
	  d_field_Global_listen_addresses(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, TrUserData);
      42 ->
	  d_pfield_Global_families(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, TrUserData);
      40 ->
	  d_field_Global_families(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, TrUserData);
      48 ->
	  d_field_Global_use_multiple_paths(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Global(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   TrUserData);
	    1 ->
		skip_64_Global(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       TrUserData);
	    2 ->
		skip_length_delimited_Global(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, TrUserData);
	    3 ->
		skip_group_Global(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				  F5, F6, TrUserData);
	    5 ->
		skip_32_Global(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       TrUserData)
	  end
    end;
dg_read_field_def_Global(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 F6, TrUserData) ->
    #{as => F1, router_id => F2, listen_port => F3,
      listen_addresses => lists_reverse(F4, TrUserData),
      families => lists_reverse(F5, TrUserData),
      use_multiple_paths => F6}.

d_field_Global_as(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Global_as(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, TrUserData);
d_field_Global_as(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Global(Rest, 0, 0, NewFValue, F2, F3,
			      F4, F5, F6, TrUserData).


d_field_Global_router_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Global_router_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
d_field_Global_router_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Global(Rest2, 0, 0, F1, NewFValue,
			      F3, F4, F5, F6, TrUserData).


d_field_Global_listen_port(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Global_listen_port(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, TrUserData);
d_field_Global_listen_port(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Global(Rest, 0, 0, F1, F2, NewFValue,
			      F4, F5, F6, TrUserData).


d_field_Global_listen_addresses(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Global_listen_addresses(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
d_field_Global_listen_addresses(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Global(Rest2, 0, 0, F1, F2, F3,
			      cons(NewFValue, F4, TrUserData), F5, F6,
			      TrUserData).


d_field_Global_families(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Global_families(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, TrUserData);
d_field_Global_families(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Global(Rest, 0, 0, F1, F2, F3, F4,
			      cons(NewFValue, F5, TrUserData), F6, TrUserData).

d_pfield_Global_families(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_pfield_Global_families(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
d_pfield_Global_families(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_Global_families(PackedBytes, 0,
					    0, F5),
    dfp_read_field_def_Global(Rest2, 0, 0, F1, F2, F3, F4,
			      NewSeq, F6, TrUserData).


d_packed_field_Global_families(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_Global_families(Rest, N + 7,
				   X bsl N + Acc, AccSeq);
d_packed_field_Global_families(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, AccSeq) ->
    NewFValue = X bsl N + Acc,
    d_packed_field_Global_families(Rest, 0, 0,
				   [NewFValue | AccSeq]);
d_packed_field_Global_families(<<>>, 0, 0, AccSeq) ->
    AccSeq.


d_field_Global_use_multiple_paths(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Global_use_multiple_paths(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData);
d_field_Global_use_multiple_paths(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Global(Rest, 0, 0, F1, F2, F3, F4,
			      F5, NewFValue, TrUserData).


skip_varint_Global(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_Global(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       TrUserData);
skip_varint_Global(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Global(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, TrUserData).


skip_length_delimited_Global(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_Global(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
skip_length_delimited_Global(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Global(Rest2, 0, 0, F1, F2, F3, F4,
			      F5, F6, TrUserData).


skip_group_Global(Bin, FNum, Z2, F1, F2, F3, F4, F5, F6,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Global(Rest, 0, Z2, F1, F2, F3, F4,
			      F5, F6, TrUserData).


skip_32_Global(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Global(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, TrUserData).


skip_64_Global(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Global(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, TrUserData).


d_msg_StartServerRequest(Bin, TrUserData) ->
    dfp_read_field_def_StartServerRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_StartServerRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_StartServerRequest_global(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_StartServerRequest(<<>>, 0, 0, F1,
				      _) ->
    #{global => F1};
dfp_read_field_def_StartServerRequest(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_StartServerRequest(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_StartServerRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StartServerRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_StartServerRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_StartServerRequest_global(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StartServerRequest(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_StartServerRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_StartServerRequest(Rest, 0, 0, F1,
							 TrUserData);
	    3 ->
		skip_group_StartServerRequest(Rest, Key bsr 3, 0, F1,
					      TrUserData);
	    5 ->
		skip_32_StartServerRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_StartServerRequest(<<>>, 0, 0, F1,
				     _) ->
    #{global => F1}.

d_field_StartServerRequest_global(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_StartServerRequest_global(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_StartServerRequest_global(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Global(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_StartServerRequest(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 merge_msg_Global(F1, NewFValue,
								  TrUserData)
					  end,
					  TrUserData).


skip_varint_StartServerRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_StartServerRequest(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_StartServerRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_StartServerRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_StartServerRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_StartServerRequest(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_StartServerRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartServerRequest(Rest2, 0, 0, F1,
					  TrUserData).


skip_group_StartServerRequest(Bin, FNum, Z2, F1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartServerRequest(Rest, 0, Z2, F1,
					  TrUserData).


skip_32_StartServerRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_StartServerRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_StartServerRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_StartServerRequest(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_DeleteRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRpkiRequest(Bin, 0, 0,
					 id([], TrUserData), id(0, TrUserData),
					 TrUserData).

dfp_read_field_def_DeleteRpkiRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteRpkiRequest_address(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_DeleteRpkiRequest(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteRpkiRequest_port(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_DeleteRpkiRequest(<<>>, 0, 0, F1, F2,
				     _) ->
    #{address => F1, port => F2};
dfp_read_field_def_DeleteRpkiRequest(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_DeleteRpkiRequest(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_DeleteRpkiRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRpkiRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_DeleteRpkiRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRpkiRequest_address(Rest, 0, 0, F1, F2,
					    TrUserData);
      16 ->
	  d_field_DeleteRpkiRequest_port(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRpkiRequest(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_DeleteRpkiRequest(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_DeleteRpkiRequest(Rest, 0, 0, F1,
							F2, TrUserData);
	    3 ->
		skip_group_DeleteRpkiRequest(Rest, Key bsr 3, 0, F1, F2,
					     TrUserData);
	    5 ->
		skip_32_DeleteRpkiRequest(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_DeleteRpkiRequest(<<>>, 0, 0, F1, F2,
				    _) ->
    #{address => F1, port => F2}.

d_field_DeleteRpkiRequest_address(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteRpkiRequest_address(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteRpkiRequest_address(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DeleteRpkiRequest(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_DeleteRpkiRequest_port(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteRpkiRequest_port(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteRpkiRequest_port(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_DeleteRpkiRequest(Rest, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_DeleteRpkiRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DeleteRpkiRequest(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_DeleteRpkiRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteRpkiRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_DeleteRpkiRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRpkiRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_DeleteRpkiRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRpkiRequest(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_group_DeleteRpkiRequest(Bin, FNum, Z2, F1, F2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteRpkiRequest(Rest, 0, Z2, F1,
					 F2, TrUserData).


skip_32_DeleteRpkiRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteRpkiRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_DeleteRpkiRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteRpkiRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_GetPolicyRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetPolicyRequest(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_GetPolicyRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_GetPolicyRequest(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_GetPolicyRequest(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_GetPolicyRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetPolicyRequest(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_GetPolicyRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_GetPolicyRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_GetPolicyRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_GetPolicyRequest(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_GetPolicyRequest(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_GetPolicyRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_GetPolicyRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_GetPolicyRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_GetPolicyRequest(Rest, Z1, Z2, TrUserData);
skip_varint_GetPolicyRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_GetPolicyRequest(Rest, Z1, Z2,
					TrUserData).


skip_length_delimited_GetPolicyRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetPolicyRequest(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_GetPolicyRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetPolicyRequest(Rest2, 0, 0,
					TrUserData).


skip_group_GetPolicyRequest(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetPolicyRequest(Rest, 0, Z2,
					TrUserData).


skip_32_GetPolicyRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_GetPolicyRequest(Rest, Z1, Z2,
					TrUserData).


skip_64_GetPolicyRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_GetPolicyRequest(Rest, Z1, Z2,
					TrUserData).


d_msg_RPKIConf(Bin, TrUserData) ->
    dfp_read_field_def_RPKIConf(Bin, 0, 0,
				id([], TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_RPKIConf(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_RPKIConf_address(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_RPKIConf(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_RPKIConf_remote_port(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_RPKIConf(<<>>, 0, 0, F1, F2, _) ->
    #{address => F1, remote_port => F2};
dfp_read_field_def_RPKIConf(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_RPKIConf(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_RPKIConf(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RPKIConf(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_RPKIConf(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RPKIConf_address(Rest, 0, 0, F1, F2,
				   TrUserData);
      18 ->
	  d_field_RPKIConf_remote_port(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RPKIConf(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_RPKIConf(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_RPKIConf(Rest, 0, 0, F1, F2,
					       TrUserData);
	    3 ->
		skip_group_RPKIConf(Rest, Key bsr 3, 0, F1, F2,
				    TrUserData);
	    5 -> skip_32_RPKIConf(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_RPKIConf(<<>>, 0, 0, F1, F2, _) ->
    #{address => F1, remote_port => F2}.

d_field_RPKIConf_address(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RPKIConf_address(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_RPKIConf_address(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RPKIConf(Rest2, 0, 0, NewFValue, F2,
				TrUserData).


d_field_RPKIConf_remote_port(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RPKIConf_remote_port(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_RPKIConf_remote_port(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RPKIConf(Rest2, 0, 0, F1, NewFValue,
				TrUserData).


skip_varint_RPKIConf(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_RPKIConf(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_RPKIConf(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_RPKIConf(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_RPKIConf(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RPKIConf(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_RPKIConf(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RPKIConf(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_group_RPKIConf(Bin, FNum, Z2, F1, F2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RPKIConf(Rest, 0, Z2, F1, F2,
				TrUserData).


skip_32_RPKIConf(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_RPKIConf(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_RPKIConf(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_RPKIConf(Rest, Z1, Z2, F1, F2,
				TrUserData).


d_msg_Roa(Bin, TrUserData) ->
    dfp_read_field_def_Roa(Bin, 0, 0, id(0, TrUserData),
			   id(0, TrUserData), id(0, TrUserData),
			   id([], TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_Roa(<<8, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Roa_as(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		   TrUserData);
dfp_read_field_def_Roa(<<16, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Roa_prefixlen(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  TrUserData);
dfp_read_field_def_Roa(<<24, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Roa_maxlen(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		       TrUserData);
dfp_read_field_def_Roa(<<34, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Roa_prefix(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		       TrUserData);
dfp_read_field_def_Roa(<<42, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Roa_conf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		     TrUserData);
dfp_read_field_def_Roa(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       _) ->
    #{as => F1, prefixlen => F2, maxlen => F3, prefix => F4,
      conf => F5};
dfp_read_field_def_Roa(Other, Z1, Z2, F1, F2, F3, F4,
		       F5, TrUserData) ->
    dg_read_field_def_Roa(Other, Z1, Z2, F1, F2, F3, F4, F5,
			  TrUserData).

dg_read_field_def_Roa(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Roa(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, TrUserData);
dg_read_field_def_Roa(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Roa_as(Rest, 0, 0, F1, F2, F3, F4, F5,
			 TrUserData);
      16 ->
	  d_field_Roa_prefixlen(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
      24 ->
	  d_field_Roa_maxlen(Rest, 0, 0, F1, F2, F3, F4, F5,
			     TrUserData);
      34 ->
	  d_field_Roa_prefix(Rest, 0, 0, F1, F2, F3, F4, F5,
			     TrUserData);
      42 ->
	  d_field_Roa_conf(Rest, 0, 0, F1, F2, F3, F4, F5,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Roa(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
	    1 ->
		skip_64_Roa(Rest, 0, 0, F1, F2, F3, F4, F5, TrUserData);
	    2 ->
		skip_length_delimited_Roa(Rest, 0, 0, F1, F2, F3, F4,
					  F5, TrUserData);
	    3 ->
		skip_group_Roa(Rest, Key bsr 3, 0, F1, F2, F3, F4, F5,
			       TrUserData);
	    5 ->
		skip_32_Roa(Rest, 0, 0, F1, F2, F3, F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_Roa(<<>>, 0, 0, F1, F2, F3, F4, F5,
		      _) ->
    #{as => F1, prefixlen => F2, maxlen => F3, prefix => F4,
      conf => F5}.

d_field_Roa_as(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
	       F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Roa_as(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		   F4, F5, TrUserData);
d_field_Roa_as(<<0:1, X:7, Rest/binary>>, N, Acc, _, F2,
	       F3, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Roa(Rest, 0, 0, NewFValue, F2, F3,
			   F4, F5, TrUserData).


d_field_Roa_prefixlen(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Roa_prefixlen(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, TrUserData);
d_field_Roa_prefixlen(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Roa(Rest, 0, 0, F1, NewFValue, F3,
			   F4, F5, TrUserData).


d_field_Roa_maxlen(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Roa_maxlen(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, TrUserData);
d_field_Roa_maxlen(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Roa(Rest, 0, 0, F1, F2, NewFValue,
			   F4, F5, TrUserData).


d_field_Roa_prefix(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Roa_prefix(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, TrUserData);
d_field_Roa_prefix(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Roa(Rest2, 0, 0, F1, F2, F3,
			   NewFValue, F5, TrUserData).


d_field_Roa_conf(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Roa_conf(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5, TrUserData);
d_field_Roa_conf(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RPKIConf(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Roa(Rest2, 0, 0, F1, F2, F3, F4,
			   if F5 == undefined -> NewFValue;
			      true ->
				  merge_msg_RPKIConf(F5, NewFValue, TrUserData)
			   end,
			   TrUserData).


skip_varint_Roa(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5, TrUserData) ->
    skip_varint_Roa(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		    TrUserData);
skip_varint_Roa(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_Roa(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


skip_length_delimited_Roa(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Roa(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
skip_length_delimited_Roa(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Roa(Rest2, 0, 0, F1, F2, F3, F4, F5,
			   TrUserData).


skip_group_Roa(Bin, FNum, Z2, F1, F2, F3, F4, F5,
	       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Roa(Rest, 0, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


skip_32_Roa(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5, TrUserData) ->
    dfp_read_field_def_Roa(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


skip_64_Roa(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5, TrUserData) ->
    dfp_read_field_def_Roa(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


d_msg_GetRoaResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRoaResponse(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_GetRoaResponse(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_GetRoaResponse_roas(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_GetRoaResponse(<<>>, 0, 0, F1,
				  TrUserData) ->
    #{roas => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetRoaResponse(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_GetRoaResponse(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_GetRoaResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRoaResponse(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRoaResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRoaResponse_roas(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRoaResponse(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetRoaResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRoaResponse(Rest, 0, 0, F1,
						     TrUserData);
	    3 ->
		skip_group_GetRoaResponse(Rest, Key bsr 3, 0, F1,
					  TrUserData);
	    5 -> skip_32_GetRoaResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRoaResponse(<<>>, 0, 0, F1,
				 TrUserData) ->
    #{roas => lists_reverse(F1, TrUserData)}.

d_field_GetRoaResponse_roas(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRoaResponse_roas(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_GetRoaResponse_roas(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Roa(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GetRoaResponse(Rest2, 0, 0,
				      cons(NewFValue, F1, TrUserData),
				      TrUserData).


skip_varint_GetRoaResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_GetRoaResponse(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_GetRoaResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRoaResponse(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_GetRoaResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRoaResponse(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRoaResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRoaResponse(Rest2, 0, 0, F1,
				      TrUserData).


skip_group_GetRoaResponse(Bin, FNum, Z2, F1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRoaResponse(Rest, 0, Z2, F1,
				      TrUserData).


skip_32_GetRoaResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetRoaResponse(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_GetRoaResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetRoaResponse(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_GetDefinedSetRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetDefinedSetRequest(Bin, 0, 0,
					    id('PREFIX', TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_GetDefinedSetRequest(<<8,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_GetDefinedSetRequest_type(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_GetDefinedSetRequest(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_GetDefinedSetRequest_name(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_GetDefinedSetRequest(<<>>, 0, 0, F1,
					F2, _) ->
    #{type => F1, name => F2};
dfp_read_field_def_GetDefinedSetRequest(Other, Z1, Z2,
					F1, F2, TrUserData) ->
    dg_read_field_def_GetDefinedSetRequest(Other, Z1, Z2,
					   F1, F2, TrUserData).

dg_read_field_def_GetDefinedSetRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetDefinedSetRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_GetDefinedSetRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetDefinedSetRequest_type(Rest, 0, 0, F1, F2,
					    TrUserData);
      18 ->
	  d_field_GetDefinedSetRequest_name(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetDefinedSetRequest(Rest, 0, 0, F1, F2,
						 TrUserData);
	    1 ->
		skip_64_GetDefinedSetRequest(Rest, 0, 0, F1, F2,
					     TrUserData);
	    2 ->
		skip_length_delimited_GetDefinedSetRequest(Rest, 0, 0,
							   F1, F2, TrUserData);
	    3 ->
		skip_group_GetDefinedSetRequest(Rest, Key bsr 3, 0, F1,
						F2, TrUserData);
	    5 ->
		skip_32_GetDefinedSetRequest(Rest, 0, 0, F1, F2,
					     TrUserData)
	  end
    end;
dg_read_field_def_GetDefinedSetRequest(<<>>, 0, 0, F1,
				       F2, _) ->
    #{type => F1, name => F2}.

d_field_GetDefinedSetRequest_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GetDefinedSetRequest_type(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_GetDefinedSetRequest_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_DefinedType(Tmp),
    dfp_read_field_def_GetDefinedSetRequest(Rest, 0, 0,
					    NewFValue, F2, TrUserData).


d_field_GetDefinedSetRequest_name(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GetDefinedSetRequest_name(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_GetDefinedSetRequest_name(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetDefinedSetRequest(Rest2, 0, 0, F1,
					    NewFValue, TrUserData).


skip_varint_GetDefinedSetRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_GetDefinedSetRequest(Rest, Z1, Z2, F1, F2,
				     TrUserData);
skip_varint_GetDefinedSetRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetDefinedSetRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_length_delimited_GetDefinedSetRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetDefinedSetRequest(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
skip_length_delimited_GetDefinedSetRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetDefinedSetRequest(Rest2, 0, 0, F1,
					    F2, TrUserData).


skip_group_GetDefinedSetRequest(Bin, FNum, Z2, F1, F2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetDefinedSetRequest(Rest, 0, Z2, F1,
					    F2, TrUserData).


skip_32_GetDefinedSetRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetDefinedSetRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_64_GetDefinedSetRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetDefinedSetRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData).


d_msg_DeleteVrfResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteVrfResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_DeleteVrfResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DeleteVrfResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_DeleteVrfResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_DeleteVrfResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteVrfResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteVrfResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteVrfResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_DeleteVrfResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeleteVrfResponse(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_DeleteVrfResponse(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_DeleteVrfResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteVrfResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DeleteVrfResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_DeleteVrfResponse(Rest, Z1, Z2, TrUserData);
skip_varint_DeleteVrfResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteVrfResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_DeleteVrfResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteVrfResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_DeleteVrfResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteVrfResponse(Rest2, 0, 0,
					 TrUserData).


skip_group_DeleteVrfResponse(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteVrfResponse(Rest, 0, Z2,
					 TrUserData).


skip_32_DeleteVrfResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DeleteVrfResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_DeleteVrfResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DeleteVrfResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_TableLookupPrefix(Bin, TrUserData) ->
    dfp_read_field_def_TableLookupPrefix(Bin, 0, 0,
					 id([], TrUserData),
					 id('LOOKUP_EXACT', TrUserData),
					 TrUserData).

dfp_read_field_def_TableLookupPrefix(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableLookupPrefix_prefix(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_TableLookupPrefix(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableLookupPrefix_lookup_option(Rest, Z1, Z2,
					    F1, F2, TrUserData);
dfp_read_field_def_TableLookupPrefix(<<>>, 0, 0, F1, F2,
				     _) ->
    #{prefix => F1, lookup_option => F2};
dfp_read_field_def_TableLookupPrefix(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_TableLookupPrefix(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_TableLookupPrefix(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableLookupPrefix(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_TableLookupPrefix(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TableLookupPrefix_prefix(Rest, 0, 0, F1, F2,
					   TrUserData);
      16 ->
	  d_field_TableLookupPrefix_lookup_option(Rest, 0, 0, F1,
						  F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableLookupPrefix(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_TableLookupPrefix(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_TableLookupPrefix(Rest, 0, 0, F1,
							F2, TrUserData);
	    3 ->
		skip_group_TableLookupPrefix(Rest, Key bsr 3, 0, F1, F2,
					     TrUserData);
	    5 ->
		skip_32_TableLookupPrefix(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_TableLookupPrefix(<<>>, 0, 0, F1, F2,
				    _) ->
    #{prefix => F1, lookup_option => F2}.

d_field_TableLookupPrefix_prefix(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableLookupPrefix_prefix(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_TableLookupPrefix_prefix(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableLookupPrefix(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_TableLookupPrefix_lookup_option(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableLookupPrefix_lookup_option(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
d_field_TableLookupPrefix_lookup_option(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_TableLookupOption(Tmp),
    dfp_read_field_def_TableLookupPrefix(Rest, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_TableLookupPrefix(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_TableLookupPrefix(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_TableLookupPrefix(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableLookupPrefix(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_TableLookupPrefix(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableLookupPrefix(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_TableLookupPrefix(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableLookupPrefix(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_group_TableLookupPrefix(Bin, FNum, Z2, F1, F2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TableLookupPrefix(Rest, 0, Z2, F1,
					 F2, TrUserData).


skip_32_TableLookupPrefix(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_TableLookupPrefix(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_TableLookupPrefix(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_TableLookupPrefix(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_AfiSafiConfig(Bin, TrUserData) ->
    dfp_read_field_def_AfiSafiConfig(Bin, 0, 0,
				     id(0, TrUserData), id(false, TrUserData),
				     TrUserData).

dfp_read_field_def_AfiSafiConfig(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, TrUserData) ->
    d_field_AfiSafiConfig_family(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_AfiSafiConfig(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_AfiSafiConfig_enabled(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_AfiSafiConfig(<<>>, 0, 0, F1, F2,
				 _) ->
    #{family => F1, enabled => F2};
dfp_read_field_def_AfiSafiConfig(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_AfiSafiConfig(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_AfiSafiConfig(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AfiSafiConfig(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_AfiSafiConfig(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AfiSafiConfig_family(Rest, 0, 0, F1, F2,
				       TrUserData);
      16 ->
	  d_field_AfiSafiConfig_enabled(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AfiSafiConfig(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_AfiSafiConfig(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_AfiSafiConfig(Rest, 0, 0, F1, F2,
						    TrUserData);
	    3 ->
		skip_group_AfiSafiConfig(Rest, Key bsr 3, 0, F1, F2,
					 TrUserData);
	    5 ->
		skip_32_AfiSafiConfig(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_AfiSafiConfig(<<>>, 0, 0, F1, F2,
				_) ->
    #{family => F1, enabled => F2}.

d_field_AfiSafiConfig_family(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AfiSafiConfig_family(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_AfiSafiConfig_family(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AfiSafiConfig(Rest, 0, 0, NewFValue,
				     F2, TrUserData).


d_field_AfiSafiConfig_enabled(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AfiSafiConfig_enabled(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_AfiSafiConfig_enabled(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_AfiSafiConfig(Rest, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_AfiSafiConfig(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_AfiSafiConfig(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_AfiSafiConfig(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_AfiSafiConfig(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_AfiSafiConfig(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AfiSafiConfig(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_AfiSafiConfig(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AfiSafiConfig(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_group_AfiSafiConfig(Bin, FNum, Z2, F1, F2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AfiSafiConfig(Rest, 0, Z2, F1, F2,
				     TrUserData).


skip_32_AfiSafiConfig(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_AfiSafiConfig(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_AfiSafiConfig(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_AfiSafiConfig(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_DisableMrtResponse(Bin, TrUserData) ->
    dfp_read_field_def_DisableMrtResponse(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_DisableMrtResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DisableMrtResponse(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_DisableMrtResponse(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_DisableMrtResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisableMrtResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_DisableMrtResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DisableMrtResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_DisableMrtResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DisableMrtResponse(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_DisableMrtResponse(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_DisableMrtResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DisableMrtResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DisableMrtResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_DisableMrtResponse(Rest, Z1, Z2,
				   TrUserData);
skip_varint_DisableMrtResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DisableMrtResponse(Rest, Z1, Z2,
					  TrUserData).


skip_length_delimited_DisableMrtResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisableMrtResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_DisableMrtResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisableMrtResponse(Rest2, 0, 0,
					  TrUserData).


skip_group_DisableMrtResponse(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisableMrtResponse(Rest, 0, Z2,
					  TrUserData).


skip_32_DisableMrtResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_DisableMrtResponse(Rest, Z1, Z2,
					  TrUserData).


skip_64_DisableMrtResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_DisableMrtResponse(Rest, Z1, Z2,
					  TrUserData).


d_msg_AddStatementResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddStatementResponse(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_AddStatementResponse(<<>>, 0, 0,
					_) ->
    #{};
dfp_read_field_def_AddStatementResponse(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_AddStatementResponse(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_AddStatementResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddStatementResponse(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_AddStatementResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AddStatementResponse(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_AddStatementResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddStatementResponse(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_AddStatementResponse(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_AddStatementResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddStatementResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AddStatementResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_AddStatementResponse(Rest, Z1, Z2,
				     TrUserData);
skip_varint_AddStatementResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddStatementResponse(Rest, Z1, Z2,
					    TrUserData).


skip_length_delimited_AddStatementResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddStatementResponse(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_AddStatementResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddStatementResponse(Rest2, 0, 0,
					    TrUserData).


skip_group_AddStatementResponse(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddStatementResponse(Rest, 0, Z2,
					    TrUserData).


skip_32_AddStatementResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_AddStatementResponse(Rest, Z1, Z2,
					    TrUserData).


skip_64_AddStatementResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_AddStatementResponse(Rest, Z1, Z2,
					    TrUserData).


d_msg_TableInfo(Bin, TrUserData) ->
    dfp_read_field_def_TableInfo(Bin, 0, 0,
				 id('GLOBAL', TrUserData), id([], TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_TableInfo(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_TableInfo_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_TableInfo(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_TableInfo_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_TableInfo(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_TableInfo_family(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData);
dfp_read_field_def_TableInfo(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_TableInfo_num_destination(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, TrUserData);
dfp_read_field_def_TableInfo(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_TableInfo_num_path(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, TrUserData);
dfp_read_field_def_TableInfo(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_TableInfo_num_accepted(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, TrUserData);
dfp_read_field_def_TableInfo(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, _) ->
    #{type => F1, name => F2, family => F3,
      num_destination => F4, num_path => F5,
      num_accepted => F6};
dfp_read_field_def_TableInfo(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, TrUserData) ->
    dg_read_field_def_TableInfo(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData).

dg_read_field_def_TableInfo(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableInfo(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_TableInfo(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TableInfo_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      18 ->
	  d_field_TableInfo_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      24 ->
	  d_field_TableInfo_family(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, TrUserData);
      32 ->
	  d_field_TableInfo_num_destination(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, TrUserData);
      40 ->
	  d_field_TableInfo_num_path(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, TrUserData);
      48 ->
	  d_field_TableInfo_num_accepted(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, TrUserData);
	    1 ->
		skip_64_TableInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData);
	    2 ->
		skip_length_delimited_TableInfo(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, TrUserData);
	    3 ->
		skip_group_TableInfo(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				     F5, F6, TrUserData);
	    5 ->
		skip_32_TableInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData)
	  end
    end;
dg_read_field_def_TableInfo(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, _) ->
    #{type => F1, name => F2, family => F3,
      num_destination => F4, num_path => F5,
      num_accepted => F6}.

d_field_TableInfo_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_TableInfo_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_TableInfo_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_TableInfo(Rest, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, TrUserData).


d_field_TableInfo_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_TableInfo_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_TableInfo_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInfo(Rest2, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, TrUserData).


d_field_TableInfo_family(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_TableInfo_family(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
d_field_TableInfo_family(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, _, F4, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TableInfo(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, TrUserData).


d_field_TableInfo_num_destination(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_TableInfo_num_destination(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData);
d_field_TableInfo_num_destination(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TableInfo(Rest, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, TrUserData).


d_field_TableInfo_num_path(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_TableInfo_num_path(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, TrUserData);
d_field_TableInfo_num_path(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TableInfo(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, TrUserData).


d_field_TableInfo_num_accepted(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_TableInfo_num_accepted(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				   TrUserData);
d_field_TableInfo_num_accepted(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TableInfo(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, TrUserData).


skip_varint_TableInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_TableInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, TrUserData);
skip_varint_TableInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_TableInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_length_delimited_TableInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
skip_length_delimited_TableInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableInfo(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_group_TableInfo(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		     F6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TableInfo(Rest, 0, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_32_TableInfo(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_TableInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_64_TableInfo(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_TableInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


d_msg_GetRibInfoResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRibInfoResponse(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_GetRibInfoResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_GetRibInfoResponse_info(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_GetRibInfoResponse(<<>>, 0, 0, F1,
				      _) ->
    #{info => F1};
dfp_read_field_def_GetRibInfoResponse(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_GetRibInfoResponse(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_GetRibInfoResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRibInfoResponse(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRibInfoResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRibInfoResponse_info(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRibInfoResponse(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_GetRibInfoResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRibInfoResponse(Rest, 0, 0, F1,
							 TrUserData);
	    3 ->
		skip_group_GetRibInfoResponse(Rest, Key bsr 3, 0, F1,
					      TrUserData);
	    5 ->
		skip_32_GetRibInfoResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRibInfoResponse(<<>>, 0, 0, F1,
				     _) ->
    #{info => F1}.

d_field_GetRibInfoResponse_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRibInfoResponse_info(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_GetRibInfoResponse_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetRibInfoResponse(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 merge_msg_TableInfo(F1,
								     NewFValue,
								     TrUserData)
					  end,
					  TrUserData).


skip_varint_GetRibInfoResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_GetRibInfoResponse(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_GetRibInfoResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRibInfoResponse(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_GetRibInfoResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRibInfoResponse(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRibInfoResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRibInfoResponse(Rest2, 0, 0, F1,
					  TrUserData).


skip_group_GetRibInfoResponse(Bin, FNum, Z2, F1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRibInfoResponse(Rest, 0, Z2, F1,
					  TrUserData).


skip_32_GetRibInfoResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRibInfoResponse(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_GetRibInfoResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRibInfoResponse(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_CommunityAction(Bin, TrUserData) ->
    dfp_read_field_def_CommunityAction(Bin, 0, 0,
				       id('COMMUNITY_ADD', TrUserData),
				       id([], TrUserData), TrUserData).

dfp_read_field_def_CommunityAction(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_CommunityAction_type(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_CommunityAction(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_CommunityAction_communities(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_CommunityAction(<<>>, 0, 0, F1, F2,
				   TrUserData) ->
    #{type => F1,
      communities => lists_reverse(F2, TrUserData)};
dfp_read_field_def_CommunityAction(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_CommunityAction(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_CommunityAction(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommunityAction(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_CommunityAction(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommunityAction_type(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_CommunityAction_communities(Rest, 0, 0, F1, F2,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommunityAction(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_CommunityAction(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_CommunityAction(Rest, 0, 0, F1,
						      F2, TrUserData);
	    3 ->
		skip_group_CommunityAction(Rest, Key bsr 3, 0, F1, F2,
					   TrUserData);
	    5 ->
		skip_32_CommunityAction(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_CommunityAction(<<>>, 0, 0, F1, F2,
				  TrUserData) ->
    #{type => F1,
      communities => lists_reverse(F2, TrUserData)}.

d_field_CommunityAction_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CommunityAction_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_CommunityAction_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_CommunityActionType(Tmp),
    dfp_read_field_def_CommunityAction(Rest, 0, 0,
				       NewFValue, F2, TrUserData).


d_field_CommunityAction_communities(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CommunityAction_communities(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_CommunityAction_communities(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommunityAction(Rest2, 0, 0, F1,
				       cons(NewFValue, F2, TrUserData),
				       TrUserData).


skip_varint_CommunityAction(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_CommunityAction(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_CommunityAction(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_CommunityAction(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_CommunityAction(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommunityAction(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_CommunityAction(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommunityAction(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_group_CommunityAction(Bin, FNum, Z2, F1, F2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommunityAction(Rest, 0, Z2, F1, F2,
				       TrUserData).


skip_32_CommunityAction(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_CommunityAction(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_CommunityAction(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_CommunityAction(Rest, Z1, Z2, F1, F2,
				       TrUserData).


d_msg_LocalPrefAction(Bin, TrUserData) ->
    dfp_read_field_def_LocalPrefAction(Bin, 0, 0,
				       id(0, TrUserData), TrUserData).

dfp_read_field_def_LocalPrefAction(<<8, Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    d_field_LocalPrefAction_value(Rest, Z1, Z2, F1,
				  TrUserData);
dfp_read_field_def_LocalPrefAction(<<>>, 0, 0, F1, _) ->
    #{value => F1};
dfp_read_field_def_LocalPrefAction(Other, Z1, Z2, F1,
				   TrUserData) ->
    dg_read_field_def_LocalPrefAction(Other, Z1, Z2, F1,
				      TrUserData).

dg_read_field_def_LocalPrefAction(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LocalPrefAction(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_LocalPrefAction(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LocalPrefAction_value(Rest, 0, 0, F1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LocalPrefAction(Rest, 0, 0, F1, TrUserData);
	    1 ->
		skip_64_LocalPrefAction(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_LocalPrefAction(Rest, 0, 0, F1,
						      TrUserData);
	    3 ->
		skip_group_LocalPrefAction(Rest, Key bsr 3, 0, F1,
					   TrUserData);
	    5 -> skip_32_LocalPrefAction(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_LocalPrefAction(<<>>, 0, 0, F1, _) ->
    #{value => F1}.

d_field_LocalPrefAction_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_LocalPrefAction_value(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
d_field_LocalPrefAction_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LocalPrefAction(Rest, 0, 0,
				       NewFValue, TrUserData).


skip_varint_LocalPrefAction(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    skip_varint_LocalPrefAction(Rest, Z1, Z2, F1,
				TrUserData);
skip_varint_LocalPrefAction(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_LocalPrefAction(Rest, Z1, Z2, F1,
				       TrUserData).


skip_length_delimited_LocalPrefAction(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LocalPrefAction(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_LocalPrefAction(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LocalPrefAction(Rest2, 0, 0, F1,
				       TrUserData).


skip_group_LocalPrefAction(Bin, FNum, Z2, F1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LocalPrefAction(Rest, 0, Z2, F1,
				       TrUserData).


skip_32_LocalPrefAction(<<_:32, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_LocalPrefAction(Rest, Z1, Z2, F1,
				       TrUserData).


skip_64_LocalPrefAction(<<_:64, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_LocalPrefAction(Rest, Z1, Z2, F1,
				       TrUserData).


d_msg_NexthopAction(Bin, TrUserData) ->
    dfp_read_field_def_NexthopAction(Bin, 0, 0,
				     id([], TrUserData), id(false, TrUserData),
				     TrUserData).

dfp_read_field_def_NexthopAction(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_NexthopAction_address(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_NexthopAction(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_NexthopAction_self(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_NexthopAction(<<>>, 0, 0, F1, F2,
				 _) ->
    #{address => F1, self => F2};
dfp_read_field_def_NexthopAction(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_NexthopAction(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_NexthopAction(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NexthopAction(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_NexthopAction(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NexthopAction_address(Rest, 0, 0, F1, F2,
					TrUserData);
      16 ->
	  d_field_NexthopAction_self(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NexthopAction(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_NexthopAction(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_NexthopAction(Rest, 0, 0, F1, F2,
						    TrUserData);
	    3 ->
		skip_group_NexthopAction(Rest, Key bsr 3, 0, F1, F2,
					 TrUserData);
	    5 ->
		skip_32_NexthopAction(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_NexthopAction(<<>>, 0, 0, F1, F2,
				_) ->
    #{address => F1, self => F2}.

d_field_NexthopAction_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_NexthopAction_address(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_NexthopAction_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_NexthopAction(Rest2, 0, 0, NewFValue,
				     F2, TrUserData).


d_field_NexthopAction_self(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_NexthopAction_self(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_NexthopAction_self(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_NexthopAction(Rest, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_NexthopAction(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_NexthopAction(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_NexthopAction(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_NexthopAction(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_NexthopAction(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_NexthopAction(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_NexthopAction(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NexthopAction(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_group_NexthopAction(Bin, FNum, Z2, F1, F2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NexthopAction(Rest, 0, Z2, F1, F2,
				     TrUserData).


skip_32_NexthopAction(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_NexthopAction(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_NexthopAction(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_NexthopAction(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_AsPrependAction(Bin, TrUserData) ->
    dfp_read_field_def_AsPrependAction(Bin, 0, 0,
				       id(0, TrUserData), id(0, TrUserData),
				       id(false, TrUserData), TrUserData).

dfp_read_field_def_AsPrependAction(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AsPrependAction_asn(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_AsPrependAction(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AsPrependAction_repeat(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_AsPrependAction(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AsPrependAction_use_left_most(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
dfp_read_field_def_AsPrependAction(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #{asn => F1, repeat => F2, use_left_most => F3};
dfp_read_field_def_AsPrependAction(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_AsPrependAction(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_AsPrependAction(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AsPrependAction(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_AsPrependAction(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AsPrependAction_asn(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      16 ->
	  d_field_AsPrependAction_repeat(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      24 ->
	  d_field_AsPrependAction_use_left_most(Rest, 0, 0, F1,
						F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AsPrependAction(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_AsPrependAction(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_AsPrependAction(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    3 ->
		skip_group_AsPrependAction(Rest, Key bsr 3, 0, F1, F2,
					   F3, TrUserData);
	    5 ->
		skip_32_AsPrependAction(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_AsPrependAction(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #{asn => F1, repeat => F2, use_left_most => F3}.

d_field_AsPrependAction_asn(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AsPrependAction_asn(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_AsPrependAction_asn(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AsPrependAction(Rest, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_AsPrependAction_repeat(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AsPrependAction_repeat(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_AsPrependAction_repeat(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AsPrependAction(Rest, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_AsPrependAction_use_left_most(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AsPrependAction_use_left_most(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
d_field_AsPrependAction_use_left_most(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_AsPrependAction(Rest, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_AsPrependAction(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_AsPrependAction(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_AsPrependAction(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AsPrependAction(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_AsPrependAction(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AsPrependAction(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_AsPrependAction(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AsPrependAction(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_group_AsPrependAction(Bin, FNum, Z2, F1, F2, F3,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AsPrependAction(Rest, 0, Z2, F1, F2,
				       F3, TrUserData).


skip_32_AsPrependAction(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AsPrependAction(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_AsPrependAction(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AsPrependAction(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_Actions(Bin, TrUserData) ->
    dfp_read_field_def_Actions(Bin, 0, 0,
			       id('NONE', TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Actions(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_route_action(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_community(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_med(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<34, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_as_prepend(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<42, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_ext_community(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<50, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_nexthop(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<58, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_local_pref(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<66, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_Actions_large_community(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_Actions(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, _) ->
    #{route_action => F1, community => F2, med => F3,
      as_prepend => F4, ext_community => F5, nexthop => F6,
      local_pref => F7, large_community => F8};
dfp_read_field_def_Actions(Other, Z1, Z2, F1, F2, F3,
			   F4, F5, F6, F7, F8, TrUserData) ->
    dg_read_field_def_Actions(Other, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, TrUserData).

dg_read_field_def_Actions(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Actions(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
dg_read_field_def_Actions(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Actions_route_action(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, TrUserData);
      18 ->
	  d_field_Actions_community(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, TrUserData);
      26 ->
	  d_field_Actions_med(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, TrUserData);
      34 ->
	  d_field_Actions_as_prepend(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, TrUserData);
      42 ->
	  d_field_Actions_ext_community(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, TrUserData);
      50 ->
	  d_field_Actions_nexthop(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, TrUserData);
      58 ->
	  d_field_Actions_local_pref(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, TrUserData);
      66 ->
	  d_field_Actions_large_community(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Actions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, TrUserData);
	    1 ->
		skip_64_Actions(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, TrUserData);
	    2 ->
		skip_length_delimited_Actions(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8, TrUserData);
	    3 ->
		skip_group_Actions(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				   F5, F6, F7, F8, TrUserData);
	    5 ->
		skip_32_Actions(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, TrUserData)
	  end
    end;
dg_read_field_def_Actions(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, F6, F7, F8, _) ->
    #{route_action => F1, community => F2, med => F3,
      as_prepend => F4, ext_community => F5, nexthop => F6,
      local_pref => F7, large_community => F8}.

d_field_Actions_route_action(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_Actions_route_action(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_Actions_route_action(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8,
			     TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_RouteAction(Tmp),
    dfp_read_field_def_Actions(Rest, 0, 0, NewFValue, F2,
			       F3, F4, F5, F6, F7, F8, TrUserData).


d_field_Actions_community(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_Actions_community(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_Actions_community(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_CommunityAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1,
			       if F2 == undefined -> NewFValue;
				  true ->
				      merge_msg_CommunityAction(F2, NewFValue,
								TrUserData)
			       end,
			       F3, F4, F5, F6, F7, F8, TrUserData).


d_field_Actions_med(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_Actions_med(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, TrUserData);
d_field_Actions_med(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MedAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2,
			       if F3 == undefined -> NewFValue;
				  true ->
				      merge_msg_MedAction(F3, NewFValue,
							  TrUserData)
			       end,
			       F4, F5, F6, F7, F8, TrUserData).


d_field_Actions_as_prepend(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_Actions_as_prepend(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_Actions_as_prepend(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AsPrependAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2, F3,
			       if F4 == undefined -> NewFValue;
				  true ->
				      merge_msg_AsPrependAction(F4, NewFValue,
								TrUserData)
			       end,
			       F5, F6, F7, F8, TrUserData).


d_field_Actions_ext_community(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData)
    when N < 57 ->
    d_field_Actions_ext_community(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  TrUserData);
d_field_Actions_ext_community(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_CommunityAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2, F3, F4,
			       if F5 == undefined -> NewFValue;
				  true ->
				      merge_msg_CommunityAction(F5, NewFValue,
								TrUserData)
			       end,
			       F6, F7, F8, TrUserData).


d_field_Actions_nexthop(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_Actions_nexthop(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_Actions_nexthop(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_NexthopAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2, F3, F4,
			       F5,
			       if F6 == undefined -> NewFValue;
				  true ->
				      merge_msg_NexthopAction(F6, NewFValue,
							      TrUserData)
			       end,
			       F7, F8, TrUserData).


d_field_Actions_local_pref(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_Actions_local_pref(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_Actions_local_pref(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_LocalPrefAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6,
			       if F7 == undefined -> NewFValue;
				  true ->
				      merge_msg_LocalPrefAction(F7, NewFValue,
								TrUserData)
			       end,
			       F8, TrUserData).


d_field_Actions_large_community(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    d_field_Actions_large_community(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
d_field_Actions_large_community(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_CommunityAction(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7,
			       if F8 == undefined -> NewFValue;
				  true ->
				      merge_msg_CommunityAction(F8, NewFValue,
								TrUserData)
			       end,
			       TrUserData).


skip_varint_Actions(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    skip_varint_Actions(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, TrUserData);
skip_varint_Actions(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_Actions(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_length_delimited_Actions(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_Actions(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  TrUserData);
skip_length_delimited_Actions(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Actions(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_group_Actions(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		   F6, F7, F8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Actions(Rest, 0, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_32_Actions(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_Actions(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_64_Actions(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_Actions(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


d_msg_MatchSet(Bin, TrUserData) ->
    dfp_read_field_def_MatchSet(Bin, 0, 0,
				id('ANY', TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_MatchSet(<<8, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_MatchSet_type(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_MatchSet(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_MatchSet_name(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_MatchSet(<<>>, 0, 0, F1, F2, _) ->
    #{type => F1, name => F2};
dfp_read_field_def_MatchSet(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_MatchSet(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_MatchSet(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchSet(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_MatchSet(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MatchSet_type(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_MatchSet_name(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MatchSet(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_MatchSet(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_MatchSet(Rest, 0, 0, F1, F2,
					       TrUserData);
	    3 ->
		skip_group_MatchSet(Rest, Key bsr 3, 0, F1, F2,
				    TrUserData);
	    5 -> skip_32_MatchSet(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_MatchSet(<<>>, 0, 0, F1, F2, _) ->
    #{type => F1, name => F2}.

d_field_MatchSet_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_MatchSet_type(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_MatchSet_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_MatchType(Tmp),
    dfp_read_field_def_MatchSet(Rest, 0, 0, NewFValue, F2,
				TrUserData).


d_field_MatchSet_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_MatchSet_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_MatchSet_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MatchSet(Rest2, 0, 0, F1, NewFValue,
				TrUserData).


skip_varint_MatchSet(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_MatchSet(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_MatchSet(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_MatchSet(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_MatchSet(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchSet(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_MatchSet(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchSet(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_group_MatchSet(Bin, FNum, Z2, F1, F2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchSet(Rest, 0, Z2, F1, F2,
				TrUserData).


skip_32_MatchSet(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_MatchSet(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_MatchSet(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_MatchSet(Rest, Z1, Z2, F1, F2,
				TrUserData).


d_msg_AsPathLength(Bin, TrUserData) ->
    dfp_read_field_def_AsPathLength(Bin, 0, 0,
				    id('EQ', TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_AsPathLength(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_AsPathLength_type(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_AsPathLength(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_AsPathLength_length(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_AsPathLength(<<>>, 0, 0, F1, F2,
				_) ->
    #{type => F1, length => F2};
dfp_read_field_def_AsPathLength(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_AsPathLength(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_AsPathLength(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AsPathLength(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_AsPathLength(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AsPathLength_type(Rest, 0, 0, F1, F2,
				    TrUserData);
      16 ->
	  d_field_AsPathLength_length(Rest, 0, 0, F1, F2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AsPathLength(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_AsPathLength(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_AsPathLength(Rest, 0, 0, F1, F2,
						   TrUserData);
	    3 ->
		skip_group_AsPathLength(Rest, Key bsr 3, 0, F1, F2,
					TrUserData);
	    5 ->
		skip_32_AsPathLength(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_AsPathLength(<<>>, 0, 0, F1, F2, _) ->
    #{type => F1, length => F2}.

d_field_AsPathLength_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AsPathLength_type(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_AsPathLength_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_AsPathLengthType(Tmp),
    dfp_read_field_def_AsPathLength(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_AsPathLength_length(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AsPathLength_length(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_AsPathLength_length(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AsPathLength(Rest, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_AsPathLength(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_AsPathLength(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_AsPathLength(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_AsPathLength(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_AsPathLength(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AsPathLength(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_AsPathLength(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AsPathLength(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_group_AsPathLength(Bin, FNum, Z2, F1, F2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AsPathLength(Rest, 0, Z2, F1, F2,
				    TrUserData).


skip_32_AsPathLength(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_AsPathLength(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_AsPathLength(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_AsPathLength(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_Conditions(Bin, TrUserData) ->
    dfp_read_field_def_Conditions(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), id(0, TrUserData),
				  id('ROUTE_TYPE_NONE', TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Conditions(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_prefix_set(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_neighbor_set(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_as_path_length(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_as_path_set(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_community_set(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<50, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_ext_community_set(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9,
					 TrUserData);
dfp_read_field_def_Conditions(<<56, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_rpki_result(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_route_type(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Conditions(<<74, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    d_field_Conditions_large_community_set(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9,
					   TrUserData);
dfp_read_field_def_Conditions(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, _) ->
    #{prefix_set => F1, neighbor_set => F2,
      as_path_length => F3, as_path_set => F4,
      community_set => F5, ext_community_set => F6,
      rpki_result => F7, route_type => F8,
      large_community_set => F9};
dfp_read_field_def_Conditions(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, TrUserData) ->
    dg_read_field_def_Conditions(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, TrUserData).

dg_read_field_def_Conditions(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Conditions(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData);
dg_read_field_def_Conditions(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Conditions_prefix_set(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, TrUserData);
      18 ->
	  d_field_Conditions_neighbor_set(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, TrUserData);
      26 ->
	  d_field_Conditions_as_path_length(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9,
					    TrUserData);
      34 ->
	  d_field_Conditions_as_path_set(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, TrUserData);
      42 ->
	  d_field_Conditions_community_set(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, TrUserData);
      50 ->
	  d_field_Conditions_ext_community_set(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9,
					       TrUserData);
      56 ->
	  d_field_Conditions_rpki_result(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, TrUserData);
      64 ->
	  d_field_Conditions_route_type(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, TrUserData);
      74 ->
	  d_field_Conditions_large_community_set(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Conditions(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, TrUserData);
	    1 ->
		skip_64_Conditions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, TrUserData);
	    2 ->
		skip_length_delimited_Conditions(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9,
						 TrUserData);
	    3 ->
		skip_group_Conditions(Rest, Key bsr 3, 0, F1, F2, F3,
				      F4, F5, F6, F7, F8, F9, TrUserData);
	    5 ->
		skip_32_Conditions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, TrUserData)
	  end
    end;
dg_read_field_def_Conditions(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, _) ->
    #{prefix_set => F1, neighbor_set => F2,
      as_path_length => F3, as_path_set => F4,
      community_set => F5, ext_community_set => F6,
      rpki_result => F7, route_type => F8,
      large_community_set => F9}.

d_field_Conditions_prefix_set(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData)
    when N < 57 ->
    d_field_Conditions_prefix_set(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, TrUserData);
d_field_Conditions_prefix_set(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MatchSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0,
				  if F1 == undefined -> NewFValue;
				     true ->
					 merge_msg_MatchSet(F1, NewFValue,
							    TrUserData)
				  end,
				  F2, F3, F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Conditions_neighbor_set(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				TrUserData)
    when N < 57 ->
    d_field_Conditions_neighbor_set(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, TrUserData);
d_field_Conditions_neighbor_set(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MatchSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1,
				  if F2 == undefined -> NewFValue;
				     true ->
					 merge_msg_MatchSet(F2, NewFValue,
							    TrUserData)
				  end,
				  F3, F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Conditions_as_path_length(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  TrUserData)
    when N < 57 ->
    d_field_Conditions_as_path_length(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, TrUserData);
d_field_Conditions_as_path_length(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AsPathLength(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1, F2,
				  if F3 == undefined -> NewFValue;
				     true ->
					 merge_msg_AsPathLength(F3, NewFValue,
								TrUserData)
				  end,
				  F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Conditions_as_path_set(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			       TrUserData)
    when N < 57 ->
    d_field_Conditions_as_path_set(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, TrUserData);
d_field_Conditions_as_path_set(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MatchSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1, F2, F3,
				  if F4 == undefined -> NewFValue;
				     true ->
					 merge_msg_MatchSet(F4, NewFValue,
							    TrUserData)
				  end,
				  F5, F6, F7, F8, F9, TrUserData).


d_field_Conditions_community_set(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData)
    when N < 57 ->
    d_field_Conditions_community_set(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, TrUserData);
d_field_Conditions_community_set(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MatchSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1, F2, F3,
				  F4,
				  if F5 == undefined -> NewFValue;
				     true ->
					 merge_msg_MatchSet(F5, NewFValue,
							    TrUserData)
				  end,
				  F6, F7, F8, F9, TrUserData).


d_field_Conditions_ext_community_set(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     TrUserData)
    when N < 57 ->
    d_field_Conditions_ext_community_set(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, TrUserData);
d_field_Conditions_ext_community_set(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MatchSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1, F2, F3,
				  F4, F5,
				  if F6 == undefined -> NewFValue;
				     true ->
					 merge_msg_MatchSet(F6, NewFValue,
							    TrUserData)
				  end,
				  F7, F8, F9, TrUserData).


d_field_Conditions_rpki_result(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			       TrUserData)
    when N < 57 ->
    d_field_Conditions_rpki_result(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, TrUserData);
d_field_Conditions_rpki_result(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
			       TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Conditions(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, NewFValue, F8, F9, TrUserData).


d_field_Conditions_route_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData)
    when N < 57 ->
    d_field_Conditions_route_type(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, TrUserData);
d_field_Conditions_route_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
			      TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Conditions.RouteType'(Tmp),
    dfp_read_field_def_Conditions(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, NewFValue, F9, TrUserData).


d_field_Conditions_large_community_set(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, TrUserData)
    when N < 57 ->
    d_field_Conditions_large_community_set(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, TrUserData);
d_field_Conditions_large_community_set(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MatchSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8,
				  if F9 == undefined -> NewFValue;
				     true ->
					 merge_msg_MatchSet(F9, NewFValue,
							    TrUserData)
				  end,
				  TrUserData).


skip_varint_Conditions(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    skip_varint_Conditions(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, TrUserData);
skip_varint_Conditions(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Conditions(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData).


skip_length_delimited_Conditions(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_Conditions(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, TrUserData);
skip_length_delimited_Conditions(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Conditions(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData).


skip_group_Conditions(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		      F6, F7, F8, F9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Conditions(Rest, 0, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData).


skip_32_Conditions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Conditions(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData).


skip_64_Conditions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Conditions(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData).


d_msg_Statement(Bin, TrUserData) ->
    dfp_read_field_def_Statement(Bin, 0, 0,
				 id([], TrUserData), id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Statement(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Statement_name(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
dfp_read_field_def_Statement(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Statement_conditions(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_Statement(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Statement_actions(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_Statement(<<>>, 0, 0, F1, F2, F3,
			     _) ->
    #{name => F1, conditions => F2, actions => F3};
dfp_read_field_def_Statement(Other, Z1, Z2, F1, F2, F3,
			     TrUserData) ->
    dg_read_field_def_Statement(Other, Z1, Z2, F1, F2, F3,
				TrUserData).

dg_read_field_def_Statement(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Statement(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
dg_read_field_def_Statement(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Statement_name(Rest, 0, 0, F1, F2, F3,
				 TrUserData);
      18 ->
	  d_field_Statement_conditions(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      26 ->
	  d_field_Statement_actions(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Statement(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    1 ->
		skip_64_Statement(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_Statement(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    3 ->
		skip_group_Statement(Rest, Key bsr 3, 0, F1, F2, F3,
				     TrUserData);
	    5 ->
		skip_32_Statement(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_Statement(<<>>, 0, 0, F1, F2, F3,
			    _) ->
    #{name => F1, conditions => F2, actions => F3}.

d_field_Statement_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Statement_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, TrUserData);
d_field_Statement_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Statement(Rest2, 0, 0, NewFValue, F2,
				 F3, TrUserData).


d_field_Statement_conditions(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Statement_conditions(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_Statement_conditions(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Conditions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Statement(Rest2, 0, 0, F1,
				 if F2 == undefined -> NewFValue;
				    true ->
					merge_msg_Conditions(F2, NewFValue,
							     TrUserData)
				 end,
				 F3, TrUserData).


d_field_Statement_actions(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Statement_actions(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_Statement_actions(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Actions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Statement(Rest2, 0, 0, F1, F2,
				 if F3 == undefined -> NewFValue;
				    true ->
					merge_msg_Actions(F3, NewFValue,
							  TrUserData)
				 end,
				 TrUserData).


skip_varint_Statement(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    skip_varint_Statement(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
skip_varint_Statement(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    dfp_read_field_def_Statement(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_length_delimited_Statement(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Statement(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_Statement(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Statement(Rest2, 0, 0, F1, F2, F3,
				 TrUserData).


skip_group_Statement(Bin, FNum, Z2, F1, F2, F3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Statement(Rest, 0, Z2, F1, F2, F3,
				 TrUserData).


skip_32_Statement(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_Statement(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_64_Statement(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_Statement(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


d_msg_GetStatementResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetStatementResponse(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_GetStatementResponse(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_GetStatementResponse_statements(Rest, Z1, Z2,
					    F1, TrUserData);
dfp_read_field_def_GetStatementResponse(<<>>, 0, 0, F1,
					TrUserData) ->
    #{statements => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetStatementResponse(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_GetStatementResponse(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_GetStatementResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetStatementResponse(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetStatementResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetStatementResponse_statements(Rest, 0, 0, F1,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetStatementResponse(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_GetStatementResponse(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_GetStatementResponse(Rest, 0, 0,
							   F1, TrUserData);
	    3 ->
		skip_group_GetStatementResponse(Rest, Key bsr 3, 0, F1,
						TrUserData);
	    5 ->
		skip_32_GetStatementResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetStatementResponse(<<>>, 0, 0, F1,
				       TrUserData) ->
    #{statements => lists_reverse(F1, TrUserData)}.

d_field_GetStatementResponse_statements(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetStatementResponse_statements(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
d_field_GetStatementResponse_statements(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Statement(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetStatementResponse(Rest2, 0, 0,
					    cons(NewFValue, F1, TrUserData),
					    TrUserData).


skip_varint_GetStatementResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_GetStatementResponse(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_GetStatementResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetStatementResponse(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_GetStatementResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetStatementResponse(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetStatementResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetStatementResponse(Rest2, 0, 0, F1,
					    TrUserData).


skip_group_GetStatementResponse(Bin, FNum, Z2, F1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetStatementResponse(Rest, 0, Z2, F1,
					    TrUserData).


skip_32_GetStatementResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_GetStatementResponse(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_GetStatementResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_GetStatementResponse(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_UseMultiplePathsConfig(Bin, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsConfig(Bin, 0, 0,
					      id(false, TrUserData),
					      TrUserData).

dfp_read_field_def_UseMultiplePathsConfig(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1, TrUserData) ->
    d_field_UseMultiplePathsConfig_enabled(Rest, Z1, Z2, F1,
					   TrUserData);
dfp_read_field_def_UseMultiplePathsConfig(<<>>, 0, 0,
					  F1, _) ->
    #{enabled => F1};
dfp_read_field_def_UseMultiplePathsConfig(Other, Z1, Z2,
					  F1, TrUserData) ->
    dg_read_field_def_UseMultiplePathsConfig(Other, Z1, Z2,
					     F1, TrUserData).

dg_read_field_def_UseMultiplePathsConfig(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UseMultiplePathsConfig(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_UseMultiplePathsConfig(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UseMultiplePathsConfig_enabled(Rest, 0, 0, F1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UseMultiplePathsConfig(Rest, 0, 0, F1,
						   TrUserData);
	    1 ->
		skip_64_UseMultiplePathsConfig(Rest, 0, 0, F1,
					       TrUserData);
	    2 ->
		skip_length_delimited_UseMultiplePathsConfig(Rest, 0, 0,
							     F1, TrUserData);
	    3 ->
		skip_group_UseMultiplePathsConfig(Rest, Key bsr 3, 0,
						  F1, TrUserData);
	    5 ->
		skip_32_UseMultiplePathsConfig(Rest, 0, 0, F1,
					       TrUserData)
	  end
    end;
dg_read_field_def_UseMultiplePathsConfig(<<>>, 0, 0, F1,
					 _) ->
    #{enabled => F1}.

d_field_UseMultiplePathsConfig_enabled(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_UseMultiplePathsConfig_enabled(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
d_field_UseMultiplePathsConfig_enabled(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_UseMultiplePathsConfig(Rest, 0, 0,
					      NewFValue, TrUserData).


skip_varint_UseMultiplePathsConfig(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    skip_varint_UseMultiplePathsConfig(Rest, Z1, Z2, F1,
				       TrUserData);
skip_varint_UseMultiplePathsConfig(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsConfig(Rest, Z1, Z2,
					      F1, TrUserData).


skip_length_delimited_UseMultiplePathsConfig(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_UseMultiplePathsConfig(Rest,
						 N + 7, X bsl N + Acc, F1,
						 TrUserData);
skip_length_delimited_UseMultiplePathsConfig(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UseMultiplePathsConfig(Rest2, 0, 0,
					      F1, TrUserData).


skip_group_UseMultiplePathsConfig(Bin, FNum, Z2, F1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UseMultiplePathsConfig(Rest, 0, Z2,
					      F1, TrUserData).


skip_32_UseMultiplePathsConfig(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsConfig(Rest, Z1, Z2,
					      F1, TrUserData).


skip_64_UseMultiplePathsConfig(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsConfig(Rest, Z1, Z2,
					      F1, TrUserData).


d_msg_AddVrfResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddVrfResponse(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_AddVrfResponse(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_AddVrfResponse(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_AddVrfResponse(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_AddVrfResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddVrfResponse(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_AddVrfResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_AddVrfResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_AddVrfResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddVrfResponse(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_AddVrfResponse(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_AddVrfResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddVrfResponse(<<>>, 0, 0, _) -> #{}.

skip_varint_AddVrfResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_AddVrfResponse(Rest, Z1, Z2, TrUserData);
skip_varint_AddVrfResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddVrfResponse(Rest, Z1, Z2,
				      TrUserData).


skip_length_delimited_AddVrfResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddVrfResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_AddVrfResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddVrfResponse(Rest2, 0, 0,
				      TrUserData).


skip_group_AddVrfResponse(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddVrfResponse(Rest, 0, Z2,
				      TrUserData).


skip_32_AddVrfResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_AddVrfResponse(Rest, Z1, Z2,
				      TrUserData).


skip_64_AddVrfResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_AddVrfResponse(Rest, Z1, Z2,
				      TrUserData).


d_msg_PrefixLimit(Bin, TrUserData) ->
    dfp_read_field_def_PrefixLimit(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_PrefixLimit(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_PrefixLimit_family(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_PrefixLimit(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_PrefixLimit_max_prefixes(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
dfp_read_field_def_PrefixLimit(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_PrefixLimit_shutdown_threshold_pct(Rest, Z1, Z2,
					       F1, F2, F3, TrUserData);
dfp_read_field_def_PrefixLimit(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #{family => F1, max_prefixes => F2,
      shutdown_threshold_pct => F3};
dfp_read_field_def_PrefixLimit(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_PrefixLimit(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_PrefixLimit(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PrefixLimit(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_PrefixLimit(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PrefixLimit_family(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      16 ->
	  d_field_PrefixLimit_max_prefixes(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
      24 ->
	  d_field_PrefixLimit_shutdown_threshold_pct(Rest, 0, 0,
						     F1, F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PrefixLimit(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_PrefixLimit(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_PrefixLimit(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    3 ->
		skip_group_PrefixLimit(Rest, Key bsr 3, 0, F1, F2, F3,
				       TrUserData);
	    5 ->
		skip_32_PrefixLimit(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_PrefixLimit(<<>>, 0, 0, F1, F2, F3,
			      _) ->
    #{family => F1, max_prefixes => F2,
      shutdown_threshold_pct => F3}.

d_field_PrefixLimit_family(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_PrefixLimit_family(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_PrefixLimit_family(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PrefixLimit(Rest, 0, 0, NewFValue,
				   F2, F3, TrUserData).


d_field_PrefixLimit_max_prefixes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_PrefixLimit_max_prefixes(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_PrefixLimit_max_prefixes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PrefixLimit(Rest, 0, 0, F1,
				   NewFValue, F3, TrUserData).


d_field_PrefixLimit_shutdown_threshold_pct(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_PrefixLimit_shutdown_threshold_pct(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3,
					       TrUserData);
d_field_PrefixLimit_shutdown_threshold_pct(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PrefixLimit(Rest, 0, 0, F1, F2,
				   NewFValue, TrUserData).


skip_varint_PrefixLimit(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_PrefixLimit(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_PrefixLimit(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_PrefixLimit(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_PrefixLimit(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_PrefixLimit(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_PrefixLimit(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PrefixLimit(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_group_PrefixLimit(Bin, FNum, Z2, F1, F2, F3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PrefixLimit(Rest, 0, Z2, F1, F2, F3,
				   TrUserData).


skip_32_PrefixLimit(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_PrefixLimit(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_PrefixLimit(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_PrefixLimit(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_PeerConf(Bin, TrUserData) ->
    dfp_read_field_def_PeerConf(Bin, 0, 0,
				id([], TrUserData), id([], TrUserData),
				id(0, TrUserData), id([], TrUserData),
				id(0, TrUserData), id([], TrUserData),
				id(0, TrUserData), id('NONE', TrUserData),
				id(false, TrUserData), id(0, TrUserData),
				id([], TrUserData), id([], TrUserData),
				id([], TrUserData), id([], TrUserData),
				id([], TrUserData), id([], TrUserData),
				id([], TrUserData), id(0, TrUserData),
				id(false, TrUserData), TrUserData).

dfp_read_field_def_PeerConf(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_auth_password(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_description(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<24, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_local_as(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_neighbor_address(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      TrUserData);
dfp_read_field_def_PeerConf(<<40, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_peer_as(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_peer_group(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<56, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_peer_type(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<64, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_remove_private_as(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       TrUserData);
dfp_read_field_def_PeerConf(<<72, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_route_flap_damping(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, TrUserData);
dfp_read_field_def_PeerConf(<<80, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_send_community(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19,
				    TrUserData);
dfp_read_field_def_PeerConf(<<90, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_remote_cap(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<98, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_PeerConf_local_cap(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<106, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<114, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_prefix_limits(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<122, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_local_address(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<130, 1, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_neighbor_interface(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, TrUserData);
dfp_read_field_def_PeerConf(<<138, 1, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_vrf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			 F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<144, 1, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_allow_own_as(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_PeerConf(<<152, 1, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    d_field_PeerConf_replace_peer_as(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19,
				     TrUserData);
dfp_read_field_def_PeerConf(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData) ->
    #{auth_password => F1, description => F2,
      local_as => F3, neighbor_address => F4, peer_as => F5,
      peer_group => F6, peer_type => F7,
      remove_private_as => F8, route_flap_damping => F9,
      send_community => F10,
      remote_cap => lists_reverse(F11, TrUserData),
      local_cap => lists_reverse(F12, TrUserData), id => F13,
      prefix_limits => lists_reverse(F14, TrUserData),
      local_address => F15, neighbor_interface => F16,
      vrf => F17, allow_own_as => F18,
      replace_peer_as => F19};
dfp_read_field_def_PeerConf(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			    F15, F16, F17, F18, F19, TrUserData) ->
    dg_read_field_def_PeerConf(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			       F15, F16, F17, F18, F19, TrUserData).

dg_read_field_def_PeerConf(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PeerConf(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData);
dg_read_field_def_PeerConf(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19,
			   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PeerConf_auth_password(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19,
					 TrUserData);
      18 ->
	  d_field_PeerConf_description(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19,
				       TrUserData);
      24 ->
	  d_field_PeerConf_local_as(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, TrUserData);
      34 ->
	  d_field_PeerConf_neighbor_address(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, TrUserData);
      40 ->
	  d_field_PeerConf_peer_as(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, TrUserData);
      50 ->
	  d_field_PeerConf_peer_group(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, TrUserData);
      56 ->
	  d_field_PeerConf_peer_type(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, TrUserData);
      64 ->
	  d_field_PeerConf_remove_private_as(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, TrUserData);
      72 ->
	  d_field_PeerConf_route_flap_damping(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, TrUserData);
      80 ->
	  d_field_PeerConf_send_community(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  TrUserData);
      90 ->
	  d_field_PeerConf_remote_cap(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, TrUserData);
      98 ->
	  d_field_PeerConf_local_cap(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, TrUserData);
      106 ->
	  d_field_PeerConf_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			      F17, F18, F19, TrUserData);
      114 ->
	  d_field_PeerConf_prefix_limits(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19,
					 TrUserData);
      122 ->
	  d_field_PeerConf_local_address(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19,
					 TrUserData);
      130 ->
	  d_field_PeerConf_neighbor_interface(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, TrUserData);
      138 ->
	  d_field_PeerConf_vrf(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			       F17, F18, F19, TrUserData);
      144 ->
	  d_field_PeerConf_allow_own_as(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19,
					TrUserData);
      152 ->
	  d_field_PeerConf_replace_peer_as(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PeerConf(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16, F17, F18, F19, TrUserData);
	    1 ->
		skip_64_PeerConf(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
				 F18, F19, TrUserData);
	    2 ->
		skip_length_delimited_PeerConf(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, TrUserData);
	    3 ->
		skip_group_PeerConf(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, TrUserData);
	    5 ->
		skip_32_PeerConf(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
				 F18, F19, TrUserData)
	  end
    end;
dg_read_field_def_PeerConf(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			   F16, F17, F18, F19, TrUserData) ->
    #{auth_password => F1, description => F2,
      local_as => F3, neighbor_address => F4, peer_as => F5,
      peer_group => F6, peer_type => F7,
      remove_private_as => F8, route_flap_damping => F9,
      send_community => F10,
      remote_cap => lists_reverse(F11, TrUserData),
      local_cap => lists_reverse(F12, TrUserData), id => F13,
      prefix_limits => lists_reverse(F14, TrUserData),
      local_address => F15, neighbor_interface => F16,
      vrf => F17, allow_own_as => F18,
      replace_peer_as => F19}.

d_field_PeerConf_auth_password(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData)
    when N < 57 ->
    d_field_PeerConf_auth_password(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, TrUserData);
d_field_PeerConf_auth_password(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_description(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19,
			     TrUserData)
    when N < 57 ->
    d_field_PeerConf_description(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19,
				 TrUserData);
d_field_PeerConf_description(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, NewFValue,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_local_as(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_local_as(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, TrUserData);
d_field_PeerConf_local_as(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2,
				NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19,
				TrUserData).


d_field_PeerConf_neighbor_address(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_neighbor_address(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, TrUserData);
d_field_PeerConf_neighbor_address(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3,
				NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				F13, F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_peer_as(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_peer_as(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, TrUserData);
d_field_PeerConf_peer_as(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				NewFValue, F6, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_peer_group(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData)
    when N < 57 ->
    d_field_PeerConf_peer_group(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19,
				TrUserData);
d_field_PeerConf_peer_group(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, NewFValue, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_peer_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_peer_type(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData);
d_field_PeerConf_peer_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				F5, F6, NewFValue, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_remove_private_as(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_remove_private_as(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, TrUserData);
d_field_PeerConf_remove_private_as(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_PeerConf.RemovePrivateAs'(Tmp),
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, NewFValue, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_route_flap_damping(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_route_flap_damping(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, TrUserData);
d_field_PeerConf_route_flap_damping(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, NewFValue, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_send_community(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				TrUserData)
    when N < 57 ->
    d_field_PeerConf_send_community(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, TrUserData);
d_field_PeerConf_send_community(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, NewFValue, F11, F12, F13,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_remote_cap(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData)
    when N < 57 ->
    d_field_PeerConf_remote_cap(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19,
				TrUserData);
d_field_PeerConf_remote_cap(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19,
			    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10,
				cons(NewFValue, F11, TrUserData), F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_local_cap(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_local_cap(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData);
d_field_PeerConf_local_cap(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19,
			   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11,
				cons(NewFValue, F12, TrUserData), F13, F14, F15,
				F16, F17, F18, F19, TrUserData).


d_field_PeerConf_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_id(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData);
d_field_PeerConf_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, _,
		    F14, F15, F16, F17, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, NewFValue,
				F14, F15, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_prefix_limits(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData)
    when N < 57 ->
    d_field_PeerConf_prefix_limits(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, TrUserData);
d_field_PeerConf_prefix_limits(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PrefixLimit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13,
				cons(NewFValue, F14, TrUserData), F15, F16, F17,
				F18, F19, TrUserData).


d_field_PeerConf_local_address(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData)
    when N < 57 ->
    d_field_PeerConf_local_address(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, TrUserData);
d_field_PeerConf_local_address(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, _, F16, F17, F18, F19,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				NewFValue, F16, F17, F18, F19, TrUserData).


d_field_PeerConf_neighbor_interface(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_neighbor_interface(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, TrUserData);
d_field_PeerConf_neighbor_interface(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, _, F17, F18,
				    F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, NewFValue, F17, F18, F19, TrUserData).


d_field_PeerConf_vrf(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_vrf(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			 F15, F16, F17, F18, F19, TrUserData);
d_field_PeerConf_vrf(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, _, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, NewFValue, F18, F19, TrUserData).


d_field_PeerConf_allow_own_as(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19,
			      TrUserData)
    when N < 57 ->
    d_field_PeerConf_allow_own_as(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, TrUserData);
d_field_PeerConf_allow_own_as(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, _, F19,
			      TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, NewFValue, F19, TrUserData).


d_field_PeerConf_replace_peer_as(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, TrUserData)
    when N < 57 ->
    d_field_PeerConf_replace_peer_as(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, TrUserData);
d_field_PeerConf_replace_peer_as(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18, _,
				 TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_PeerConf(Rest, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, NewFValue, TrUserData).


skip_varint_PeerConf(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, F17, F18, F19, TrUserData) ->
    skip_varint_PeerConf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			 F18, F19, TrUserData);
skip_varint_PeerConf(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, F17, F18, F19, TrUserData) ->
    dfp_read_field_def_PeerConf(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData).


skip_length_delimited_PeerConf(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData)
    when N < 57 ->
    skip_length_delimited_PeerConf(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, TrUserData);
skip_length_delimited_PeerConf(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PeerConf(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData).


skip_group_PeerConf(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
		    F18, F19, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PeerConf(Rest, 0, Z2, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData).


skip_32_PeerConf(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		 F15, F16, F17, F18, F19, TrUserData) ->
    dfp_read_field_def_PeerConf(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData).


skip_64_PeerConf(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		 F15, F16, F17, F18, F19, TrUserData) ->
    dfp_read_field_def_PeerConf(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, TrUserData).


d_msg_Policy(Bin, TrUserData) ->
    dfp_read_field_def_Policy(Bin, 0, 0, id([], TrUserData),
			      id([], TrUserData), TrUserData).

dfp_read_field_def_Policy(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_Policy_name(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Policy(<<18, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_Policy_statements(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_Policy(<<>>, 0, 0, F1, F2,
			  TrUserData) ->
    #{name => F1,
      statements => lists_reverse(F2, TrUserData)};
dfp_read_field_def_Policy(Other, Z1, Z2, F1, F2,
			  TrUserData) ->
    dg_read_field_def_Policy(Other, Z1, Z2, F1, F2,
			     TrUserData).

dg_read_field_def_Policy(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Policy(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
dg_read_field_def_Policy(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Policy_name(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Policy_statements(Rest, 0, 0, F1, F2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Policy(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Policy(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Policy(Rest, 0, 0, F1, F2,
					     TrUserData);
	    3 ->
		skip_group_Policy(Rest, Key bsr 3, 0, F1, F2,
				  TrUserData);
	    5 -> skip_32_Policy(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Policy(<<>>, 0, 0, F1, F2,
			 TrUserData) ->
    #{name => F1,
      statements => lists_reverse(F2, TrUserData)}.

d_field_Policy_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_Policy_name(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_Policy_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Policy(Rest2, 0, 0, NewFValue, F2,
			      TrUserData).


d_field_Policy_statements(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Policy_statements(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_Policy_statements(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Statement(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Policy(Rest2, 0, 0, F1,
			      cons(NewFValue, F2, TrUserData), TrUserData).


skip_varint_Policy(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    skip_varint_Policy(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Policy(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    dfp_read_field_def_Policy(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_length_delimited_Policy(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Policy(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
skip_length_delimited_Policy(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Policy(Rest2, 0, 0, F1, F2,
			      TrUserData).


skip_group_Policy(Bin, FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Policy(Rest, 0, Z2, F1, F2,
			      TrUserData).


skip_32_Policy(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_Policy(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_64_Policy(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_Policy(Rest, Z1, Z2, F1, F2,
			      TrUserData).


d_msg_PolicyAssignment(Bin, TrUserData) ->
    dfp_read_field_def_PolicyAssignment(Bin, 0, 0,
					id('IN', TrUserData),
					id('GLOBAL', TrUserData),
					id([], TrUserData), id([], TrUserData),
					id('NONE', TrUserData), TrUserData).

dfp_read_field_def_PolicyAssignment(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_PolicyAssignment_type(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_PolicyAssignment(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_PolicyAssignment_resource(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_PolicyAssignment(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_PolicyAssignment_name(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_PolicyAssignment(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_PolicyAssignment_policies(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_PolicyAssignment(<<40, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_PolicyAssignment_default(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_PolicyAssignment(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, TrUserData) ->
    #{type => F1, resource => F2, name => F3,
      policies => lists_reverse(F4, TrUserData),
      default => F5};
dfp_read_field_def_PolicyAssignment(Other, Z1, Z2, F1,
				    F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_PolicyAssignment(Other, Z1, Z2, F1,
				       F2, F3, F4, F5, TrUserData).

dg_read_field_def_PolicyAssignment(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PolicyAssignment(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
dg_read_field_def_PolicyAssignment(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PolicyAssignment_type(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      16 ->
	  d_field_PolicyAssignment_resource(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      26 ->
	  d_field_PolicyAssignment_name(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      34 ->
	  d_field_PolicyAssignment_policies(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      40 ->
	  d_field_PolicyAssignment_default(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PolicyAssignment(Rest, 0, 0, F1, F2, F3, F4,
					     F5, TrUserData);
	    1 ->
		skip_64_PolicyAssignment(Rest, 0, 0, F1, F2, F3, F4, F5,
					 TrUserData);
	    2 ->
		skip_length_delimited_PolicyAssignment(Rest, 0, 0, F1,
						       F2, F3, F4, F5,
						       TrUserData);
	    3 ->
		skip_group_PolicyAssignment(Rest, Key bsr 3, 0, F1, F2,
					    F3, F4, F5, TrUserData);
	    5 ->
		skip_32_PolicyAssignment(Rest, 0, 0, F1, F2, F3, F4, F5,
					 TrUserData)
	  end
    end;
dg_read_field_def_PolicyAssignment(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, TrUserData) ->
    #{type => F1, resource => F2, name => F3,
      policies => lists_reverse(F4, TrUserData),
      default => F5}.

d_field_PolicyAssignment_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_PolicyAssignment_type(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_PolicyAssignment_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_PolicyType(Tmp),
    dfp_read_field_def_PolicyAssignment(Rest, 0, 0,
					NewFValue, F2, F3, F4, F5, TrUserData).


d_field_PolicyAssignment_resource(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_PolicyAssignment_resource(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_PolicyAssignment_resource(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_PolicyAssignment(Rest, 0, 0, F1,
					NewFValue, F3, F4, F5, TrUserData).


d_field_PolicyAssignment_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_PolicyAssignment_name(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_PolicyAssignment_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PolicyAssignment(Rest2, 0, 0, F1, F2,
					NewFValue, F4, F5, TrUserData).


d_field_PolicyAssignment_policies(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_PolicyAssignment_policies(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_PolicyAssignment_policies(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Policy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PolicyAssignment(Rest2, 0, 0, F1, F2,
					F3, cons(NewFValue, F4, TrUserData), F5,
					TrUserData).


d_field_PolicyAssignment_default(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_PolicyAssignment_default(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_PolicyAssignment_default(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_RouteAction(Tmp),
    dfp_read_field_def_PolicyAssignment(Rest, 0, 0, F1, F2,
					F3, F4, NewFValue, TrUserData).


skip_varint_PolicyAssignment(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_PolicyAssignment(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
skip_varint_PolicyAssignment(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_PolicyAssignment(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).


skip_length_delimited_PolicyAssignment(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_PolicyAssignment(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
skip_length_delimited_PolicyAssignment(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PolicyAssignment(Rest2, 0, 0, F1, F2,
					F3, F4, F5, TrUserData).


skip_group_PolicyAssignment(Bin, FNum, Z2, F1, F2, F3,
			    F4, F5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PolicyAssignment(Rest, 0, Z2, F1, F2,
					F3, F4, F5, TrUserData).


skip_32_PolicyAssignment(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_PolicyAssignment(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).


skip_64_PolicyAssignment(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_PolicyAssignment(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).


d_msg_AddPolicyAssignmentRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentRequest(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_AddPolicyAssignmentRequest(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, TrUserData) ->
    d_field_AddPolicyAssignmentRequest_assignment(Rest, Z1,
						  Z2, F1, TrUserData);
dfp_read_field_def_AddPolicyAssignmentRequest(<<>>, 0,
					      0, F1, _) ->
    #{assignment => F1};
dfp_read_field_def_AddPolicyAssignmentRequest(Other, Z1,
					      Z2, F1, TrUserData) ->
    dg_read_field_def_AddPolicyAssignmentRequest(Other, Z1,
						 Z2, F1, TrUserData).

dg_read_field_def_AddPolicyAssignmentRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPolicyAssignmentRequest(Rest,
						 N + 7, X bsl N + Acc, F1,
						 TrUserData);
dg_read_field_def_AddPolicyAssignmentRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddPolicyAssignmentRequest_assignment(Rest, 0,
							0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPolicyAssignmentRequest(Rest, 0, 0, F1,
						       TrUserData);
	    1 ->
		skip_64_AddPolicyAssignmentRequest(Rest, 0, 0, F1,
						   TrUserData);
	    2 ->
		skip_length_delimited_AddPolicyAssignmentRequest(Rest,
								 0, 0, F1,
								 TrUserData);
	    3 ->
		skip_group_AddPolicyAssignmentRequest(Rest, Key bsr 3,
						      0, F1, TrUserData);
	    5 ->
		skip_32_AddPolicyAssignmentRequest(Rest, 0, 0, F1,
						   TrUserData)
	  end
    end;
dg_read_field_def_AddPolicyAssignmentRequest(<<>>, 0, 0,
					     F1, _) ->
    #{assignment => F1}.

d_field_AddPolicyAssignmentRequest_assignment(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_AddPolicyAssignmentRequest_assignment(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
d_field_AddPolicyAssignmentRequest_assignment(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AddPolicyAssignmentRequest(Rest2, 0,
						  0,
						  if F1 == undefined ->
							 NewFValue;
						     true ->
							 merge_msg_PolicyAssignment(F1,
										    NewFValue,
										    TrUserData)
						  end,
						  TrUserData).


skip_varint_AddPolicyAssignmentRequest(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    skip_varint_AddPolicyAssignmentRequest(Rest, Z1, Z2, F1,
					   TrUserData);
skip_varint_AddPolicyAssignmentRequest(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentRequest(Rest, Z1,
						  Z2, F1, TrUserData).


skip_length_delimited_AddPolicyAssignmentRequest(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPolicyAssignmentRequest(Rest,
						     N + 7, X bsl N + Acc, F1,
						     TrUserData);
skip_length_delimited_AddPolicyAssignmentRequest(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPolicyAssignmentRequest(Rest2, 0,
						  0, F1, TrUserData).


skip_group_AddPolicyAssignmentRequest(Bin, FNum, Z2, F1,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPolicyAssignmentRequest(Rest, 0,
						  Z2, F1, TrUserData).


skip_32_AddPolicyAssignmentRequest(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentRequest(Rest, Z1,
						  Z2, F1, TrUserData).


skip_64_AddPolicyAssignmentRequest(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentRequest(Rest, Z1,
						  Z2, F1, TrUserData).


d_msg_GetPolicyResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetPolicyResponse(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_GetPolicyResponse(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_GetPolicyResponse_policies(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_GetPolicyResponse(<<>>, 0, 0, F1,
				     TrUserData) ->
    #{policies => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetPolicyResponse(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_GetPolicyResponse(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_GetPolicyResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetPolicyResponse(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetPolicyResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetPolicyResponse_policies(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetPolicyResponse(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_GetPolicyResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetPolicyResponse(Rest, 0, 0, F1,
							TrUserData);
	    3 ->
		skip_group_GetPolicyResponse(Rest, Key bsr 3, 0, F1,
					     TrUserData);
	    5 ->
		skip_32_GetPolicyResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetPolicyResponse(<<>>, 0, 0, F1,
				    TrUserData) ->
    #{policies => lists_reverse(F1, TrUserData)}.

d_field_GetPolicyResponse_policies(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetPolicyResponse_policies(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_GetPolicyResponse_policies(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Policy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetPolicyResponse(Rest2, 0, 0,
					 cons(NewFValue, F1, TrUserData),
					 TrUserData).


skip_varint_GetPolicyResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_GetPolicyResponse(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_GetPolicyResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyResponse(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_GetPolicyResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetPolicyResponse(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetPolicyResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetPolicyResponse(Rest2, 0, 0, F1,
					 TrUserData).


skip_group_GetPolicyResponse(Bin, FNum, Z2, F1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetPolicyResponse(Rest, 0, Z2, F1,
					 TrUserData).


skip_32_GetPolicyResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GetPolicyResponse(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_GetPolicyResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GetPolicyResponse(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_RouteSelectionOptionsConfig(Bin, TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsConfig(Bin, 0,
						   0, id(false, TrUserData),
						   id(false, TrUserData),
						   id(false, TrUserData),
						   id(false, TrUserData),
						   id(false, TrUserData),
						   id(false, TrUserData),
						   TrUserData).

dfp_read_field_def_RouteSelectionOptionsConfig(<<8,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    d_field_RouteSelectionOptionsConfig_always_compare_med(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6,
							   TrUserData);
dfp_read_field_def_RouteSelectionOptionsConfig(<<16,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    d_field_RouteSelectionOptionsConfig_ignore_as_path_length(Rest,
							      Z1, Z2, F1, F2,
							      F3, F4, F5, F6,
							      TrUserData);
dfp_read_field_def_RouteSelectionOptionsConfig(<<24,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    d_field_RouteSelectionOptionsConfig_external_compare_router_id(Rest,
								   Z1, Z2, F1,
								   F2, F3, F4,
								   F5, F6,
								   TrUserData);
dfp_read_field_def_RouteSelectionOptionsConfig(<<32,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    d_field_RouteSelectionOptionsConfig_advertise_inactive_routes(Rest,
								  Z1, Z2, F1,
								  F2, F3, F4,
								  F5, F6,
								  TrUserData);
dfp_read_field_def_RouteSelectionOptionsConfig(<<40,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    d_field_RouteSelectionOptionsConfig_enable_aigp(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, TrUserData);
dfp_read_field_def_RouteSelectionOptionsConfig(<<48,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    d_field_RouteSelectionOptionsConfig_ignore_next_hop_igp_metric(Rest,
								   Z1, Z2, F1,
								   F2, F3, F4,
								   F5, F6,
								   TrUserData);
dfp_read_field_def_RouteSelectionOptionsConfig(<<>>, 0,
					       0, F1, F2, F3, F4, F5, F6, _) ->
    #{always_compare_med => F1, ignore_as_path_length => F2,
      external_compare_router_id => F3,
      advertise_inactive_routes => F4, enable_aigp => F5,
      ignore_next_hop_igp_metric => F6};
dfp_read_field_def_RouteSelectionOptionsConfig(Other,
					       Z1, Z2, F1, F2, F3, F4, F5, F6,
					       TrUserData) ->
    dg_read_field_def_RouteSelectionOptionsConfig(Other, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  TrUserData).

dg_read_field_def_RouteSelectionOptionsConfig(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteSelectionOptionsConfig(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, TrUserData);
dg_read_field_def_RouteSelectionOptionsConfig(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RouteSelectionOptionsConfig_always_compare_med(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 TrUserData);
      16 ->
	  d_field_RouteSelectionOptionsConfig_ignore_as_path_length(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5, F6,
								    TrUserData);
      24 ->
	  d_field_RouteSelectionOptionsConfig_external_compare_router_id(Rest,
									 0, 0,
									 F1, F2,
									 F3, F4,
									 F5, F6,
									 TrUserData);
      32 ->
	  d_field_RouteSelectionOptionsConfig_advertise_inactive_routes(Rest,
									0, 0,
									F1, F2,
									F3, F4,
									F5, F6,
									TrUserData);
      40 ->
	  d_field_RouteSelectionOptionsConfig_enable_aigp(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, TrUserData);
      48 ->
	  d_field_RouteSelectionOptionsConfig_ignore_next_hop_igp_metric(Rest,
									 0, 0,
									 F1, F2,
									 F3, F4,
									 F5, F6,
									 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteSelectionOptionsConfig(Rest, 0, 0, F1,
							F2, F3, F4, F5, F6,
							TrUserData);
	    1 ->
		skip_64_RouteSelectionOptionsConfig(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, TrUserData);
	    2 ->
		skip_length_delimited_RouteSelectionOptionsConfig(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  F6,
								  TrUserData);
	    3 ->
		skip_group_RouteSelectionOptionsConfig(Rest, Key bsr 3,
						       0, F1, F2, F3, F4, F5,
						       F6, TrUserData);
	    5 ->
		skip_32_RouteSelectionOptionsConfig(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, TrUserData)
	  end
    end;
dg_read_field_def_RouteSelectionOptionsConfig(<<>>, 0,
					      0, F1, F2, F3, F4, F5, F6, _) ->
    #{always_compare_med => F1, ignore_as_path_length => F2,
      external_compare_router_id => F3,
      advertise_inactive_routes => F4, enable_aigp => F5,
      ignore_next_hop_igp_metric => F6}.

d_field_RouteSelectionOptionsConfig_always_compare_med(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsConfig_always_compare_med(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, TrUserData);
d_field_RouteSelectionOptionsConfig_always_compare_med(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F2, F3, F4,
						       F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   0, NewFValue, F2, F3, F4, F5,
						   F6, TrUserData).


d_field_RouteSelectionOptionsConfig_ignore_as_path_length(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6,
							  TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsConfig_ignore_as_path_length(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      F6, TrUserData);
d_field_RouteSelectionOptionsConfig_ignore_as_path_length(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, _, F3, F4,
							  F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   0, F1, NewFValue, F3, F4, F5,
						   F6, TrUserData).


d_field_RouteSelectionOptionsConfig_external_compare_router_id(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5, F6,
							       TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsConfig_external_compare_router_id(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F1, F2, F3,
								   F4, F5, F6,
								   TrUserData);
d_field_RouteSelectionOptionsConfig_external_compare_router_id(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       _, F4, F5, F6,
							       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   0, F1, F2, NewFValue, F4, F5,
						   F6, TrUserData).


d_field_RouteSelectionOptionsConfig_advertise_inactive_routes(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2,
							      F3, F4, F5, F6,
							      TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsConfig_advertise_inactive_routes(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F1, F2, F3,
								  F4, F5, F6,
								  TrUserData);
d_field_RouteSelectionOptionsConfig_advertise_inactive_routes(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2,
							      F3, _, F5, F6,
							      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   0, F1, F2, F3, NewFValue, F5,
						   F6, TrUserData).


d_field_RouteSelectionOptionsConfig_enable_aigp(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsConfig_enable_aigp(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6,
						    TrUserData);
d_field_RouteSelectionOptionsConfig_enable_aigp(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, _, F6,
						TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   0, F1, F2, F3, F4, NewFValue,
						   F6, TrUserData).


d_field_RouteSelectionOptionsConfig_ignore_next_hop_igp_metric(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5, F6,
							       TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsConfig_ignore_next_hop_igp_metric(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F1, F2, F3,
								   F4, F5, F6,
								   TrUserData);
d_field_RouteSelectionOptionsConfig_ignore_next_hop_igp_metric(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5, _,
							       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   0, F1, F2, F3, F4, F5,
						   NewFValue, TrUserData).


skip_varint_RouteSelectionOptionsConfig(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6,
					TrUserData) ->
    skip_varint_RouteSelectionOptionsConfig(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, TrUserData);
skip_varint_RouteSelectionOptionsConfig(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6,
					TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData).


skip_length_delimited_RouteSelectionOptionsConfig(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteSelectionOptionsConfig(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6,
						      TrUserData);
skip_length_delimited_RouteSelectionOptionsConfig(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest2, 0,
						   0, F1, F2, F3, F4, F5, F6,
						   TrUserData).


skip_group_RouteSelectionOptionsConfig(Bin, FNum, Z2,
				       F1, F2, F3, F4, F5, F6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, 0,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData).


skip_32_RouteSelectionOptionsConfig(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData).


skip_64_RouteSelectionOptionsConfig(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsConfig(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData).


d_msg_ApplyPolicy(Bin, TrUserData) ->
    dfp_read_field_def_ApplyPolicy(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ApplyPolicy(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_ApplyPolicy_in_policy(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_ApplyPolicy(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_ApplyPolicy_export_policy(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_ApplyPolicy(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_ApplyPolicy_import_policy(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_ApplyPolicy(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #{in_policy => F1, export_policy => F2,
      import_policy => F3};
dfp_read_field_def_ApplyPolicy(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_ApplyPolicy(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_ApplyPolicy(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ApplyPolicy(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_ApplyPolicy(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ApplyPolicy_in_policy(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      18 ->
	  d_field_ApplyPolicy_export_policy(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      26 ->
	  d_field_ApplyPolicy_import_policy(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ApplyPolicy(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_ApplyPolicy(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_ApplyPolicy(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    3 ->
		skip_group_ApplyPolicy(Rest, Key bsr 3, 0, F1, F2, F3,
				       TrUserData);
	    5 ->
		skip_32_ApplyPolicy(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_ApplyPolicy(<<>>, 0, 0, F1, F2, F3,
			      _) ->
    #{in_policy => F1, export_policy => F2,
      import_policy => F3}.

d_field_ApplyPolicy_in_policy(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ApplyPolicy_in_policy(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ApplyPolicy_in_policy(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ApplyPolicy(Rest2, 0, 0,
				   if F1 == undefined -> NewFValue;
				      true ->
					  merge_msg_PolicyAssignment(F1,
								     NewFValue,
								     TrUserData)
				   end,
				   F2, F3, TrUserData).


d_field_ApplyPolicy_export_policy(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ApplyPolicy_export_policy(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ApplyPolicy_export_policy(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ApplyPolicy(Rest2, 0, 0, F1,
				   if F2 == undefined -> NewFValue;
				      true ->
					  merge_msg_PolicyAssignment(F2,
								     NewFValue,
								     TrUserData)
				   end,
				   F3, TrUserData).


d_field_ApplyPolicy_import_policy(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ApplyPolicy_import_policy(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ApplyPolicy_import_policy(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ApplyPolicy(Rest2, 0, 0, F1, F2,
				   if F3 == undefined -> NewFValue;
				      true ->
					  merge_msg_PolicyAssignment(F3,
								     NewFValue,
								     TrUserData)
				   end,
				   TrUserData).


skip_varint_ApplyPolicy(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ApplyPolicy(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_ApplyPolicy(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ApplyPolicy(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_ApplyPolicy(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ApplyPolicy(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_ApplyPolicy(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ApplyPolicy(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_group_ApplyPolicy(Bin, FNum, Z2, F1, F2, F3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ApplyPolicy(Rest, 0, Z2, F1, F2, F3,
				   TrUserData).


skip_32_ApplyPolicy(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_ApplyPolicy(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_ApplyPolicy(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_ApplyPolicy(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_AddPolicyAssignmentResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentResponse(Bin, 0,
						   0, TrUserData).

dfp_read_field_def_AddPolicyAssignmentResponse(<<>>, 0,
					       0, _) ->
    #{};
dfp_read_field_def_AddPolicyAssignmentResponse(Other,
					       Z1, Z2, TrUserData) ->
    dg_read_field_def_AddPolicyAssignmentResponse(Other, Z1,
						  Z2, TrUserData).

dg_read_field_def_AddPolicyAssignmentResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPolicyAssignmentResponse(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
dg_read_field_def_AddPolicyAssignmentResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AddPolicyAssignmentResponse(Rest, 0, 0,
						  TrUserData);
      1 ->
	  skip_64_AddPolicyAssignmentResponse(Rest, 0, 0,
					      TrUserData);
      2 ->
	  skip_length_delimited_AddPolicyAssignmentResponse(Rest,
							    0, 0, TrUserData);
      3 ->
	  skip_group_AddPolicyAssignmentResponse(Rest, Key bsr 3,
						 0, TrUserData);
      5 ->
	  skip_32_AddPolicyAssignmentResponse(Rest, 0, 0,
					      TrUserData)
    end;
dg_read_field_def_AddPolicyAssignmentResponse(<<>>, 0,
					      0, _) ->
    #{}.

skip_varint_AddPolicyAssignmentResponse(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    skip_varint_AddPolicyAssignmentResponse(Rest, Z1, Z2,
					    TrUserData);
skip_varint_AddPolicyAssignmentResponse(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentResponse(Rest, Z1,
						   Z2, TrUserData).


skip_length_delimited_AddPolicyAssignmentResponse(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPolicyAssignmentResponse(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
skip_length_delimited_AddPolicyAssignmentResponse(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPolicyAssignmentResponse(Rest2, 0,
						   0, TrUserData).


skip_group_AddPolicyAssignmentResponse(Bin, FNum, Z2,
				       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPolicyAssignmentResponse(Rest, 0,
						   Z2, TrUserData).


skip_32_AddPolicyAssignmentResponse(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentResponse(Rest, Z1,
						   Z2, TrUserData).


skip_64_AddPolicyAssignmentResponse(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddPolicyAssignmentResponse(Rest, Z1,
						   Z2, TrUserData).


d_msg_Transport(Bin, TrUserData) ->
    dfp_read_field_def_Transport(Bin, 0, 0,
				 id([], TrUserData), id(0, TrUserData),
				 id(false, TrUserData), id(false, TrUserData),
				 id([], TrUserData), id(0, TrUserData),
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_Transport(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_local_address(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_local_port(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_mtu_discovery(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_passive_mode(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_remote_address(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_remote_port(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<56, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Transport_tcp_mss(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_Transport(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, _) ->
    #{local_address => F1, local_port => F2,
      mtu_discovery => F3, passive_mode => F4,
      remote_address => F5, remote_port => F6, tcp_mss => F7};
dfp_read_field_def_Transport(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_Transport(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData).

dg_read_field_def_Transport(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Transport(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
dg_read_field_def_Transport(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Transport_local_address(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, TrUserData);
      16 ->
	  d_field_Transport_local_port(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      24 ->
	  d_field_Transport_mtu_discovery(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, TrUserData);
      32 ->
	  d_field_Transport_passive_mode(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, TrUserData);
      42 ->
	  d_field_Transport_remote_address(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, TrUserData);
      48 ->
	  d_field_Transport_remote_port(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, TrUserData);
      56 ->
	  d_field_Transport_tcp_mss(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Transport(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, TrUserData);
	    1 ->
		skip_64_Transport(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, TrUserData);
	    2 ->
		skip_length_delimited_Transport(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, TrUserData);
	    3 ->
		skip_group_Transport(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
	    5 ->
		skip_32_Transport(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, TrUserData)
	  end
    end;
dg_read_field_def_Transport(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, _) ->
    #{local_address => F1, local_port => F2,
      mtu_discovery => F3, passive_mode => F4,
      remote_address => F5, remote_port => F6, tcp_mss => F7}.

d_field_Transport_local_address(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_local_address(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
d_field_Transport_local_address(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Transport(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, TrUserData).


d_field_Transport_local_port(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_local_port(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Transport_local_port(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Transport(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, TrUserData).


d_field_Transport_mtu_discovery(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_mtu_discovery(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
d_field_Transport_mtu_discovery(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5, F6, F7,
				TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Transport(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, TrUserData).


d_field_Transport_passive_mode(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_passive_mode(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
d_field_Transport_passive_mode(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Transport(Rest, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, F7, TrUserData).


d_field_Transport_remote_address(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_remote_address(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     TrUserData);
d_field_Transport_remote_address(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6, F7,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Transport(Rest2, 0, 0, F1, F2, F3,
				 F4, NewFValue, F6, F7, TrUserData).


d_field_Transport_remote_port(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_remote_port(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData);
d_field_Transport_remote_port(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Transport(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, TrUserData).


d_field_Transport_tcp_mss(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Transport_tcp_mss(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Transport_tcp_mss(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Transport(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, NewFValue, TrUserData).


skip_varint_Transport(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_Transport(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, TrUserData);
skip_varint_Transport(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Transport(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData).


skip_length_delimited_Transport(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    skip_length_delimited_Transport(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
skip_length_delimited_Transport(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Transport(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData).


skip_group_Transport(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		     F6, F7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Transport(Rest, 0, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData).


skip_32_Transport(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Transport(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData).


skip_64_Transport(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Transport(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData).


d_msg_AddNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddNeighborResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_AddNeighborResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AddNeighborResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_AddNeighborResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_AddNeighborResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddNeighborResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_AddNeighborResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AddNeighborResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_AddNeighborResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddNeighborResponse(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_AddNeighborResponse(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_AddNeighborResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddNeighborResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AddNeighborResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_AddNeighborResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_AddNeighborResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddNeighborResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_AddNeighborResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddNeighborResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_AddNeighborResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddNeighborResponse(Rest2, 0, 0,
					   TrUserData).


skip_group_AddNeighborResponse(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddNeighborResponse(Rest, 0, Z2,
					   TrUserData).


skip_32_AddNeighborResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_AddNeighborResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_AddNeighborResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_AddNeighborResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_GetVrfRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetVrfRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_GetVrfRequest(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_GetVrfRequest(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_GetVrfRequest(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_GetVrfRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetVrfRequest(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_GetVrfRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_GetVrfRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_GetVrfRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_GetVrfRequest(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_GetVrfRequest(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_GetVrfRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_GetVrfRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_GetVrfRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_GetVrfRequest(Rest, Z1, Z2, TrUserData);
skip_varint_GetVrfRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_GetVrfRequest(Rest, Z1, Z2,
				     TrUserData).


skip_length_delimited_GetVrfRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetVrfRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_GetVrfRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetVrfRequest(Rest2, 0, 0,
				     TrUserData).


skip_group_GetVrfRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetVrfRequest(Rest, 0, Z2,
				     TrUserData).


skip_32_GetVrfRequest(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_GetVrfRequest(Rest, Z1, Z2,
				     TrUserData).


skip_64_GetVrfRequest(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_GetVrfRequest(Rest, Z1, Z2,
				     TrUserData).


d_msg_AddStatementRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddStatementRequest(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_AddStatementRequest(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    d_field_AddStatementRequest_statement(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_AddStatementRequest(<<>>, 0, 0, F1,
				       _) ->
    #{statement => F1};
dfp_read_field_def_AddStatementRequest(Other, Z1, Z2,
				       F1, TrUserData) ->
    dg_read_field_def_AddStatementRequest(Other, Z1, Z2, F1,
					  TrUserData).

dg_read_field_def_AddStatementRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddStatementRequest(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_AddStatementRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddStatementRequest_statement(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddStatementRequest(Rest, 0, 0, F1,
						TrUserData);
	    1 ->
		skip_64_AddStatementRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_AddStatementRequest(Rest, 0, 0,
							  F1, TrUserData);
	    3 ->
		skip_group_AddStatementRequest(Rest, Key bsr 3, 0, F1,
					       TrUserData);
	    5 ->
		skip_32_AddStatementRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_AddStatementRequest(<<>>, 0, 0, F1,
				      _) ->
    #{statement => F1}.

d_field_AddStatementRequest_statement(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_AddStatementRequest_statement(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_AddStatementRequest_statement(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Statement(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AddStatementRequest(Rest2, 0, 0,
					   if F1 == undefined -> NewFValue;
					      true ->
						  merge_msg_Statement(F1,
								      NewFValue,
								      TrUserData)
					   end,
					   TrUserData).


skip_varint_AddStatementRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    skip_varint_AddStatementRequest(Rest, Z1, Z2, F1,
				    TrUserData);
skip_varint_AddStatementRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddStatementRequest(Rest, Z1, Z2, F1,
					   TrUserData).


skip_length_delimited_AddStatementRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddStatementRequest(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_AddStatementRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddStatementRequest(Rest2, 0, 0, F1,
					   TrUserData).


skip_group_AddStatementRequest(Bin, FNum, Z2, F1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddStatementRequest(Rest, 0, Z2, F1,
					   TrUserData).


skip_32_AddStatementRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_AddStatementRequest(Rest, Z1, Z2, F1,
					   TrUserData).


skip_64_AddStatementRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_AddStatementRequest(Rest, Z1, Z2, F1,
					   TrUserData).


d_msg_IbgpState(Bin, TrUserData) ->
    dfp_read_field_def_IbgpState(Bin, 0, 0,
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_IbgpState(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_IbgpState_maximum_paths(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_IbgpState(<<>>, 0, 0, F1, _) ->
    #{maximum_paths => F1};
dfp_read_field_def_IbgpState(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_IbgpState(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_IbgpState(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_IbgpState(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_IbgpState(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_IbgpState_maximum_paths(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_IbgpState(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_IbgpState(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_IbgpState(Rest, 0, 0, F1,
						TrUserData);
	    3 ->
		skip_group_IbgpState(Rest, Key bsr 3, 0, F1,
				     TrUserData);
	    5 -> skip_32_IbgpState(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_IbgpState(<<>>, 0, 0, F1, _) ->
    #{maximum_paths => F1}.

d_field_IbgpState_maximum_paths(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_IbgpState_maximum_paths(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_IbgpState_maximum_paths(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_IbgpState(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_IbgpState(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_IbgpState(Rest, Z1, Z2, F1, TrUserData);
skip_varint_IbgpState(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_IbgpState(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_IbgpState(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_IbgpState(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_IbgpState(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IbgpState(Rest2, 0, 0, F1,
				 TrUserData).


skip_group_IbgpState(Bin, FNum, Z2, F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_IbgpState(Rest, 0, Z2, F1,
				 TrUserData).


skip_32_IbgpState(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_IbgpState(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_IbgpState(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_IbgpState(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_IbgpConfig(Bin, TrUserData) ->
    dfp_read_field_def_IbgpConfig(Bin, 0, 0,
				  id(0, TrUserData), TrUserData).

dfp_read_field_def_IbgpConfig(<<8, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    d_field_IbgpConfig_maximum_paths(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_IbgpConfig(<<>>, 0, 0, F1, _) ->
    #{maximum_paths => F1};
dfp_read_field_def_IbgpConfig(Other, Z1, Z2, F1,
			      TrUserData) ->
    dg_read_field_def_IbgpConfig(Other, Z1, Z2, F1,
				 TrUserData).

dg_read_field_def_IbgpConfig(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_IbgpConfig(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
dg_read_field_def_IbgpConfig(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_IbgpConfig_maximum_paths(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_IbgpConfig(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_IbgpConfig(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_IbgpConfig(Rest, 0, 0, F1,
						 TrUserData);
	    3 ->
		skip_group_IbgpConfig(Rest, Key bsr 3, 0, F1,
				      TrUserData);
	    5 -> skip_32_IbgpConfig(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_IbgpConfig(<<>>, 0, 0, F1, _) ->
    #{maximum_paths => F1}.

d_field_IbgpConfig_maximum_paths(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_IbgpConfig_maximum_paths(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_IbgpConfig_maximum_paths(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_IbgpConfig(Rest, 0, 0, NewFValue,
				  TrUserData).


skip_varint_IbgpConfig(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    skip_varint_IbgpConfig(Rest, Z1, Z2, F1, TrUserData);
skip_varint_IbgpConfig(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    dfp_read_field_def_IbgpConfig(Rest, Z1, Z2, F1,
				  TrUserData).


skip_length_delimited_IbgpConfig(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_IbgpConfig(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_IbgpConfig(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IbgpConfig(Rest2, 0, 0, F1,
				  TrUserData).


skip_group_IbgpConfig(Bin, FNum, Z2, F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_IbgpConfig(Rest, 0, Z2, F1,
				  TrUserData).


skip_32_IbgpConfig(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_IbgpConfig(Rest, Z1, Z2, F1,
				  TrUserData).


skip_64_IbgpConfig(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_IbgpConfig(Rest, Z1, Z2, F1,
				  TrUserData).


d_msg_Ibgp(Bin, TrUserData) ->
    dfp_read_field_def_Ibgp(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Ibgp(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Ibgp_config(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Ibgp(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Ibgp_state(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Ibgp(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_Ibgp(Other, Z1, Z2, F1, F2,
			TrUserData) ->
    dg_read_field_def_Ibgp(Other, Z1, Z2, F1, F2,
			   TrUserData).

dg_read_field_def_Ibgp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Ibgp(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
dg_read_field_def_Ibgp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Ibgp_config(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Ibgp_state(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Ibgp(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Ibgp(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Ibgp(Rest, 0, 0, F1, F2,
					   TrUserData);
	    3 ->
		skip_group_Ibgp(Rest, Key bsr 3, 0, F1, F2, TrUserData);
	    5 -> skip_32_Ibgp(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Ibgp(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2}.

d_field_Ibgp_config(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_Ibgp_config(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_Ibgp_config(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_IbgpConfig(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Ibgp(Rest2, 0, 0,
			    if F1 == undefined -> NewFValue;
			       true ->
				   merge_msg_IbgpConfig(F1, NewFValue,
							TrUserData)
			    end,
			    F2, TrUserData).


d_field_Ibgp_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_Ibgp_state(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_Ibgp_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_IbgpState(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Ibgp(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   merge_msg_IbgpState(F2, NewFValue,
						       TrUserData)
			    end,
			    TrUserData).


skip_varint_Ibgp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    skip_varint_Ibgp(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Ibgp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    dfp_read_field_def_Ibgp(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_length_delimited_Ibgp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Ibgp(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
skip_length_delimited_Ibgp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Ibgp(Rest2, 0, 0, F1, F2,
			    TrUserData).


skip_group_Ibgp(Bin, FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Ibgp(Rest, 0, Z2, F1, F2,
			    TrUserData).


skip_32_Ibgp(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Ibgp(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_64_Ibgp(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Ibgp(Rest, Z1, Z2, F1, F2,
			    TrUserData).


d_msg_EbgpState(Bin, TrUserData) ->
    dfp_read_field_def_EbgpState(Bin, 0, 0,
				 id(false, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_EbgpState(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, TrUserData) ->
    d_field_EbgpState_allow_multiple_as(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_EbgpState(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_EbgpState_maximum_paths(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_EbgpState(<<>>, 0, 0, F1, F2, _) ->
    #{allow_multiple_as => F1, maximum_paths => F2};
dfp_read_field_def_EbgpState(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_EbgpState(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_EbgpState(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EbgpState(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_EbgpState(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EbgpState_allow_multiple_as(Rest, 0, 0, F1, F2,
					      TrUserData);
      16 ->
	  d_field_EbgpState_maximum_paths(Rest, 0, 0, F1, F2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EbgpState(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_EbgpState(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_EbgpState(Rest, 0, 0, F1, F2,
						TrUserData);
	    3 ->
		skip_group_EbgpState(Rest, Key bsr 3, 0, F1, F2,
				     TrUserData);
	    5 -> skip_32_EbgpState(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_EbgpState(<<>>, 0, 0, F1, F2, _) ->
    #{allow_multiple_as => F1, maximum_paths => F2}.

d_field_EbgpState_allow_multiple_as(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EbgpState_allow_multiple_as(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_EbgpState_allow_multiple_as(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EbgpState(Rest, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_EbgpState_maximum_paths(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EbgpState_maximum_paths(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_EbgpState_maximum_paths(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_EbgpState(Rest, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_EbgpState(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_EbgpState(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_EbgpState(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_EbgpState(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_EbgpState(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EbgpState(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_EbgpState(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EbgpState(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_group_EbgpState(Bin, FNum, Z2, F1, F2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EbgpState(Rest, 0, Z2, F1, F2,
				 TrUserData).


skip_32_EbgpState(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_EbgpState(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_EbgpState(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_EbgpState(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_EbgpConfig(Bin, TrUserData) ->
    dfp_read_field_def_EbgpConfig(Bin, 0, 0,
				  id(false, TrUserData), id(0, TrUserData),
				  TrUserData).

dfp_read_field_def_EbgpConfig(<<8, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_EbgpConfig_allow_multiple_as(Rest, Z1, Z2, F1,
					 F2, TrUserData);
dfp_read_field_def_EbgpConfig(<<16, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_EbgpConfig_maximum_paths(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_EbgpConfig(<<>>, 0, 0, F1, F2, _) ->
    #{allow_multiple_as => F1, maximum_paths => F2};
dfp_read_field_def_EbgpConfig(Other, Z1, Z2, F1, F2,
			      TrUserData) ->
    dg_read_field_def_EbgpConfig(Other, Z1, Z2, F1, F2,
				 TrUserData).

dg_read_field_def_EbgpConfig(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EbgpConfig(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
dg_read_field_def_EbgpConfig(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EbgpConfig_allow_multiple_as(Rest, 0, 0, F1, F2,
					       TrUserData);
      16 ->
	  d_field_EbgpConfig_maximum_paths(Rest, 0, 0, F1, F2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EbgpConfig(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_EbgpConfig(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_EbgpConfig(Rest, 0, 0, F1, F2,
						 TrUserData);
	    3 ->
		skip_group_EbgpConfig(Rest, Key bsr 3, 0, F1, F2,
				      TrUserData);
	    5 -> skip_32_EbgpConfig(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_EbgpConfig(<<>>, 0, 0, F1, F2, _) ->
    #{allow_multiple_as => F1, maximum_paths => F2}.

d_field_EbgpConfig_allow_multiple_as(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EbgpConfig_allow_multiple_as(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
d_field_EbgpConfig_allow_multiple_as(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EbgpConfig(Rest, 0, 0, NewFValue, F2,
				  TrUserData).


d_field_EbgpConfig_maximum_paths(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EbgpConfig_maximum_paths(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_EbgpConfig_maximum_paths(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_EbgpConfig(Rest, 0, 0, F1, NewFValue,
				  TrUserData).


skip_varint_EbgpConfig(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    skip_varint_EbgpConfig(Rest, Z1, Z2, F1, F2,
			   TrUserData);
skip_varint_EbgpConfig(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_EbgpConfig(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_length_delimited_EbgpConfig(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EbgpConfig(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_EbgpConfig(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EbgpConfig(Rest2, 0, 0, F1, F2,
				  TrUserData).


skip_group_EbgpConfig(Bin, FNum, Z2, F1, F2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EbgpConfig(Rest, 0, Z2, F1, F2,
				  TrUserData).


skip_32_EbgpConfig(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_EbgpConfig(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_64_EbgpConfig(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_EbgpConfig(Rest, Z1, Z2, F1, F2,
				  TrUserData).


d_msg_Ebgp(Bin, TrUserData) ->
    dfp_read_field_def_Ebgp(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Ebgp(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Ebgp_config(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Ebgp(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Ebgp_state(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Ebgp(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_Ebgp(Other, Z1, Z2, F1, F2,
			TrUserData) ->
    dg_read_field_def_Ebgp(Other, Z1, Z2, F1, F2,
			   TrUserData).

dg_read_field_def_Ebgp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Ebgp(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
dg_read_field_def_Ebgp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Ebgp_config(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Ebgp_state(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Ebgp(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Ebgp(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Ebgp(Rest, 0, 0, F1, F2,
					   TrUserData);
	    3 ->
		skip_group_Ebgp(Rest, Key bsr 3, 0, F1, F2, TrUserData);
	    5 -> skip_32_Ebgp(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Ebgp(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2}.

d_field_Ebgp_config(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_Ebgp_config(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_Ebgp_config(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EbgpConfig(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Ebgp(Rest2, 0, 0,
			    if F1 == undefined -> NewFValue;
			       true ->
				   merge_msg_EbgpConfig(F1, NewFValue,
							TrUserData)
			    end,
			    F2, TrUserData).


d_field_Ebgp_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_Ebgp_state(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_Ebgp_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EbgpState(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Ebgp(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   merge_msg_EbgpState(F2, NewFValue,
						       TrUserData)
			    end,
			    TrUserData).


skip_varint_Ebgp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    skip_varint_Ebgp(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Ebgp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    dfp_read_field_def_Ebgp(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_length_delimited_Ebgp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Ebgp(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
skip_length_delimited_Ebgp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Ebgp(Rest2, 0, 0, F1, F2,
			    TrUserData).


skip_group_Ebgp(Bin, FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Ebgp(Rest, 0, Z2, F1, F2,
			    TrUserData).


skip_32_Ebgp(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Ebgp(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_64_Ebgp(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Ebgp(Rest, Z1, Z2, F1, F2,
			    TrUserData).


d_msg_UseMultiplePathsState(Bin, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsState(Bin, 0, 0,
					     id(false, TrUserData), TrUserData).

dfp_read_field_def_UseMultiplePathsState(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, TrUserData) ->
    d_field_UseMultiplePathsState_enabled(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_UseMultiplePathsState(<<>>, 0, 0, F1,
					 _) ->
    #{enabled => F1};
dfp_read_field_def_UseMultiplePathsState(Other, Z1, Z2,
					 F1, TrUserData) ->
    dg_read_field_def_UseMultiplePathsState(Other, Z1, Z2,
					    F1, TrUserData).

dg_read_field_def_UseMultiplePathsState(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UseMultiplePathsState(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_UseMultiplePathsState(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UseMultiplePathsState_enabled(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UseMultiplePathsState(Rest, 0, 0, F1,
						  TrUserData);
	    1 ->
		skip_64_UseMultiplePathsState(Rest, 0, 0, F1,
					      TrUserData);
	    2 ->
		skip_length_delimited_UseMultiplePathsState(Rest, 0, 0,
							    F1, TrUserData);
	    3 ->
		skip_group_UseMultiplePathsState(Rest, Key bsr 3, 0, F1,
						 TrUserData);
	    5 ->
		skip_32_UseMultiplePathsState(Rest, 0, 0, F1,
					      TrUserData)
	  end
    end;
dg_read_field_def_UseMultiplePathsState(<<>>, 0, 0, F1,
					_) ->
    #{enabled => F1}.

d_field_UseMultiplePathsState_enabled(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_UseMultiplePathsState_enabled(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_UseMultiplePathsState_enabled(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_UseMultiplePathsState(Rest, 0, 0,
					     NewFValue, TrUserData).


skip_varint_UseMultiplePathsState(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    skip_varint_UseMultiplePathsState(Rest, Z1, Z2, F1,
				      TrUserData);
skip_varint_UseMultiplePathsState(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsState(Rest, Z1, Z2,
					     F1, TrUserData).


skip_length_delimited_UseMultiplePathsState(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_UseMultiplePathsState(Rest, N + 7,
						X bsl N + Acc, F1, TrUserData);
skip_length_delimited_UseMultiplePathsState(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UseMultiplePathsState(Rest2, 0, 0,
					     F1, TrUserData).


skip_group_UseMultiplePathsState(Bin, FNum, Z2, F1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UseMultiplePathsState(Rest, 0, Z2,
					     F1, TrUserData).


skip_32_UseMultiplePathsState(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsState(Rest, Z1, Z2,
					     F1, TrUserData).


skip_64_UseMultiplePathsState(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_UseMultiplePathsState(Rest, Z1, Z2,
					     F1, TrUserData).


d_msg_UseMultiplePaths(Bin, TrUserData) ->
    dfp_read_field_def_UseMultiplePaths(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UseMultiplePaths(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UseMultiplePaths_config(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData);
dfp_read_field_def_UseMultiplePaths(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UseMultiplePaths_state(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData);
dfp_read_field_def_UseMultiplePaths(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UseMultiplePaths_ebgp(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData);
dfp_read_field_def_UseMultiplePaths(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UseMultiplePaths_ibgp(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData);
dfp_read_field_def_UseMultiplePaths(<<>>, 0, 0, F1, F2,
				    F3, F4, _) ->
    #{config => F1, state => F2, ebgp => F3, ibgp => F4};
dfp_read_field_def_UseMultiplePaths(Other, Z1, Z2, F1,
				    F2, F3, F4, TrUserData) ->
    dg_read_field_def_UseMultiplePaths(Other, Z1, Z2, F1,
				       F2, F3, F4, TrUserData).

dg_read_field_def_UseMultiplePaths(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UseMultiplePaths(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
dg_read_field_def_UseMultiplePaths(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UseMultiplePaths_config(Rest, 0, 0, F1, F2, F3,
					  F4, TrUserData);
      18 ->
	  d_field_UseMultiplePaths_state(Rest, 0, 0, F1, F2, F3,
					 F4, TrUserData);
      26 ->
	  d_field_UseMultiplePaths_ebgp(Rest, 0, 0, F1, F2, F3,
					F4, TrUserData);
      34 ->
	  d_field_UseMultiplePaths_ibgp(Rest, 0, 0, F1, F2, F3,
					F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UseMultiplePaths(Rest, 0, 0, F1, F2, F3, F4,
					     TrUserData);
	    1 ->
		skip_64_UseMultiplePaths(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    2 ->
		skip_length_delimited_UseMultiplePaths(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    3 ->
		skip_group_UseMultiplePaths(Rest, Key bsr 3, 0, F1, F2,
					    F3, F4, TrUserData);
	    5 ->
		skip_32_UseMultiplePaths(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData)
	  end
    end;
dg_read_field_def_UseMultiplePaths(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #{config => F1, state => F2, ebgp => F3, ibgp => F4}.

d_field_UseMultiplePaths_config(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UseMultiplePaths_config(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_UseMultiplePaths_config(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UseMultiplePathsConfig(Bs,
						TrUserData),
		   TrUserData),
    dfp_read_field_def_UseMultiplePaths(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_UseMultiplePathsConfig(F1,
										NewFValue,
										TrUserData)
					end,
					F2, F3, F4, TrUserData).


d_field_UseMultiplePaths_state(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UseMultiplePaths_state(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_UseMultiplePaths_state(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UseMultiplePathsState(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_UseMultiplePaths(Rest2, 0, 0, F1,
					if F2 == undefined -> NewFValue;
					   true ->
					       merge_msg_UseMultiplePathsState(F2,
									       NewFValue,
									       TrUserData)
					end,
					F3, F4, TrUserData).


d_field_UseMultiplePaths_ebgp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UseMultiplePaths_ebgp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_UseMultiplePaths_ebgp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Ebgp(Bs, TrUserData), TrUserData),
    dfp_read_field_def_UseMultiplePaths(Rest2, 0, 0, F1, F2,
					if F3 == undefined -> NewFValue;
					   true ->
					       merge_msg_Ebgp(F3, NewFValue,
							      TrUserData)
					end,
					F4, TrUserData).


d_field_UseMultiplePaths_ibgp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UseMultiplePaths_ibgp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_UseMultiplePaths_ibgp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Ibgp(Bs, TrUserData), TrUserData),
    dfp_read_field_def_UseMultiplePaths(Rest2, 0, 0, F1, F2,
					F3,
					if F4 == undefined -> NewFValue;
					   true ->
					       merge_msg_Ibgp(F4, NewFValue,
							      TrUserData)
					end,
					TrUserData).


skip_varint_UseMultiplePaths(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_UseMultiplePaths(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
skip_varint_UseMultiplePaths(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_UseMultiplePaths(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_length_delimited_UseMultiplePaths(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_UseMultiplePaths(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
skip_length_delimited_UseMultiplePaths(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UseMultiplePaths(Rest2, 0, 0, F1, F2,
					F3, F4, TrUserData).


skip_group_UseMultiplePaths(Bin, FNum, Z2, F1, F2, F3,
			    F4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UseMultiplePaths(Rest, 0, Z2, F1, F2,
					F3, F4, TrUserData).


skip_32_UseMultiplePaths(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_UseMultiplePaths(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_64_UseMultiplePaths(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_UseMultiplePaths(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


d_msg_LongLivedGracefulRestartState(Bin, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartState(Bin, 0,
						     0, id(false, TrUserData),
						     id(false, TrUserData),
						     id(false, TrUserData),
						     id(0, TrUserData),
						     id(false, TrUserData),
						     TrUserData).

dfp_read_field_def_LongLivedGracefulRestartState(<<8,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5,
						 TrUserData) ->
    d_field_LongLivedGracefulRestartState_enabled(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5,
						  TrUserData);
dfp_read_field_def_LongLivedGracefulRestartState(<<16,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5,
						 TrUserData) ->
    d_field_LongLivedGracefulRestartState_received(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5,
						   TrUserData);
dfp_read_field_def_LongLivedGracefulRestartState(<<24,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5,
						 TrUserData) ->
    d_field_LongLivedGracefulRestartState_advertised(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     TrUserData);
dfp_read_field_def_LongLivedGracefulRestartState(<<32,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5,
						 TrUserData) ->
    d_field_LongLivedGracefulRestartState_peer_restart_time(Rest,
							    Z1, Z2, F1, F2, F3,
							    F4, F5, TrUserData);
dfp_read_field_def_LongLivedGracefulRestartState(<<40,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5,
						 TrUserData) ->
    d_field_LongLivedGracefulRestartState_peer_restart_timer_expired(Rest,
								     Z1, Z2, F1,
								     F2, F3, F4,
								     F5,
								     TrUserData);
dfp_read_field_def_LongLivedGracefulRestartState(<<>>,
						 0, 0, F1, F2, F3, F4, F5, _) ->
    #{enabled => F1, received => F2, advertised => F3,
      peer_restart_time => F4,
      peer_restart_timer_expired => F5};
dfp_read_field_def_LongLivedGracefulRestartState(Other,
						 Z1, Z2, F1, F2, F3, F4, F5,
						 TrUserData) ->
    dg_read_field_def_LongLivedGracefulRestartState(Other,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    TrUserData).

dg_read_field_def_LongLivedGracefulRestartState(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5,
						TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LongLivedGracefulRestartState(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, TrUserData);
dg_read_field_def_LongLivedGracefulRestartState(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LongLivedGracefulRestartState_enabled(Rest, 0,
							0, F1, F2, F3, F4, F5,
							TrUserData);
      16 ->
	  d_field_LongLivedGracefulRestartState_received(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 TrUserData);
      24 ->
	  d_field_LongLivedGracefulRestartState_advertised(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, TrUserData);
      32 ->
	  d_field_LongLivedGracefulRestartState_peer_restart_time(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  TrUserData);
      40 ->
	  d_field_LongLivedGracefulRestartState_peer_restart_timer_expired(Rest,
									   0, 0,
									   F1,
									   F2,
									   F3,
									   F4,
									   F5,
									   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LongLivedGracefulRestartState(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  TrUserData);
	    1 ->
		skip_64_LongLivedGracefulRestartState(Rest, 0, 0, F1,
						      F2, F3, F4, F5,
						      TrUserData);
	    2 ->
		skip_length_delimited_LongLivedGracefulRestartState(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5,
								    TrUserData);
	    3 ->
		skip_group_LongLivedGracefulRestartState(Rest,
							 Key bsr 3, 0, F1, F2,
							 F3, F4, F5,
							 TrUserData);
	    5 ->
		skip_32_LongLivedGracefulRestartState(Rest, 0, 0, F1,
						      F2, F3, F4, F5,
						      TrUserData)
	  end
    end;
dg_read_field_def_LongLivedGracefulRestartState(<<>>, 0,
						0, F1, F2, F3, F4, F5, _) ->
    #{enabled => F1, received => F2, advertised => F3,
      peer_restart_time => F4,
      peer_restart_timer_expired => F5}.

d_field_LongLivedGracefulRestartState_enabled(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5,
					      TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartState_enabled(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, TrUserData);
d_field_LongLivedGracefulRestartState_enabled(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, F3, F4, F5,
					      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     0, 0, NewFValue, F2, F3,
						     F4, F5, TrUserData).


d_field_LongLivedGracefulRestartState_received(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5,
					       TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartState_received(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, TrUserData);
d_field_LongLivedGracefulRestartState_received(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, _, F3, F4, F5,
					       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     0, 0, F1, NewFValue, F3,
						     F4, F5, TrUserData).


d_field_LongLivedGracefulRestartState_advertised(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5,
						 TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartState_advertised(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5,
						     TrUserData);
d_field_LongLivedGracefulRestartState_advertised(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, _, F4, F5,
						 TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     0, 0, F1, F2, NewFValue,
						     F4, F5, TrUserData).


d_field_LongLivedGracefulRestartState_peer_restart_time(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartState_peer_restart_time(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3, F4, F5,
							    TrUserData);
d_field_LongLivedGracefulRestartState_peer_restart_time(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, _,
							F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     0, 0, F1, F2, F3,
						     NewFValue, F5, TrUserData).


d_field_LongLivedGracefulRestartState_peer_restart_timer_expired(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F1, F2,
								 F3, F4, F5,
								 TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartState_peer_restart_timer_expired(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F1, F2, F3,
								     F4, F5,
								     TrUserData);
d_field_LongLivedGracefulRestartState_peer_restart_timer_expired(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F1, F2,
								 F3, F4, _,
								 TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     0, 0, F1, F2, F3, F4,
						     NewFValue, TrUserData).


skip_varint_LongLivedGracefulRestartState(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    skip_varint_LongLivedGracefulRestartState(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, TrUserData);
skip_varint_LongLivedGracefulRestartState(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     TrUserData).


skip_length_delimited_LongLivedGracefulRestartState(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_LongLivedGracefulRestartState(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5,
							TrUserData);
skip_length_delimited_LongLivedGracefulRestartState(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LongLivedGracefulRestartState(Rest2,
						     0, 0, F1, F2, F3, F4, F5,
						     TrUserData).


skip_group_LongLivedGracefulRestartState(Bin, FNum, Z2,
					 F1, F2, F3, F4, F5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     0, Z2, F1, F2, F3, F4, F5,
						     TrUserData).


skip_32_LongLivedGracefulRestartState(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     TrUserData).


skip_64_LongLivedGracefulRestartState(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartState(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     TrUserData).


d_msg_LongLivedGracefulRestartConfig(Bin, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartConfig(Bin,
						      0, 0,
						      id(false, TrUserData),
						      id(0, TrUserData),
						      TrUserData).

dfp_read_field_def_LongLivedGracefulRestartConfig(<<8,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, TrUserData) ->
    d_field_LongLivedGracefulRestartConfig_enabled(Rest, Z1,
						   Z2, F1, F2, TrUserData);
dfp_read_field_def_LongLivedGracefulRestartConfig(<<16,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, TrUserData) ->
    d_field_LongLivedGracefulRestartConfig_restart_time(Rest,
							Z1, Z2, F1, F2,
							TrUserData);
dfp_read_field_def_LongLivedGracefulRestartConfig(<<>>,
						  0, 0, F1, F2, _) ->
    #{enabled => F1, restart_time => F2};
dfp_read_field_def_LongLivedGracefulRestartConfig(Other,
						  Z1, Z2, F1, F2, TrUserData) ->
    dg_read_field_def_LongLivedGracefulRestartConfig(Other,
						     Z1, Z2, F1, F2,
						     TrUserData).

dg_read_field_def_LongLivedGracefulRestartConfig(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LongLivedGracefulRestartConfig(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, TrUserData);
dg_read_field_def_LongLivedGracefulRestartConfig(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LongLivedGracefulRestartConfig_enabled(Rest, 0,
							 0, F1, F2, TrUserData);
      16 ->
	  d_field_LongLivedGracefulRestartConfig_restart_time(Rest,
							      0, 0, F1, F2,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LongLivedGracefulRestartConfig(Rest, 0, 0,
							   F1, F2, TrUserData);
	    1 ->
		skip_64_LongLivedGracefulRestartConfig(Rest, 0, 0, F1,
						       F2, TrUserData);
	    2 ->
		skip_length_delimited_LongLivedGracefulRestartConfig(Rest,
								     0, 0, F1,
								     F2,
								     TrUserData);
	    3 ->
		skip_group_LongLivedGracefulRestartConfig(Rest,
							  Key bsr 3, 0, F1, F2,
							  TrUserData);
	    5 ->
		skip_32_LongLivedGracefulRestartConfig(Rest, 0, 0, F1,
						       F2, TrUserData)
	  end
    end;
dg_read_field_def_LongLivedGracefulRestartConfig(<<>>,
						 0, 0, F1, F2, _) ->
    #{enabled => F1, restart_time => F2}.

d_field_LongLivedGracefulRestartConfig_enabled(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartConfig_enabled(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
d_field_LongLivedGracefulRestartConfig_enabled(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest,
						      0, 0, NewFValue, F2,
						      TrUserData).


d_field_LongLivedGracefulRestartConfig_restart_time(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestartConfig_restart_time(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, TrUserData);
d_field_LongLivedGracefulRestartConfig_restart_time(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, _,
						    TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest,
						      0, 0, F1, NewFValue,
						      TrUserData).


skip_varint_LongLivedGracefulRestartConfig(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_LongLivedGracefulRestartConfig(Rest, Z1, Z2,
					       F1, F2, TrUserData);
skip_varint_LongLivedGracefulRestartConfig(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData).


skip_length_delimited_LongLivedGracefulRestartConfig(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LongLivedGracefulRestartConfig(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, TrUserData);
skip_length_delimited_LongLivedGracefulRestartConfig(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest2,
						      0, 0, F1, F2, TrUserData).


skip_group_LongLivedGracefulRestartConfig(Bin, FNum, Z2,
					  F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest,
						      0, Z2, F1, F2,
						      TrUserData).


skip_32_LongLivedGracefulRestartConfig(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData).


skip_64_LongLivedGracefulRestartConfig(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestartConfig(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData).


d_msg_LongLivedGracefulRestart(Bin, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestart(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_LongLivedGracefulRestart(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    d_field_LongLivedGracefulRestart_config(Rest, Z1, Z2,
					    F1, F2, TrUserData);
dfp_read_field_def_LongLivedGracefulRestart(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    d_field_LongLivedGracefulRestart_state(Rest, Z1, Z2, F1,
					   F2, TrUserData);
dfp_read_field_def_LongLivedGracefulRestart(<<>>, 0, 0,
					    F1, F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_LongLivedGracefulRestart(Other, Z1,
					    Z2, F1, F2, TrUserData) ->
    dg_read_field_def_LongLivedGracefulRestart(Other, Z1,
					       Z2, F1, F2, TrUserData).

dg_read_field_def_LongLivedGracefulRestart(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LongLivedGracefulRestart(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
dg_read_field_def_LongLivedGracefulRestart(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LongLivedGracefulRestart_config(Rest, 0, 0, F1,
						  F2, TrUserData);
      18 ->
	  d_field_LongLivedGracefulRestart_state(Rest, 0, 0, F1,
						 F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LongLivedGracefulRestart(Rest, 0, 0, F1, F2,
						     TrUserData);
	    1 ->
		skip_64_LongLivedGracefulRestart(Rest, 0, 0, F1, F2,
						 TrUserData);
	    2 ->
		skip_length_delimited_LongLivedGracefulRestart(Rest, 0,
							       0, F1, F2,
							       TrUserData);
	    3 ->
		skip_group_LongLivedGracefulRestart(Rest, Key bsr 3, 0,
						    F1, F2, TrUserData);
	    5 ->
		skip_32_LongLivedGracefulRestart(Rest, 0, 0, F1, F2,
						 TrUserData)
	  end
    end;
dg_read_field_def_LongLivedGracefulRestart(<<>>, 0, 0,
					   F1, F2, _) ->
    #{config => F1, state => F2}.

d_field_LongLivedGracefulRestart_config(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestart_config(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
d_field_LongLivedGracefulRestart_config(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_LongLivedGracefulRestartConfig(Bs,
							TrUserData),
		   TrUserData),
    dfp_read_field_def_LongLivedGracefulRestart(Rest2, 0, 0,
						if F1 == undefined -> NewFValue;
						   true ->
						       merge_msg_LongLivedGracefulRestartConfig(F1,
												NewFValue,
												TrUserData)
						end,
						F2, TrUserData).


d_field_LongLivedGracefulRestart_state(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LongLivedGracefulRestart_state(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
d_field_LongLivedGracefulRestart_state(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_LongLivedGracefulRestartState(Bs,
						       TrUserData),
		   TrUserData),
    dfp_read_field_def_LongLivedGracefulRestart(Rest2, 0, 0,
						F1,
						if F2 == undefined -> NewFValue;
						   true ->
						       merge_msg_LongLivedGracefulRestartState(F2,
											       NewFValue,
											       TrUserData)
						end,
						TrUserData).


skip_varint_LongLivedGracefulRestart(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_LongLivedGracefulRestart(Rest, Z1, Z2, F1,
					 F2, TrUserData);
skip_varint_LongLivedGracefulRestart(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestart(Rest, Z1,
						Z2, F1, F2, TrUserData).


skip_length_delimited_LongLivedGracefulRestart(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LongLivedGracefulRestart(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
skip_length_delimited_LongLivedGracefulRestart(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LongLivedGracefulRestart(Rest2, 0, 0,
						F1, F2, TrUserData).


skip_group_LongLivedGracefulRestart(Bin, FNum, Z2, F1,
				    F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LongLivedGracefulRestart(Rest, 0, Z2,
						F1, F2, TrUserData).


skip_32_LongLivedGracefulRestart(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestart(Rest, Z1,
						Z2, F1, F2, TrUserData).


skip_64_LongLivedGracefulRestart(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LongLivedGracefulRestart(Rest, Z1,
						Z2, F1, F2, TrUserData).


d_msg_ResetNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_ResetNeighborResponse(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_ResetNeighborResponse(<<>>, 0, 0,
					 _) ->
    #{};
dfp_read_field_def_ResetNeighborResponse(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_ResetNeighborResponse(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_ResetNeighborResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResetNeighborResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_ResetNeighborResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ResetNeighborResponse(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_ResetNeighborResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ResetNeighborResponse(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_ResetNeighborResponse(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_ResetNeighborResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ResetNeighborResponse(<<>>, 0, 0,
					_) ->
    #{}.

skip_varint_ResetNeighborResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_ResetNeighborResponse(Rest, Z1, Z2,
				      TrUserData);
skip_varint_ResetNeighborResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_ResetNeighborResponse(Rest, Z1, Z2,
					     TrUserData).


skip_length_delimited_ResetNeighborResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResetNeighborResponse(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_ResetNeighborResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResetNeighborResponse(Rest2, 0, 0,
					     TrUserData).


skip_group_ResetNeighborResponse(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResetNeighborResponse(Rest, 0, Z2,
					     TrUserData).


skip_32_ResetNeighborResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_ResetNeighborResponse(Rest, Z1, Z2,
					     TrUserData).


skip_64_ResetNeighborResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_ResetNeighborResponse(Rest, Z1, Z2,
					     TrUserData).


d_msg_AddPathsState(Bin, TrUserData) ->
    dfp_read_field_def_AddPathsState(Bin, 0, 0,
				     id(false, TrUserData), id(0, TrUserData),
				     TrUserData).

dfp_read_field_def_AddPathsState(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, TrUserData) ->
    d_field_AddPathsState_receive(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_AddPathsState(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_AddPathsState_send_max(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_AddPathsState(<<>>, 0, 0, F1, F2,
				 _) ->
    #{'receive' => F1, send_max => F2};
dfp_read_field_def_AddPathsState(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_AddPathsState(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_AddPathsState(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPathsState(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_AddPathsState(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AddPathsState_receive(Rest, 0, 0, F1, F2,
					TrUserData);
      16 ->
	  d_field_AddPathsState_send_max(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPathsState(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_AddPathsState(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_AddPathsState(Rest, 0, 0, F1, F2,
						    TrUserData);
	    3 ->
		skip_group_AddPathsState(Rest, Key bsr 3, 0, F1, F2,
					 TrUserData);
	    5 ->
		skip_32_AddPathsState(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_AddPathsState(<<>>, 0, 0, F1, F2,
				_) ->
    #{'receive' => F1, send_max => F2}.

d_field_AddPathsState_receive(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPathsState_receive(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_AddPathsState_receive(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_AddPathsState(Rest, 0, 0, NewFValue,
				     F2, TrUserData).


d_field_AddPathsState_send_max(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPathsState_send_max(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_AddPathsState_send_max(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AddPathsState(Rest, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_AddPathsState(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_AddPathsState(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_AddPathsState(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_AddPathsState(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_AddPathsState(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPathsState(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_AddPathsState(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPathsState(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_group_AddPathsState(Bin, FNum, Z2, F1, F2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPathsState(Rest, 0, Z2, F1, F2,
				     TrUserData).


skip_32_AddPathsState(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_AddPathsState(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_AddPathsState(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_AddPathsState(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_AddPathsConfig(Bin, TrUserData) ->
    dfp_read_field_def_AddPathsConfig(Bin, 0, 0,
				      id(false, TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_AddPathsConfig(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_AddPathsConfig_receive(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_AddPathsConfig(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_AddPathsConfig_send_max(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_AddPathsConfig(<<>>, 0, 0, F1, F2,
				  _) ->
    #{'receive' => F1, send_max => F2};
dfp_read_field_def_AddPathsConfig(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_AddPathsConfig(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_AddPathsConfig(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPathsConfig(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_AddPathsConfig(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AddPathsConfig_receive(Rest, 0, 0, F1, F2,
					 TrUserData);
      16 ->
	  d_field_AddPathsConfig_send_max(Rest, 0, 0, F1, F2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPathsConfig(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_AddPathsConfig(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_AddPathsConfig(Rest, 0, 0, F1, F2,
						     TrUserData);
	    3 ->
		skip_group_AddPathsConfig(Rest, Key bsr 3, 0, F1, F2,
					  TrUserData);
	    5 ->
		skip_32_AddPathsConfig(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_AddPathsConfig(<<>>, 0, 0, F1, F2,
				 _) ->
    #{'receive' => F1, send_max => F2}.

d_field_AddPathsConfig_receive(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPathsConfig_receive(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_AddPathsConfig_receive(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_AddPathsConfig(Rest, 0, 0, NewFValue,
				      F2, TrUserData).


d_field_AddPathsConfig_send_max(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPathsConfig_send_max(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_AddPathsConfig_send_max(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AddPathsConfig(Rest, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_AddPathsConfig(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_AddPathsConfig(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_AddPathsConfig(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_AddPathsConfig(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_AddPathsConfig(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPathsConfig(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_AddPathsConfig(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPathsConfig(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_group_AddPathsConfig(Bin, FNum, Z2, F1, F2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPathsConfig(Rest, 0, Z2, F1, F2,
				      TrUserData).


skip_32_AddPathsConfig(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_AddPathsConfig(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_AddPathsConfig(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_AddPathsConfig(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_AddPaths(Bin, TrUserData) ->
    dfp_read_field_def_AddPaths(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AddPaths(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_AddPaths_config(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_AddPaths(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_AddPaths_state(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_AddPaths(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_AddPaths(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_AddPaths(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_AddPaths(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPaths(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_AddPaths(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddPaths_config(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_AddPaths_state(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPaths(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_AddPaths(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_AddPaths(Rest, 0, 0, F1, F2,
					       TrUserData);
	    3 ->
		skip_group_AddPaths(Rest, Key bsr 3, 0, F1, F2,
				    TrUserData);
	    5 -> skip_32_AddPaths(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_AddPaths(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2}.

d_field_AddPaths_config(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPaths_config(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_AddPaths_config(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AddPathsConfig(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AddPaths(Rest2, 0, 0,
				if F1 == undefined -> NewFValue;
				   true ->
				       merge_msg_AddPathsConfig(F1, NewFValue,
								TrUserData)
				end,
				F2, TrUserData).


d_field_AddPaths_state(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPaths_state(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_AddPaths_state(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AddPathsState(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AddPaths(Rest2, 0, 0, F1,
				if F2 == undefined -> NewFValue;
				   true ->
				       merge_msg_AddPathsState(F2, NewFValue,
							       TrUserData)
				end,
				TrUserData).


skip_varint_AddPaths(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_AddPaths(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_AddPaths(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_AddPaths(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_AddPaths(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPaths(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_AddPaths(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPaths(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_group_AddPaths(Bin, FNum, Z2, F1, F2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPaths(Rest, 0, Z2, F1, F2,
				TrUserData).


skip_32_AddPaths(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_AddPaths(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_AddPaths(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_AddPaths(Rest, Z1, Z2, F1, F2,
				TrUserData).


d_msg_RouteTargetMembershipState(Bin, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipState(Bin, 0, 0,
						  id(0, TrUserData),
						  TrUserData).

dfp_read_field_def_RouteTargetMembershipState(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, TrUserData) ->
    d_field_RouteTargetMembershipState_deferral_time(Rest,
						     Z1, Z2, F1, TrUserData);
dfp_read_field_def_RouteTargetMembershipState(<<>>, 0,
					      0, F1, _) ->
    #{deferral_time => F1};
dfp_read_field_def_RouteTargetMembershipState(Other, Z1,
					      Z2, F1, TrUserData) ->
    dg_read_field_def_RouteTargetMembershipState(Other, Z1,
						 Z2, F1, TrUserData).

dg_read_field_def_RouteTargetMembershipState(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteTargetMembershipState(Rest,
						 N + 7, X bsl N + Acc, F1,
						 TrUserData);
dg_read_field_def_RouteTargetMembershipState(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RouteTargetMembershipState_deferral_time(Rest,
							   0, 0, F1,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteTargetMembershipState(Rest, 0, 0, F1,
						       TrUserData);
	    1 ->
		skip_64_RouteTargetMembershipState(Rest, 0, 0, F1,
						   TrUserData);
	    2 ->
		skip_length_delimited_RouteTargetMembershipState(Rest,
								 0, 0, F1,
								 TrUserData);
	    3 ->
		skip_group_RouteTargetMembershipState(Rest, Key bsr 3,
						      0, F1, TrUserData);
	    5 ->
		skip_32_RouteTargetMembershipState(Rest, 0, 0, F1,
						   TrUserData)
	  end
    end;
dg_read_field_def_RouteTargetMembershipState(<<>>, 0, 0,
					     F1, _) ->
    #{deferral_time => F1}.

d_field_RouteTargetMembershipState_deferral_time(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RouteTargetMembershipState_deferral_time(Rest,
						     N + 7, X bsl N + Acc, F1,
						     TrUserData);
d_field_RouteTargetMembershipState_deferral_time(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RouteTargetMembershipState(Rest, 0,
						  0, NewFValue, TrUserData).


skip_varint_RouteTargetMembershipState(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    skip_varint_RouteTargetMembershipState(Rest, Z1, Z2, F1,
					   TrUserData);
skip_varint_RouteTargetMembershipState(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipState(Rest, Z1,
						  Z2, F1, TrUserData).


skip_length_delimited_RouteTargetMembershipState(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteTargetMembershipState(Rest,
						     N + 7, X bsl N + Acc, F1,
						     TrUserData);
skip_length_delimited_RouteTargetMembershipState(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteTargetMembershipState(Rest2, 0,
						  0, F1, TrUserData).


skip_group_RouteTargetMembershipState(Bin, FNum, Z2, F1,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteTargetMembershipState(Rest, 0,
						  Z2, F1, TrUserData).


skip_32_RouteTargetMembershipState(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipState(Rest, Z1,
						  Z2, F1, TrUserData).


skip_64_RouteTargetMembershipState(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipState(Rest, Z1,
						  Z2, F1, TrUserData).


d_msg_RouteTargetMembershipConfig(Bin, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipConfig(Bin, 0,
						   0, id(0, TrUserData),
						   TrUserData).

dfp_read_field_def_RouteTargetMembershipConfig(<<8,
						 Rest/binary>>,
					       Z1, Z2, F1, TrUserData) ->
    d_field_RouteTargetMembershipConfig_deferral_time(Rest,
						      Z1, Z2, F1, TrUserData);
dfp_read_field_def_RouteTargetMembershipConfig(<<>>, 0,
					       0, F1, _) ->
    #{deferral_time => F1};
dfp_read_field_def_RouteTargetMembershipConfig(Other,
					       Z1, Z2, F1, TrUserData) ->
    dg_read_field_def_RouteTargetMembershipConfig(Other, Z1,
						  Z2, F1, TrUserData).

dg_read_field_def_RouteTargetMembershipConfig(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteTargetMembershipConfig(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
dg_read_field_def_RouteTargetMembershipConfig(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RouteTargetMembershipConfig_deferral_time(Rest,
							    0, 0, F1,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteTargetMembershipConfig(Rest, 0, 0, F1,
							TrUserData);
	    1 ->
		skip_64_RouteTargetMembershipConfig(Rest, 0, 0, F1,
						    TrUserData);
	    2 ->
		skip_length_delimited_RouteTargetMembershipConfig(Rest,
								  0, 0, F1,
								  TrUserData);
	    3 ->
		skip_group_RouteTargetMembershipConfig(Rest, Key bsr 3,
						       0, F1, TrUserData);
	    5 ->
		skip_32_RouteTargetMembershipConfig(Rest, 0, 0, F1,
						    TrUserData)
	  end
    end;
dg_read_field_def_RouteTargetMembershipConfig(<<>>, 0,
					      0, F1, _) ->
    #{deferral_time => F1}.

d_field_RouteTargetMembershipConfig_deferral_time(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RouteTargetMembershipConfig_deferral_time(Rest,
						      N + 7, X bsl N + Acc, F1,
						      TrUserData);
d_field_RouteTargetMembershipConfig_deferral_time(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RouteTargetMembershipConfig(Rest, 0,
						   0, NewFValue, TrUserData).


skip_varint_RouteTargetMembershipConfig(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    skip_varint_RouteTargetMembershipConfig(Rest, Z1, Z2,
					    F1, TrUserData);
skip_varint_RouteTargetMembershipConfig(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipConfig(Rest, Z1,
						   Z2, F1, TrUserData).


skip_length_delimited_RouteTargetMembershipConfig(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteTargetMembershipConfig(Rest,
						      N + 7, X bsl N + Acc, F1,
						      TrUserData);
skip_length_delimited_RouteTargetMembershipConfig(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteTargetMembershipConfig(Rest2, 0,
						   0, F1, TrUserData).


skip_group_RouteTargetMembershipConfig(Bin, FNum, Z2,
				       F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteTargetMembershipConfig(Rest, 0,
						   Z2, F1, TrUserData).


skip_32_RouteTargetMembershipConfig(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipConfig(Rest, Z1,
						   Z2, F1, TrUserData).


skip_64_RouteTargetMembershipConfig(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteTargetMembershipConfig(Rest, Z1,
						   Z2, F1, TrUserData).


d_msg_RouteTargetMembership(Bin, TrUserData) ->
    dfp_read_field_def_RouteTargetMembership(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_RouteTargetMembership(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_RouteTargetMembership_config(Rest, Z1, Z2, F1,
					 F2, TrUserData);
dfp_read_field_def_RouteTargetMembership(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_RouteTargetMembership_state(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_RouteTargetMembership(<<>>, 0, 0, F1,
					 F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_RouteTargetMembership(Other, Z1, Z2,
					 F1, F2, TrUserData) ->
    dg_read_field_def_RouteTargetMembership(Other, Z1, Z2,
					    F1, F2, TrUserData).

dg_read_field_def_RouteTargetMembership(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteTargetMembership(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_RouteTargetMembership(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RouteTargetMembership_config(Rest, 0, 0, F1, F2,
					       TrUserData);
      18 ->
	  d_field_RouteTargetMembership_state(Rest, 0, 0, F1, F2,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteTargetMembership(Rest, 0, 0, F1, F2,
						  TrUserData);
	    1 ->
		skip_64_RouteTargetMembership(Rest, 0, 0, F1, F2,
					      TrUserData);
	    2 ->
		skip_length_delimited_RouteTargetMembership(Rest, 0, 0,
							    F1, F2, TrUserData);
	    3 ->
		skip_group_RouteTargetMembership(Rest, Key bsr 3, 0, F1,
						 F2, TrUserData);
	    5 ->
		skip_32_RouteTargetMembership(Rest, 0, 0, F1, F2,
					      TrUserData)
	  end
    end;
dg_read_field_def_RouteTargetMembership(<<>>, 0, 0, F1,
					F2, _) ->
    #{config => F1, state => F2}.

d_field_RouteTargetMembership_config(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RouteTargetMembership_config(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
d_field_RouteTargetMembership_config(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteTargetMembershipConfig(Bs,
						     TrUserData),
		   TrUserData),
    dfp_read_field_def_RouteTargetMembership(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    merge_msg_RouteTargetMembershipConfig(F1,
											  NewFValue,
											  TrUserData)
					     end,
					     F2, TrUserData).


d_field_RouteTargetMembership_state(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RouteTargetMembership_state(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_RouteTargetMembership_state(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteTargetMembershipState(Bs,
						    TrUserData),
		   TrUserData),
    dfp_read_field_def_RouteTargetMembership(Rest2, 0, 0,
					     F1,
					     if F2 == undefined -> NewFValue;
						true ->
						    merge_msg_RouteTargetMembershipState(F2,
											 NewFValue,
											 TrUserData)
					     end,
					     TrUserData).


skip_varint_RouteTargetMembership(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_RouteTargetMembership(Rest, Z1, Z2, F1, F2,
				      TrUserData);
skip_varint_RouteTargetMembership(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteTargetMembership(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_length_delimited_RouteTargetMembership(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteTargetMembership(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
skip_length_delimited_RouteTargetMembership(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteTargetMembership(Rest2, 0, 0,
					     F1, F2, TrUserData).


skip_group_RouteTargetMembership(Bin, FNum, Z2, F1, F2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteTargetMembership(Rest, 0, Z2,
					     F1, F2, TrUserData).


skip_32_RouteTargetMembership(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteTargetMembership(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_64_RouteTargetMembership(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteTargetMembership(Rest, Z1, Z2,
					     F1, F2, TrUserData).


d_msg_RouteSelectionOptionsState(Bin, TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsState(Bin, 0, 0,
						  id(false, TrUserData),
						  id(false, TrUserData),
						  id(false, TrUserData),
						  id(false, TrUserData),
						  id(false, TrUserData),
						  id(false, TrUserData),
						  TrUserData).

dfp_read_field_def_RouteSelectionOptionsState(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    d_field_RouteSelectionOptionsState_always_compare_med(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6,
							  TrUserData);
dfp_read_field_def_RouteSelectionOptionsState(<<16,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    d_field_RouteSelectionOptionsState_ignore_as_path_length(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6,
							     TrUserData);
dfp_read_field_def_RouteSelectionOptionsState(<<24,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    d_field_RouteSelectionOptionsState_external_compare_router_id(Rest,
								  Z1, Z2, F1,
								  F2, F3, F4,
								  F5, F6,
								  TrUserData);
dfp_read_field_def_RouteSelectionOptionsState(<<32,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    d_field_RouteSelectionOptionsState_advertise_inactive_routes(Rest,
								 Z1, Z2, F1, F2,
								 F3, F4, F5, F6,
								 TrUserData);
dfp_read_field_def_RouteSelectionOptionsState(<<40,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    d_field_RouteSelectionOptionsState_enable_aigp(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData);
dfp_read_field_def_RouteSelectionOptionsState(<<48,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    d_field_RouteSelectionOptionsState_ignore_next_hop_igp_metric(Rest,
								  Z1, Z2, F1,
								  F2, F3, F4,
								  F5, F6,
								  TrUserData);
dfp_read_field_def_RouteSelectionOptionsState(<<>>, 0,
					      0, F1, F2, F3, F4, F5, F6, _) ->
    #{always_compare_med => F1, ignore_as_path_length => F2,
      external_compare_router_id => F3,
      advertise_inactive_routes => F4, enable_aigp => F5,
      ignore_next_hop_igp_metric => F6};
dfp_read_field_def_RouteSelectionOptionsState(Other, Z1,
					      Z2, F1, F2, F3, F4, F5, F6,
					      TrUserData) ->
    dg_read_field_def_RouteSelectionOptionsState(Other, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 TrUserData).

dg_read_field_def_RouteSelectionOptionsState(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteSelectionOptionsState(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, TrUserData);
dg_read_field_def_RouteSelectionOptionsState(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RouteSelectionOptionsState_always_compare_med(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								TrUserData);
      16 ->
	  d_field_RouteSelectionOptionsState_ignore_as_path_length(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6,
								   TrUserData);
      24 ->
	  d_field_RouteSelectionOptionsState_external_compare_router_id(Rest,
									0, 0,
									F1, F2,
									F3, F4,
									F5, F6,
									TrUserData);
      32 ->
	  d_field_RouteSelectionOptionsState_advertise_inactive_routes(Rest,
								       0, 0, F1,
								       F2, F3,
								       F4, F5,
								       F6,
								       TrUserData);
      40 ->
	  d_field_RouteSelectionOptionsState_enable_aigp(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, TrUserData);
      48 ->
	  d_field_RouteSelectionOptionsState_ignore_next_hop_igp_metric(Rest,
									0, 0,
									F1, F2,
									F3, F4,
									F5, F6,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteSelectionOptionsState(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6,
						       TrUserData);
	    1 ->
		skip_64_RouteSelectionOptionsState(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, TrUserData);
	    2 ->
		skip_length_delimited_RouteSelectionOptionsState(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 TrUserData);
	    3 ->
		skip_group_RouteSelectionOptionsState(Rest, Key bsr 3,
						      0, F1, F2, F3, F4, F5, F6,
						      TrUserData);
	    5 ->
		skip_32_RouteSelectionOptionsState(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, TrUserData)
	  end
    end;
dg_read_field_def_RouteSelectionOptionsState(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, _) ->
    #{always_compare_med => F1, ignore_as_path_length => F2,
      external_compare_router_id => F3,
      advertise_inactive_routes => F4, enable_aigp => F5,
      ignore_next_hop_igp_metric => F6}.

d_field_RouteSelectionOptionsState_always_compare_med(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsState_always_compare_med(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, TrUserData);
d_field_RouteSelectionOptionsState_always_compare_med(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, F2, F3, F4, F5,
						      F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  0, NewFValue, F2, F3, F4, F5,
						  F6, TrUserData).


d_field_RouteSelectionOptionsState_ignore_as_path_length(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsState_ignore_as_path_length(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5, F6,
							     TrUserData);
d_field_RouteSelectionOptionsState_ignore_as_path_length(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, _, F3, F4,
							 F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  0, F1, NewFValue, F3, F4, F5,
						  F6, TrUserData).


d_field_RouteSelectionOptionsState_external_compare_router_id(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2,
							      F3, F4, F5, F6,
							      TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsState_external_compare_router_id(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F1, F2, F3,
								  F4, F5, F6,
								  TrUserData);
d_field_RouteSelectionOptionsState_external_compare_router_id(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2, _,
							      F4, F5, F6,
							      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  0, F1, F2, NewFValue, F4, F5,
						  F6, TrUserData).


d_field_RouteSelectionOptionsState_advertise_inactive_routes(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F1, F2, F3,
							     F4, F5, F6,
							     TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsState_advertise_inactive_routes(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F1, F2, F3, F4,
								 F5, F6,
								 TrUserData);
d_field_RouteSelectionOptionsState_advertise_inactive_routes(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F1, F2, F3,
							     _, F5, F6,
							     TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  0, F1, F2, F3, NewFValue, F5,
						  F6, TrUserData).


d_field_RouteSelectionOptionsState_enable_aigp(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsState_enable_aigp(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, TrUserData);
d_field_RouteSelectionOptionsState_enable_aigp(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, _, F6,
					       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  0, F1, F2, F3, F4, NewFValue,
						  F6, TrUserData).


d_field_RouteSelectionOptionsState_ignore_next_hop_igp_metric(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2,
							      F3, F4, F5, F6,
							      TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptionsState_ignore_next_hop_igp_metric(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F1, F2, F3,
								  F4, F5, F6,
								  TrUserData);
d_field_RouteSelectionOptionsState_ignore_next_hop_igp_metric(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2,
							      F3, F4, F5, _,
							      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  0, F1, F2, F3, F4, F5,
						  NewFValue, TrUserData).


skip_varint_RouteSelectionOptionsState(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6,
				       TrUserData) ->
    skip_varint_RouteSelectionOptionsState(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, TrUserData);
skip_varint_RouteSelectionOptionsState(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6,
				       TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsState(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  TrUserData).


skip_length_delimited_RouteSelectionOptionsState(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteSelectionOptionsState(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6,
						     TrUserData);
skip_length_delimited_RouteSelectionOptionsState(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteSelectionOptionsState(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6,
						  TrUserData).


skip_group_RouteSelectionOptionsState(Bin, FNum, Z2, F1,
				      F2, F3, F4, F5, F6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteSelectionOptionsState(Rest, 0,
						  Z2, F1, F2, F3, F4, F5, F6,
						  TrUserData).


skip_32_RouteSelectionOptionsState(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsState(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  TrUserData).


skip_64_RouteSelectionOptionsState(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    dfp_read_field_def_RouteSelectionOptionsState(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  TrUserData).


d_msg_RouteSelectionOptions(Bin, TrUserData) ->
    dfp_read_field_def_RouteSelectionOptions(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_RouteSelectionOptions(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_RouteSelectionOptions_config(Rest, Z1, Z2, F1,
					 F2, TrUserData);
dfp_read_field_def_RouteSelectionOptions(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_RouteSelectionOptions_state(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_RouteSelectionOptions(<<>>, 0, 0, F1,
					 F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_RouteSelectionOptions(Other, Z1, Z2,
					 F1, F2, TrUserData) ->
    dg_read_field_def_RouteSelectionOptions(Other, Z1, Z2,
					    F1, F2, TrUserData).

dg_read_field_def_RouteSelectionOptions(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteSelectionOptions(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_RouteSelectionOptions(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RouteSelectionOptions_config(Rest, 0, 0, F1, F2,
					       TrUserData);
      18 ->
	  d_field_RouteSelectionOptions_state(Rest, 0, 0, F1, F2,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteSelectionOptions(Rest, 0, 0, F1, F2,
						  TrUserData);
	    1 ->
		skip_64_RouteSelectionOptions(Rest, 0, 0, F1, F2,
					      TrUserData);
	    2 ->
		skip_length_delimited_RouteSelectionOptions(Rest, 0, 0,
							    F1, F2, TrUserData);
	    3 ->
		skip_group_RouteSelectionOptions(Rest, Key bsr 3, 0, F1,
						 F2, TrUserData);
	    5 ->
		skip_32_RouteSelectionOptions(Rest, 0, 0, F1, F2,
					      TrUserData)
	  end
    end;
dg_read_field_def_RouteSelectionOptions(<<>>, 0, 0, F1,
					F2, _) ->
    #{config => F1, state => F2}.

d_field_RouteSelectionOptions_config(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptions_config(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
d_field_RouteSelectionOptions_config(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteSelectionOptionsConfig(Bs,
						     TrUserData),
		   TrUserData),
    dfp_read_field_def_RouteSelectionOptions(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    merge_msg_RouteSelectionOptionsConfig(F1,
											  NewFValue,
											  TrUserData)
					     end,
					     F2, TrUserData).


d_field_RouteSelectionOptions_state(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RouteSelectionOptions_state(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_RouteSelectionOptions_state(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteSelectionOptionsState(Bs,
						    TrUserData),
		   TrUserData),
    dfp_read_field_def_RouteSelectionOptions(Rest2, 0, 0,
					     F1,
					     if F2 == undefined -> NewFValue;
						true ->
						    merge_msg_RouteSelectionOptionsState(F2,
											 NewFValue,
											 TrUserData)
					     end,
					     TrUserData).


skip_varint_RouteSelectionOptions(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_RouteSelectionOptions(Rest, Z1, Z2, F1, F2,
				      TrUserData);
skip_varint_RouteSelectionOptions(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteSelectionOptions(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_length_delimited_RouteSelectionOptions(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteSelectionOptions(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
skip_length_delimited_RouteSelectionOptions(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteSelectionOptions(Rest2, 0, 0,
					     F1, F2, TrUserData).


skip_group_RouteSelectionOptions(Bin, FNum, Z2, F1, F2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteSelectionOptions(Rest, 0, Z2,
					     F1, F2, TrUserData).


skip_32_RouteSelectionOptions(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteSelectionOptions(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_64_RouteSelectionOptions(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteSelectionOptions(Rest, Z1, Z2,
					     F1, F2, TrUserData).


d_msg_MpGracefulRestartState(Bin, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartState(Bin, 0, 0,
					      id(false, TrUserData),
					      id(false, TrUserData),
					      id(false, TrUserData),
					      id(false, TrUserData),
					      id(false, TrUserData),
					      TrUserData).

dfp_read_field_def_MpGracefulRestartState(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    d_field_MpGracefulRestartState_enabled(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
dfp_read_field_def_MpGracefulRestartState(<<16,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    d_field_MpGracefulRestartState_received(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_MpGracefulRestartState(<<24,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    d_field_MpGracefulRestartState_advertised(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_MpGracefulRestartState(<<32,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    d_field_MpGracefulRestartState_end_of_rib_received(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, TrUserData);
dfp_read_field_def_MpGracefulRestartState(<<40,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5,
					  TrUserData) ->
    d_field_MpGracefulRestartState_end_of_rib_sent(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5,
						   TrUserData);
dfp_read_field_def_MpGracefulRestartState(<<>>, 0, 0,
					  F1, F2, F3, F4, F5, _) ->
    #{enabled => F1, received => F2, advertised => F3,
      end_of_rib_received => F4, end_of_rib_sent => F5};
dfp_read_field_def_MpGracefulRestartState(Other, Z1, Z2,
					  F1, F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_MpGracefulRestartState(Other, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).

dg_read_field_def_MpGracefulRestartState(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MpGracefulRestartState(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     TrUserData);
dg_read_field_def_MpGracefulRestartState(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MpGracefulRestartState_enabled(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      16 ->
	  d_field_MpGracefulRestartState_received(Rest, 0, 0, F1,
						  F2, F3, F4, F5, TrUserData);
      24 ->
	  d_field_MpGracefulRestartState_advertised(Rest, 0, 0,
						    F1, F2, F3, F4, F5,
						    TrUserData);
      32 ->
	  d_field_MpGracefulRestartState_end_of_rib_received(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5,
							     TrUserData);
      40 ->
	  d_field_MpGracefulRestartState_end_of_rib_sent(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MpGracefulRestartState(Rest, 0, 0, F1, F2,
						   F3, F4, F5, TrUserData);
	    1 ->
		skip_64_MpGracefulRestartState(Rest, 0, 0, F1, F2, F3,
					       F4, F5, TrUserData);
	    2 ->
		skip_length_delimited_MpGracefulRestartState(Rest, 0, 0,
							     F1, F2, F3, F4, F5,
							     TrUserData);
	    3 ->
		skip_group_MpGracefulRestartState(Rest, Key bsr 3, 0,
						  F1, F2, F3, F4, F5,
						  TrUserData);
	    5 ->
		skip_32_MpGracefulRestartState(Rest, 0, 0, F1, F2, F3,
					       F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_MpGracefulRestartState(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, _) ->
    #{enabled => F1, received => F2, advertised => F3,
      end_of_rib_received => F4, end_of_rib_sent => F5}.

d_field_MpGracefulRestartState_enabled(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestartState_enabled(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
d_field_MpGracefulRestartState_enabled(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MpGracefulRestartState(Rest, 0, 0,
					      NewFValue, F2, F3, F4, F5,
					      TrUserData).


d_field_MpGracefulRestartState_received(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestartState_received(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    TrUserData);
d_field_MpGracefulRestartState_received(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, F4, F5,
					TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MpGracefulRestartState(Rest, 0, 0,
					      F1, NewFValue, F3, F4, F5,
					      TrUserData).


d_field_MpGracefulRestartState_advertised(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5,
					  TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestartState_advertised(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      TrUserData);
d_field_MpGracefulRestartState_advertised(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, _, F4, F5,
					  TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MpGracefulRestartState(Rest, 0, 0,
					      F1, F2, NewFValue, F4, F5,
					      TrUserData).


d_field_MpGracefulRestartState_end_of_rib_received(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestartState_end_of_rib_received(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5,
						       TrUserData);
d_field_MpGracefulRestartState_end_of_rib_received(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, _, F5,
						   TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MpGracefulRestartState(Rest, 0, 0,
					      F1, F2, F3, NewFValue, F5,
					      TrUserData).


d_field_MpGracefulRestartState_end_of_rib_sent(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5,
					       TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestartState_end_of_rib_sent(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, TrUserData);
d_field_MpGracefulRestartState_end_of_rib_sent(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, _,
					       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MpGracefulRestartState(Rest, 0, 0,
					      F1, F2, F3, F4, NewFValue,
					      TrUserData).


skip_varint_MpGracefulRestartState(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_MpGracefulRestartState(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData);
skip_varint_MpGracefulRestartState(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartState(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, TrUserData).


skip_length_delimited_MpGracefulRestartState(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_MpGracefulRestartState(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, TrUserData);
skip_length_delimited_MpGracefulRestartState(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MpGracefulRestartState(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, TrUserData).


skip_group_MpGracefulRestartState(Bin, FNum, Z2, F1, F2,
				  F3, F4, F5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MpGracefulRestartState(Rest, 0, Z2,
					      F1, F2, F3, F4, F5, TrUserData).


skip_32_MpGracefulRestartState(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartState(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, TrUserData).


skip_64_MpGracefulRestartState(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartState(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, TrUserData).


d_msg_MpGracefulRestartConfig(Bin, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartConfig(Bin, 0, 0,
					       id(false, TrUserData),
					       TrUserData).

dfp_read_field_def_MpGracefulRestartConfig(<<8,
					     Rest/binary>>,
					   Z1, Z2, F1, TrUserData) ->
    d_field_MpGracefulRestartConfig_enabled(Rest, Z1, Z2,
					    F1, TrUserData);
dfp_read_field_def_MpGracefulRestartConfig(<<>>, 0, 0,
					   F1, _) ->
    #{enabled => F1};
dfp_read_field_def_MpGracefulRestartConfig(Other, Z1,
					   Z2, F1, TrUserData) ->
    dg_read_field_def_MpGracefulRestartConfig(Other, Z1, Z2,
					      F1, TrUserData).

dg_read_field_def_MpGracefulRestartConfig(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MpGracefulRestartConfig(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_MpGracefulRestartConfig(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MpGracefulRestartConfig_enabled(Rest, 0, 0, F1,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MpGracefulRestartConfig(Rest, 0, 0, F1,
						    TrUserData);
	    1 ->
		skip_64_MpGracefulRestartConfig(Rest, 0, 0, F1,
						TrUserData);
	    2 ->
		skip_length_delimited_MpGracefulRestartConfig(Rest, 0,
							      0, F1,
							      TrUserData);
	    3 ->
		skip_group_MpGracefulRestartConfig(Rest, Key bsr 3, 0,
						   F1, TrUserData);
	    5 ->
		skip_32_MpGracefulRestartConfig(Rest, 0, 0, F1,
						TrUserData)
	  end
    end;
dg_read_field_def_MpGracefulRestartConfig(<<>>, 0, 0,
					  F1, _) ->
    #{enabled => F1}.

d_field_MpGracefulRestartConfig_enabled(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestartConfig_enabled(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
d_field_MpGracefulRestartConfig_enabled(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MpGracefulRestartConfig(Rest, 0, 0,
					       NewFValue, TrUserData).


skip_varint_MpGracefulRestartConfig(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    skip_varint_MpGracefulRestartConfig(Rest, Z1, Z2, F1,
					TrUserData);
skip_varint_MpGracefulRestartConfig(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartConfig(Rest, Z1, Z2,
					       F1, TrUserData).


skip_length_delimited_MpGracefulRestartConfig(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_MpGracefulRestartConfig(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
skip_length_delimited_MpGracefulRestartConfig(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MpGracefulRestartConfig(Rest2, 0, 0,
					       F1, TrUserData).


skip_group_MpGracefulRestartConfig(Bin, FNum, Z2, F1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MpGracefulRestartConfig(Rest, 0, Z2,
					       F1, TrUserData).


skip_32_MpGracefulRestartConfig(<<_:32, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartConfig(Rest, Z1, Z2,
					       F1, TrUserData).


skip_64_MpGracefulRestartConfig(<<_:64, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_MpGracefulRestartConfig(Rest, Z1, Z2,
					       F1, TrUserData).


d_msg_MpGracefulRestart(Bin, TrUserData) ->
    dfp_read_field_def_MpGracefulRestart(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MpGracefulRestart(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_MpGracefulRestart_config(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_MpGracefulRestart(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_MpGracefulRestart_state(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_MpGracefulRestart(<<>>, 0, 0, F1, F2,
				     _) ->
    #{config => F1, state => F2};
dfp_read_field_def_MpGracefulRestart(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_MpGracefulRestart(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_MpGracefulRestart(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MpGracefulRestart(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_MpGracefulRestart(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MpGracefulRestart_config(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  d_field_MpGracefulRestart_state(Rest, 0, 0, F1, F2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MpGracefulRestart(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_MpGracefulRestart(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_MpGracefulRestart(Rest, 0, 0, F1,
							F2, TrUserData);
	    3 ->
		skip_group_MpGracefulRestart(Rest, Key bsr 3, 0, F1, F2,
					     TrUserData);
	    5 ->
		skip_32_MpGracefulRestart(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_MpGracefulRestart(<<>>, 0, 0, F1, F2,
				    _) ->
    #{config => F1, state => F2}.

d_field_MpGracefulRestart_config(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestart_config(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_MpGracefulRestart_config(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MpGracefulRestartConfig(Bs,
						 TrUserData),
		   TrUserData),
    dfp_read_field_def_MpGracefulRestart(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_MpGracefulRestartConfig(F1,
										  NewFValue,
										  TrUserData)
					 end,
					 F2, TrUserData).


d_field_MpGracefulRestart_state(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MpGracefulRestart_state(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_MpGracefulRestart_state(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MpGracefulRestartState(Bs,
						TrUserData),
		   TrUserData),
    dfp_read_field_def_MpGracefulRestart(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_MpGracefulRestartState(F2,
										 NewFValue,
										 TrUserData)
					 end,
					 TrUserData).


skip_varint_MpGracefulRestart(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_MpGracefulRestart(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_MpGracefulRestart(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_MpGracefulRestart(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_MpGracefulRestart(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MpGracefulRestart(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_MpGracefulRestart(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MpGracefulRestart(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_group_MpGracefulRestart(Bin, FNum, Z2, F1, F2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MpGracefulRestart(Rest, 0, Z2, F1,
					 F2, TrUserData).


skip_32_MpGracefulRestart(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_MpGracefulRestart(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_MpGracefulRestart(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_MpGracefulRestart(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_AfiSafi(Bin, TrUserData) ->
    dfp_read_field_def_AfiSafi(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AfiSafi(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_mp_graceful_restart(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9,
					TrUserData);
dfp_read_field_def_AfiSafi(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_config(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, TrUserData);
dfp_read_field_def_AfiSafi(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_apply_policy(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_AfiSafi(<<34, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_route_selection_options(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    TrUserData);
dfp_read_field_def_AfiSafi(<<42, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_use_multiple_paths(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_AfiSafi(<<50, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_prefix_limits(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_AfiSafi(<<58, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_route_target_membership(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    TrUserData);
dfp_read_field_def_AfiSafi(<<66, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_long_lived_graceful_restart(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, TrUserData);
dfp_read_field_def_AfiSafi(<<74, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_AfiSafi_add_paths(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_AfiSafi(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, _) ->
    #{mp_graceful_restart => F1, config => F2,
      apply_policy => F3, route_selection_options => F4,
      use_multiple_paths => F5, prefix_limits => F6,
      route_target_membership => F7,
      long_lived_graceful_restart => F8, add_paths => F9};
dfp_read_field_def_AfiSafi(Other, Z1, Z2, F1, F2, F3,
			   F4, F5, F6, F7, F8, F9, TrUserData) ->
    dg_read_field_def_AfiSafi(Other, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, TrUserData).

dg_read_field_def_AfiSafi(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AfiSafi(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
dg_read_field_def_AfiSafi(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AfiSafi_mp_graceful_restart(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9,
					      TrUserData);
      18 ->
	  d_field_AfiSafi_config(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, TrUserData);
      26 ->
	  d_field_AfiSafi_apply_policy(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, TrUserData);
      34 ->
	  d_field_AfiSafi_route_selection_options(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, TrUserData);
      42 ->
	  d_field_AfiSafi_use_multiple_paths(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9,
					     TrUserData);
      50 ->
	  d_field_AfiSafi_prefix_limits(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, TrUserData);
      58 ->
	  d_field_AfiSafi_route_target_membership(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, TrUserData);
      66 ->
	  d_field_AfiSafi_long_lived_graceful_restart(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, TrUserData);
      74 ->
	  d_field_AfiSafi_add_paths(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AfiSafi(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, TrUserData);
	    1 ->
		skip_64_AfiSafi(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, F9, TrUserData);
	    2 ->
		skip_length_delimited_AfiSafi(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8, F9,
					      TrUserData);
	    3 ->
		skip_group_AfiSafi(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				   F5, F6, F7, F8, F9, TrUserData);
	    5 ->
		skip_32_AfiSafi(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, F9, TrUserData)
	  end
    end;
dg_read_field_def_AfiSafi(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, F6, F7, F8, F9, _) ->
    #{mp_graceful_restart => F1, config => F2,
      apply_policy => F3, route_selection_options => F4,
      use_multiple_paths => F5, prefix_limits => F6,
      route_target_membership => F7,
      long_lived_graceful_restart => F8, add_paths => F9}.

d_field_AfiSafi_mp_graceful_restart(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    TrUserData)
    when N < 57 ->
    d_field_AfiSafi_mp_graceful_restart(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, TrUserData);
d_field_AfiSafi_mp_graceful_restart(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MpGracefulRestart(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0,
			       if F1 == undefined -> NewFValue;
				  true ->
				      merge_msg_MpGracefulRestart(F1, NewFValue,
								  TrUserData)
			       end,
			       F2, F3, F4, F5, F6, F7, F8, F9, TrUserData).


d_field_AfiSafi_config(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_AfiSafi_config(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_AfiSafi_config(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AfiSafiConfig(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1,
			       if F2 == undefined -> NewFValue;
				  true ->
				      merge_msg_AfiSafiConfig(F2, NewFValue,
							      TrUserData)
			       end,
			       F3, F4, F5, F6, F7, F8, F9, TrUserData).


d_field_AfiSafi_apply_policy(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData)
    when N < 57 ->
    d_field_AfiSafi_apply_policy(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData);
d_field_AfiSafi_apply_policy(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ApplyPolicy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2,
			       if F3 == undefined -> NewFValue;
				  true ->
				      merge_msg_ApplyPolicy(F3, NewFValue,
							    TrUserData)
			       end,
			       F4, F5, F6, F7, F8, F9, TrUserData).


d_field_AfiSafi_route_selection_options(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, TrUserData)
    when N < 57 ->
    d_field_AfiSafi_route_selection_options(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, TrUserData);
d_field_AfiSafi_route_selection_options(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteSelectionOptions(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3,
			       if F4 == undefined -> NewFValue;
				  true ->
				      merge_msg_RouteSelectionOptions(F4,
								      NewFValue,
								      TrUserData)
			       end,
			       F5, F6, F7, F8, F9, TrUserData).


d_field_AfiSafi_use_multiple_paths(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   TrUserData)
    when N < 57 ->
    d_field_AfiSafi_use_multiple_paths(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, TrUserData);
d_field_AfiSafi_use_multiple_paths(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UseMultiplePaths(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3, F4,
			       if F5 == undefined -> NewFValue;
				  true ->
				      merge_msg_UseMultiplePaths(F5, NewFValue,
								 TrUserData)
			       end,
			       F6, F7, F8, F9, TrUserData).


d_field_AfiSafi_prefix_limits(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData)
    when N < 57 ->
    d_field_AfiSafi_prefix_limits(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, TrUserData);
d_field_AfiSafi_prefix_limits(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PrefixLimit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3, F4,
			       F5,
			       if F6 == undefined -> NewFValue;
				  true ->
				      merge_msg_PrefixLimit(F6, NewFValue,
							    TrUserData)
			       end,
			       F7, F8, F9, TrUserData).


d_field_AfiSafi_route_target_membership(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, TrUserData)
    when N < 57 ->
    d_field_AfiSafi_route_target_membership(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, TrUserData);
d_field_AfiSafi_route_target_membership(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteTargetMembership(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6,
			       if F7 == undefined -> NewFValue;
				  true ->
				      merge_msg_RouteTargetMembership(F7,
								      NewFValue,
								      TrUserData)
			       end,
			       F8, F9, TrUserData).


d_field_AfiSafi_long_lived_graceful_restart(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, TrUserData)
    when N < 57 ->
    d_field_AfiSafi_long_lived_graceful_restart(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, TrUserData);
d_field_AfiSafi_long_lived_graceful_restart(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_LongLivedGracefulRestart(Bs,
						  TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7,
			       if F8 == undefined -> NewFValue;
				  true ->
				      merge_msg_LongLivedGracefulRestart(F8,
									 NewFValue,
									 TrUserData)
			       end,
			       F9, TrUserData).


d_field_AfiSafi_add_paths(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_AfiSafi_add_paths(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_AfiSafi_add_paths(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AddPaths(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7, F8,
			       if F9 == undefined -> NewFValue;
				  true ->
				      merge_msg_AddPaths(F9, NewFValue,
							 TrUserData)
			       end,
			       TrUserData).


skip_varint_AfiSafi(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    skip_varint_AfiSafi(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, TrUserData);
skip_varint_AfiSafi(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_AfiSafi(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, TrUserData).


skip_length_delimited_AfiSafi(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_AfiSafi(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, TrUserData);
skip_length_delimited_AfiSafi(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AfiSafi(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, TrUserData).


skip_group_AfiSafi(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		   F6, F7, F8, F9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AfiSafi(Rest, 0, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, TrUserData).


skip_32_AfiSafi(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_AfiSafi(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, TrUserData).


skip_64_AfiSafi(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_AfiSafi(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, TrUserData).


d_msg_GracefulRestart(Bin, TrUserData) ->
    dfp_read_field_def_GracefulRestart(Bin, 0, 0,
				       id(false, TrUserData), id(0, TrUserData),
				       id(false, TrUserData), id(0, TrUserData),
				       id(false, TrUserData),
				       id(false, TrUserData), TrUserData).

dfp_read_field_def_GracefulRestart(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    d_field_GracefulRestart_enabled(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, TrUserData);
dfp_read_field_def_GracefulRestart(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    d_field_GracefulRestart_restart_time(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, TrUserData);
dfp_read_field_def_GracefulRestart(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    d_field_GracefulRestart_helper_only(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, TrUserData);
dfp_read_field_def_GracefulRestart(<<32, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    d_field_GracefulRestart_deferral_time(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, TrUserData);
dfp_read_field_def_GracefulRestart(<<40, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    d_field_GracefulRestart_notification_enabled(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 TrUserData);
dfp_read_field_def_GracefulRestart(<<48, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    d_field_GracefulRestart_longlived_enabled(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6,
					      TrUserData);
dfp_read_field_def_GracefulRestart(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, _) ->
    #{enabled => F1, restart_time => F2, helper_only => F3,
      deferral_time => F4, notification_enabled => F5,
      longlived_enabled => F6};
dfp_read_field_def_GracefulRestart(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6, TrUserData) ->
    dg_read_field_def_GracefulRestart(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, TrUserData).

dg_read_field_def_GracefulRestart(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GracefulRestart(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData);
dg_read_field_def_GracefulRestart(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GracefulRestart_enabled(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, TrUserData);
      16 ->
	  d_field_GracefulRestart_restart_time(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, TrUserData);
      24 ->
	  d_field_GracefulRestart_helper_only(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, TrUserData);
      32 ->
	  d_field_GracefulRestart_deferral_time(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, TrUserData);
      40 ->
	  d_field_GracefulRestart_notification_enabled(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       TrUserData);
      48 ->
	  d_field_GracefulRestart_longlived_enabled(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6,
						    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GracefulRestart(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, TrUserData);
	    1 ->
		skip_64_GracefulRestart(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, TrUserData);
	    2 ->
		skip_length_delimited_GracefulRestart(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6,
						      TrUserData);
	    3 ->
		skip_group_GracefulRestart(Rest, Key bsr 3, 0, F1, F2,
					   F3, F4, F5, F6, TrUserData);
	    5 ->
		skip_32_GracefulRestart(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, TrUserData)
	  end
    end;
dg_read_field_def_GracefulRestart(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, _) ->
    #{enabled => F1, restart_time => F2, helper_only => F3,
      deferral_time => F4, notification_enabled => F5,
      longlived_enabled => F6}.

d_field_GracefulRestart_enabled(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_GracefulRestart_enabled(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
d_field_GracefulRestart_enabled(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GracefulRestart(Rest, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6,
				       TrUserData).


d_field_GracefulRestart_restart_time(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_GracefulRestart_restart_time(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 TrUserData);
d_field_GracefulRestart_restart_time(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4, F5, F6,
				     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_GracefulRestart(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, F6, TrUserData).


d_field_GracefulRestart_helper_only(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_GracefulRestart_helper_only(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					TrUserData);
d_field_GracefulRestart_helper_only(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, _, F4, F5, F6,
				    TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GracefulRestart(Rest, 0, 0, F1, F2,
				       NewFValue, F4, F5, F6, TrUserData).


d_field_GracefulRestart_deferral_time(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData)
    when N < 57 ->
    d_field_GracefulRestart_deferral_time(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData);
d_field_GracefulRestart_deferral_time(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, _, F5, F6,
				      TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_GracefulRestart(Rest, 0, 0, F1, F2,
				       F3, NewFValue, F5, F6, TrUserData).


d_field_GracefulRestart_notification_enabled(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     TrUserData)
    when N < 57 ->
    d_field_GracefulRestart_notification_enabled(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, TrUserData);
d_field_GracefulRestart_notification_enabled(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, _, F6,
					     TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GracefulRestart(Rest, 0, 0, F1, F2,
				       F3, F4, NewFValue, F6, TrUserData).


d_field_GracefulRestart_longlived_enabled(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData)
    when N < 57 ->
    d_field_GracefulRestart_longlived_enabled(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, TrUserData);
d_field_GracefulRestart_longlived_enabled(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, _,
					  TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GracefulRestart(Rest, 0, 0, F1, F2,
				       F3, F4, F5, NewFValue, TrUserData).


skip_varint_GracefulRestart(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_GracefulRestart(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData);
skip_varint_GracefulRestart(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_GracefulRestart(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, TrUserData).


skip_length_delimited_GracefulRestart(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_GracefulRestart(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData);
skip_length_delimited_GracefulRestart(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GracefulRestart(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, TrUserData).


skip_group_GracefulRestart(Bin, FNum, Z2, F1, F2, F3,
			   F4, F5, F6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GracefulRestart(Rest, 0, Z2, F1, F2,
				       F3, F4, F5, F6, TrUserData).


skip_32_GracefulRestart(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_GracefulRestart(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, TrUserData).


skip_64_GracefulRestart(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_GracefulRestart(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, TrUserData).


d_msg_RouteServer(Bin, TrUserData) ->
    dfp_read_field_def_RouteServer(Bin, 0, 0,
				   id(false, TrUserData), TrUserData).

dfp_read_field_def_RouteServer(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_RouteServer_route_server_client(Rest, Z1, Z2,
					    F1, TrUserData);
dfp_read_field_def_RouteServer(<<>>, 0, 0, F1, _) ->
    #{route_server_client => F1};
dfp_read_field_def_RouteServer(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_RouteServer(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_RouteServer(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteServer(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_RouteServer(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RouteServer_route_server_client(Rest, 0, 0, F1,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteServer(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_RouteServer(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_RouteServer(Rest, 0, 0, F1,
						  TrUserData);
	    3 ->
		skip_group_RouteServer(Rest, Key bsr 3, 0, F1,
				       TrUserData);
	    5 -> skip_32_RouteServer(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_RouteServer(<<>>, 0, 0, F1, _) ->
    #{route_server_client => F1}.

d_field_RouteServer_route_server_client(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RouteServer_route_server_client(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
d_field_RouteServer_route_server_client(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteServer(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_RouteServer(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_RouteServer(Rest, Z1, Z2, F1, TrUserData);
skip_varint_RouteServer(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_RouteServer(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_RouteServer(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteServer(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_RouteServer(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteServer(Rest2, 0, 0, F1,
				   TrUserData).


skip_group_RouteServer(Bin, FNum, Z2, F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteServer(Rest, 0, Z2, F1,
				   TrUserData).


skip_32_RouteServer(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_RouteServer(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_RouteServer(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_RouteServer(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_TimersState(Bin, TrUserData) ->
    dfp_read_field_def_TimersState(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_TimersState(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_connect_retry(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_TimersState(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_hold_time(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, TrUserData);
dfp_read_field_def_TimersState(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_keepalive_interval(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_TimersState(<<32, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_minimum_advertisement_interval(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, TrUserData);
dfp_read_field_def_TimersState(<<40, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_negotiated_hold_time(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7,
					     TrUserData);
dfp_read_field_def_TimersState(<<48, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_uptime(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData);
dfp_read_field_def_TimersState(<<56, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_TimersState_downtime(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_TimersState(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, _) ->
    #{connect_retry => F1, hold_time => F2,
      keepalive_interval => F3,
      minimum_advertisement_interval => F4,
      negotiated_hold_time => F5, uptime => F6,
      downtime => F7};
dfp_read_field_def_TimersState(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_TimersState(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, TrUserData).

dg_read_field_def_TimersState(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TimersState(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData);
dg_read_field_def_TimersState(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TimersState_connect_retry(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, TrUserData);
      16 ->
	  d_field_TimersState_hold_time(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, TrUserData);
      24 ->
	  d_field_TimersState_keepalive_interval(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7,
						 TrUserData);
      32 ->
	  d_field_TimersState_minimum_advertisement_interval(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7,
							     TrUserData);
      40 ->
	  d_field_TimersState_negotiated_hold_time(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7,
						   TrUserData);
      48 ->
	  d_field_TimersState_uptime(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
      56 ->
	  d_field_TimersState_downtime(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TimersState(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, TrUserData);
	    1 ->
		skip_64_TimersState(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, TrUserData);
	    2 ->
		skip_length_delimited_TimersState(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7,
						  TrUserData);
	    3 ->
		skip_group_TimersState(Rest, Key bsr 3, 0, F1, F2, F3,
				       F4, F5, F6, F7, TrUserData);
	    5 ->
		skip_32_TimersState(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, TrUserData)
	  end
    end;
dg_read_field_def_TimersState(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, _) ->
    #{connect_retry => F1, hold_time => F2,
      keepalive_interval => F3,
      minimum_advertisement_interval => F4,
      negotiated_hold_time => F5, uptime => F6,
      downtime => F7}.

d_field_TimersState_connect_retry(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData)
    when N < 57 ->
    d_field_TimersState_connect_retry(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      TrUserData);
d_field_TimersState_connect_retry(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, F6, F7,
				  TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7, TrUserData).


d_field_TimersState_hold_time(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_TimersState_hold_time(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData);
d_field_TimersState_hold_time(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7, TrUserData).


d_field_TimersState_keepalive_interval(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData)
    when N < 57 ->
    d_field_TimersState_keepalive_interval(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, TrUserData);
d_field_TimersState_keepalive_interval(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, F6, F7,
				       TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6, F7, TrUserData).


d_field_TimersState_minimum_advertisement_interval(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, TrUserData)
    when N < 57 ->
    d_field_TimersState_minimum_advertisement_interval(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       TrUserData);
d_field_TimersState_minimum_advertisement_interval(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, _, F5,
						   F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7, TrUserData).


d_field_TimersState_negotiated_hold_time(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7,
					 TrUserData)
    when N < 57 ->
    d_field_TimersState_negotiated_hold_time(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, TrUserData);
d_field_TimersState_negotiated_hold_time(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, _, F6, F7,
					 TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7, TrUserData).


d_field_TimersState_uptime(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_TimersState_uptime(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_TimersState_uptime(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7, TrUserData).


d_field_TimersState_downtime(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_TimersState_downtime(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_TimersState_downtime(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersState(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue, TrUserData).


skip_varint_TimersState(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_TimersState(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, TrUserData);
skip_varint_TimersState(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_TimersState(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData).


skip_length_delimited_TimersState(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_TimersState(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      TrUserData);
skip_length_delimited_TimersState(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimersState(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData).


skip_group_TimersState(Bin, FNum, Z2, F1, F2, F3, F4,
		       F5, F6, F7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimersState(Rest, 0, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData).


skip_32_TimersState(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_TimersState(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData).


skip_64_TimersState(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_TimersState(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData).


d_msg_TimersConfig(Bin, TrUserData) ->
    dfp_read_field_def_TimersConfig(Bin, 0, 0,
				    id(0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_TimersConfig(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_TimersConfig_connect_retry(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_TimersConfig(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_TimersConfig_hold_time(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData);
dfp_read_field_def_TimersConfig(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_TimersConfig_keepalive_interval(Rest, Z1, Z2,
					    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_TimersConfig(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_TimersConfig_minimum_advertisement_interval(Rest,
							Z1, Z2, F1, F2, F3, F4,
							TrUserData);
dfp_read_field_def_TimersConfig(<<>>, 0, 0, F1, F2, F3,
				F4, _) ->
    #{connect_retry => F1, hold_time => F2,
      keepalive_interval => F3,
      minimum_advertisement_interval => F4};
dfp_read_field_def_TimersConfig(Other, Z1, Z2, F1, F2,
				F3, F4, TrUserData) ->
    dg_read_field_def_TimersConfig(Other, Z1, Z2, F1, F2,
				   F3, F4, TrUserData).

dg_read_field_def_TimersConfig(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TimersConfig(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_TimersConfig(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TimersConfig_connect_retry(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      16 ->
	  d_field_TimersConfig_hold_time(Rest, 0, 0, F1, F2, F3,
					 F4, TrUserData);
      24 ->
	  d_field_TimersConfig_keepalive_interval(Rest, 0, 0, F1,
						  F2, F3, F4, TrUserData);
      32 ->
	  d_field_TimersConfig_minimum_advertisement_interval(Rest,
							      0, 0, F1, F2, F3,
							      F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TimersConfig(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    1 ->
		skip_64_TimersConfig(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
	    2 ->
		skip_length_delimited_TimersConfig(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData);
	    3 ->
		skip_group_TimersConfig(Rest, Key bsr 3, 0, F1, F2, F3,
					F4, TrUserData);
	    5 ->
		skip_32_TimersConfig(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData)
	  end
    end;
dg_read_field_def_TimersConfig(<<>>, 0, 0, F1, F2, F3,
			       F4, _) ->
    #{connect_retry => F1, hold_time => F2,
      keepalive_interval => F3,
      minimum_advertisement_interval => F4}.

d_field_TimersConfig_connect_retry(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_TimersConfig_connect_retry(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_TimersConfig_connect_retry(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersConfig(Rest, 0, 0, NewFValue,
				    F2, F3, F4, TrUserData).


d_field_TimersConfig_hold_time(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_TimersConfig_hold_time(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_TimersConfig_hold_time(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersConfig(Rest, 0, 0, F1,
				    NewFValue, F3, F4, TrUserData).


d_field_TimersConfig_keepalive_interval(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_TimersConfig_keepalive_interval(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
d_field_TimersConfig_keepalive_interval(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersConfig(Rest, 0, 0, F1, F2,
				    NewFValue, F4, TrUserData).


d_field_TimersConfig_minimum_advertisement_interval(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4,
						    TrUserData)
    when N < 57 ->
    d_field_TimersConfig_minimum_advertisement_interval(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4,
							TrUserData);
d_field_TimersConfig_minimum_advertisement_interval(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, _,
						    TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TimersConfig(Rest, 0, 0, F1, F2, F3,
				    NewFValue, TrUserData).


skip_varint_TimersConfig(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_TimersConfig(Rest, Z1, Z2, F1, F2, F3, F4,
			     TrUserData);
skip_varint_TimersConfig(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_TimersConfig(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_length_delimited_TimersConfig(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_TimersConfig(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
skip_length_delimited_TimersConfig(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimersConfig(Rest2, 0, 0, F1, F2, F3,
				    F4, TrUserData).


skip_group_TimersConfig(Bin, FNum, Z2, F1, F2, F3, F4,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimersConfig(Rest, 0, Z2, F1, F2, F3,
				    F4, TrUserData).


skip_32_TimersConfig(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_TimersConfig(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_64_TimersConfig(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_TimersConfig(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


d_msg_Timers(Bin, TrUserData) ->
    dfp_read_field_def_Timers(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Timers(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_Timers_config(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Timers(<<18, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_Timers_state(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Timers(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2};
dfp_read_field_def_Timers(Other, Z1, Z2, F1, F2,
			  TrUserData) ->
    dg_read_field_def_Timers(Other, Z1, Z2, F1, F2,
			     TrUserData).

dg_read_field_def_Timers(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Timers(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
dg_read_field_def_Timers(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Timers_config(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Timers_state(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Timers(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Timers(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Timers(Rest, 0, 0, F1, F2,
					     TrUserData);
	    3 ->
		skip_group_Timers(Rest, Key bsr 3, 0, F1, F2,
				  TrUserData);
	    5 -> skip_32_Timers(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Timers(<<>>, 0, 0, F1, F2, _) ->
    #{config => F1, state => F2}.

d_field_Timers_config(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_Timers_config(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_Timers_config(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TimersConfig(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Timers(Rest2, 0, 0,
			      if F1 == undefined -> NewFValue;
				 true ->
				     merge_msg_TimersConfig(F1, NewFValue,
							    TrUserData)
			      end,
			      F2, TrUserData).


d_field_Timers_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData)
    when N < 57 ->
    d_field_Timers_state(Rest, N + 7, X bsl N + Acc, F1, F2,
			 TrUserData);
d_field_Timers_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TimersState(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Timers(Rest2, 0, 0, F1,
			      if F2 == undefined -> NewFValue;
				 true ->
				     merge_msg_TimersState(F2, NewFValue,
							   TrUserData)
			      end,
			      TrUserData).


skip_varint_Timers(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    skip_varint_Timers(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Timers(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    dfp_read_field_def_Timers(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_length_delimited_Timers(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Timers(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
skip_length_delimited_Timers(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Timers(Rest2, 0, 0, F1, F2,
			      TrUserData).


skip_group_Timers(Bin, FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Timers(Rest, 0, Z2, F1, F2,
			      TrUserData).


skip_32_Timers(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_Timers(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_64_Timers(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_Timers(Rest, Z1, Z2, F1, F2,
			      TrUserData).


d_msg_Queues(Bin, TrUserData) ->
    dfp_read_field_def_Queues(Bin, 0, 0, id(0, TrUserData),
			      id(0, TrUserData), TrUserData).

dfp_read_field_def_Queues(<<8, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_Queues_input(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Queues(<<16, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_Queues_output(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Queues(<<>>, 0, 0, F1, F2, _) ->
    #{input => F1, output => F2};
dfp_read_field_def_Queues(Other, Z1, Z2, F1, F2,
			  TrUserData) ->
    dg_read_field_def_Queues(Other, Z1, Z2, F1, F2,
			     TrUserData).

dg_read_field_def_Queues(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Queues(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
dg_read_field_def_Queues(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Queues_input(Rest, 0, 0, F1, F2, TrUserData);
      16 ->
	  d_field_Queues_output(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Queues(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Queues(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Queues(Rest, 0, 0, F1, F2,
					     TrUserData);
	    3 ->
		skip_group_Queues(Rest, Key bsr 3, 0, F1, F2,
				  TrUserData);
	    5 -> skip_32_Queues(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Queues(<<>>, 0, 0, F1, F2, _) ->
    #{input => F1, output => F2}.

d_field_Queues_input(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData)
    when N < 57 ->
    d_field_Queues_input(Rest, N + 7, X bsl N + Acc, F1, F2,
			 TrUserData);
d_field_Queues_input(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Queues(Rest, 0, 0, NewFValue, F2,
			      TrUserData).


d_field_Queues_output(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_Queues_output(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_Queues_output(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Queues(Rest, 0, 0, F1, NewFValue,
			      TrUserData).


skip_varint_Queues(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    skip_varint_Queues(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Queues(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    dfp_read_field_def_Queues(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_length_delimited_Queues(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Queues(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
skip_length_delimited_Queues(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Queues(Rest2, 0, 0, F1, F2,
			      TrUserData).


skip_group_Queues(Bin, FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Queues(Rest, 0, Z2, F1, F2,
			      TrUserData).


skip_32_Queues(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_Queues(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_64_Queues(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_Queues(Rest, Z1, Z2, F1, F2,
			      TrUserData).


d_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0, id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       TrUserData).

dfp_read_field_def_Message(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_NOTIFICATION(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Message(<<16, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_UPDATE(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, TrUserData);
dfp_read_field_def_Message(<<24, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_OPEN(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, TrUserData);
dfp_read_field_def_Message(<<32, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_KEEPALIVE(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_Message(<<40, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_REFRESH(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, TrUserData);
dfp_read_field_def_Message(<<48, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_DISCARDED(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_Message(<<56, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Message_TOTAL(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, _) ->
    #{'NOTIFICATION' => F1, 'UPDATE' => F2, 'OPEN' => F3,
      'KEEPALIVE' => F4, 'REFRESH' => F5, 'DISCARDED' => F6,
      'TOTAL' => F7};
dfp_read_field_def_Message(Other, Z1, Z2, F1, F2, F3,
			   F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Message_NOTIFICATION(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      16 ->
	  d_field_Message_UPDATE(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, TrUserData);
      24 ->
	  d_field_Message_OPEN(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, TrUserData);
      32 ->
	  d_field_Message_KEEPALIVE(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      40 ->
	  d_field_Message_REFRESH(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, TrUserData);
      48 ->
	  d_field_Message_DISCARDED(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      56 ->
	  d_field_Message_TOTAL(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				   F5, F6, F7, TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, F6, F7, _) ->
    #{'NOTIFICATION' => F1, 'UPDATE' => F2, 'OPEN' => F3,
      'KEEPALIVE' => F4, 'REFRESH' => F5, 'DISCARDED' => F6,
      'TOTAL' => F7}.

d_field_Message_NOTIFICATION(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_NOTIFICATION(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Message_NOTIFICATION(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, NewFValue, F2,
			       F3, F4, F5, F6, F7, TrUserData).


d_field_Message_UPDATE(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_UPDATE(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Message_UPDATE(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, F1, NewFValue,
			       F3, F4, F5, F6, F7, TrUserData).


d_field_Message_OPEN(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_OPEN(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, TrUserData);
d_field_Message_OPEN(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _, F4, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, F1, F2,
			       NewFValue, F4, F5, F6, F7, TrUserData).


d_field_Message_KEEPALIVE(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_KEEPALIVE(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Message_KEEPALIVE(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, F1, F2, F3,
			       NewFValue, F5, F6, F7, TrUserData).


d_field_Message_REFRESH(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_REFRESH(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Message_REFRESH(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, _, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, F1, F2, F3, F4,
			       NewFValue, F6, F7, TrUserData).


d_field_Message_DISCARDED(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_DISCARDED(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Message_DISCARDED(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, F1, F2, F3, F4,
			       F5, NewFValue, F7, TrUserData).


d_field_Message_TOTAL(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Message_TOTAL(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Message_TOTAL(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Message(Rest, 0, 0, F1, F2, F3, F4,
			       F5, F6, NewFValue, TrUserData).


skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData).


skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData).


skip_group_Message(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		   F6, F7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData).


skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData).


skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData).


d_msg_Messages(Bin, TrUserData) ->
    dfp_read_field_def_Messages(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Messages(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_Messages_received(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_Messages(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_Messages_sent(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Messages(<<>>, 0, 0, F1, F2, _) ->
    #{received => F1, sent => F2};
dfp_read_field_def_Messages(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_Messages(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_Messages(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Messages(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_Messages(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Messages_received(Rest, 0, 0, F1, F2,
				    TrUserData);
      18 ->
	  d_field_Messages_sent(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Messages(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Messages(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Messages(Rest, 0, 0, F1, F2,
					       TrUserData);
	    3 ->
		skip_group_Messages(Rest, Key bsr 3, 0, F1, F2,
				    TrUserData);
	    5 -> skip_32_Messages(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Messages(<<>>, 0, 0, F1, F2, _) ->
    #{received => F1, sent => F2}.

d_field_Messages_received(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Messages_received(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_Messages_received(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Message(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Messages(Rest2, 0, 0,
				if F1 == undefined -> NewFValue;
				   true ->
				       merge_msg_Message(F1, NewFValue,
							 TrUserData)
				end,
				F2, TrUserData).


d_field_Messages_sent(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_Messages_sent(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_Messages_sent(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Message(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Messages(Rest2, 0, 0, F1,
				if F2 == undefined -> NewFValue;
				   true ->
				       merge_msg_Message(F2, NewFValue,
							 TrUserData)
				end,
				TrUserData).


skip_varint_Messages(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_Messages(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Messages(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_Messages(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_Messages(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Messages(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_Messages(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Messages(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_group_Messages(Bin, FNum, Z2, F1, F2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Messages(Rest, 0, Z2, F1, F2,
				TrUserData).


skip_32_Messages(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_Messages(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_Messages(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_Messages(Rest, Z1, Z2, F1, F2,
				TrUserData).


d_msg_PeerState(Bin, TrUserData) ->
    dfp_read_field_def_PeerState(Bin, 0, 0,
				 id([], TrUserData), id([], TrUserData),
				 id(0, TrUserData), id(undefined, TrUserData),
				 id([], TrUserData), id(0, TrUserData),
				 id([], TrUserData), id(0, TrUserData),
				 id(undefined, TrUserData), id(0, TrUserData),
				 id(false, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id([], TrUserData),
				 id([], TrUserData), id('UP', TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_PeerState(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_auth_password(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    TrUserData);
dfp_read_field_def_PeerState(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_description(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21,
				  TrUserData);
dfp_read_field_def_PeerState(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_local_as(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_messages(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_neighbor_address(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_peer_as(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<58, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_peer_group(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData);
dfp_read_field_def_PeerState(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_peer_type(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<74, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_queues(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<80, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_remove_private_as(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<88, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_route_flap_damping(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<96, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_send_community(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, TrUserData);
dfp_read_field_def_PeerState(<<104, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_session_state(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    TrUserData);
dfp_read_field_def_PeerState(<<114, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_supported_capabilities(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21,
					     TrUserData);
dfp_read_field_def_PeerState(<<122, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData) ->
    d_field_PeerState_bgp_state(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<128, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    d_field_PeerState_admin_state(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21,
				  TrUserData);
dfp_read_field_def_PeerState(<<136, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    d_field_PeerState_received(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<144, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    d_field_PeerState_accepted(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<152, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    d_field_PeerState_advertised(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData);
dfp_read_field_def_PeerState(<<160, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    d_field_PeerState_out_q(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<168, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    d_field_PeerState_flops(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, F20, F21, TrUserData);
dfp_read_field_def_PeerState(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, TrUserData) ->
    #{auth_password => F1, description => F2,
      local_as => F3, messages => F4, neighbor_address => F5,
      peer_as => F6, peer_group => F7, peer_type => F8,
      queues => F9, remove_private_as => F10,
      route_flap_damping => F11, send_community => F12,
      session_state => F13,
      supported_capabilities =>
	  lists_reverse(F14, TrUserData),
      bgp_state => F15, admin_state => F16, received => F17,
      accepted => F18, advertised => F19, out_q => F20,
      flops => F21};
dfp_read_field_def_PeerState(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			     F15, F16, F17, F18, F19, F20, F21, TrUserData) ->
    dg_read_field_def_PeerState(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, TrUserData).

dg_read_field_def_PeerState(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PeerState(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, TrUserData);
dg_read_field_def_PeerState(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PeerState_auth_password(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, TrUserData);
      18 ->
	  d_field_PeerState_description(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, TrUserData);
      24 ->
	  d_field_PeerState_local_as(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     TrUserData);
      34 ->
	  d_field_PeerState_messages(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     TrUserData);
      42 ->
	  d_field_PeerState_neighbor_address(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, TrUserData);
      48 ->
	  d_field_PeerState_peer_as(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21,
				    TrUserData);
      58 ->
	  d_field_PeerState_peer_group(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19, F20, F21,
				       TrUserData);
      64 ->
	  d_field_PeerState_peer_type(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, F20, F21,
				      TrUserData);
      74 ->
	  d_field_PeerState_queues(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, TrUserData);
      80 ->
	  d_field_PeerState_remove_private_as(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, TrUserData);
      88 ->
	  d_field_PeerState_route_flap_damping(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21,
					       TrUserData);
      96 ->
	  d_field_PeerState_send_community(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, TrUserData);
      104 ->
	  d_field_PeerState_session_state(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, TrUserData);
      114 ->
	  d_field_PeerState_supported_capabilities(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, TrUserData);
      122 ->
	  d_field_PeerState_bgp_state(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, F20, F21,
				      TrUserData);
      128 ->
	  d_field_PeerState_admin_state(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, TrUserData);
      136 ->
	  d_field_PeerState_received(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     TrUserData);
      144 ->
	  d_field_PeerState_accepted(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     TrUserData);
      152 ->
	  d_field_PeerState_advertised(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19, F20, F21,
				       TrUserData);
      160 ->
	  d_field_PeerState_out_q(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18, F19, F20, F21, TrUserData);
      168 ->
	  d_field_PeerState_flops(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18, F19, F20, F21, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PeerState(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15, F16, F17, F18, F19, F20, F21,
				      TrUserData);
	    1 ->
		skip_64_PeerState(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  F17, F18, F19, F20, F21, TrUserData);
	    2 ->
		skip_length_delimited_PeerState(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, F13, F14, F15, F16,
						F17, F18, F19, F20, F21,
						TrUserData);
	    3 ->
		skip_group_PeerState(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     TrUserData);
	    5 ->
		skip_32_PeerState(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  F17, F18, F19, F20, F21, TrUserData)
	  end
    end;
dg_read_field_def_PeerState(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, F20, F21, TrUserData) ->
    #{auth_password => F1, description => F2,
      local_as => F3, messages => F4, neighbor_address => F5,
      peer_as => F6, peer_group => F7, peer_type => F8,
      queues => F9, remove_private_as => F10,
      route_flap_damping => F11, send_community => F12,
      session_state => F13,
      supported_capabilities =>
	  lists_reverse(F14, TrUserData),
      bgp_state => F15, admin_state => F16, received => F17,
      accepted => F18, advertised => F19, out_q => F20,
      flops => F21}.

d_field_PeerState_auth_password(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_auth_password(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, TrUserData);
d_field_PeerState_auth_password(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerState(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_description(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_description(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, TrUserData);
d_field_PeerState_description(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_local_as(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   TrUserData)
    when N < 57 ->
    d_field_PeerState_local_as(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			       TrUserData);
d_field_PeerState_local_as(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, TrUserData).


d_field_PeerState_messages(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   TrUserData)
    when N < 57 ->
    d_field_PeerState_messages(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			       TrUserData);
d_field_PeerState_messages(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Messages(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 if F4 == undefined -> NewFValue;
				    true ->
					merge_msg_Messages(F4, NewFValue,
							   TrUserData)
				 end,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, F17, F18, F19, F20, F21, TrUserData).


d_field_PeerState_neighbor_address(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_neighbor_address(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21,
				       TrUserData);
d_field_PeerState_neighbor_address(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 F4, NewFValue, F6, F7, F8, F9, F10, F11, F12,
				 F13, F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_peer_as(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			  TrUserData)
    when N < 57 ->
    d_field_PeerState_peer_as(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21,
			      TrUserData);
d_field_PeerState_peer_as(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15, F16, F17, F18, F19, F20, F21,
			  TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_peer_group(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_peer_group(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, TrUserData);
d_field_PeerState_peer_group(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, NewFValue, F8, F9, F10, F11, F12,
				 F13, F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_peer_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_peer_type(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, TrUserData);
d_field_PeerState_peer_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			    TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_queues(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21,
			 TrUserData)
    when N < 57 ->
    d_field_PeerState_queues(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21,
			     TrUserData);
d_field_PeerState_queues(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21,
			 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Queues(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8,
				 if F9 == undefined -> NewFValue;
				    true ->
					merge_msg_Queues(F9, NewFValue,
							 TrUserData)
				 end,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, TrUserData).


d_field_PeerState_remove_private_as(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_remove_private_as(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21,
					TrUserData);
d_field_PeerState_remove_private_as(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    _, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, NewFValue, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_route_flap_damping(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_route_flap_damping(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21,
					 TrUserData);
d_field_PeerState_route_flap_damping(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, _, F12, F13, F14, F15, F16, F17, F18,
				     F19, F20, F21, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, NewFValue, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_send_community(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_send_community(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, TrUserData);
d_field_PeerState_send_community(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, _, F13, F14, F15, F16, F17, F18, F19,
				 F20, F21, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, NewFValue, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_session_state(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_session_state(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, TrUserData);
d_field_PeerState_session_state(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, _, F14, F15, F16, F17, F18, F19, F20,
				F21, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, NewFValue,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_supported_capabilities(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_supported_capabilities(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, TrUserData);
d_field_PeerState_supported_capabilities(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 cons(NewFValue, F14, TrUserData), F15, F16,
				 F17, F18, F19, F20, F21, TrUserData).


d_field_PeerState_bgp_state(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_bgp_state(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, TrUserData);
d_field_PeerState_bgp_state(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, _, F16, F17, F18, F19, F20, F21,
			    TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, NewFValue, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_admin_state(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_admin_state(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, TrUserData);
d_field_PeerState_admin_state(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, _, F17, F18, F19, F20,
			      F21, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_PeerState.AdminState'(Tmp),
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, NewFValue, F17, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_received(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   TrUserData)
    when N < 57 ->
    d_field_PeerState_received(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			       TrUserData);
d_field_PeerState_received(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, _, F18, F19, F20, F21,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, NewFValue, F18, F19, F20, F21,
				 TrUserData).


d_field_PeerState_accepted(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   TrUserData)
    when N < 57 ->
    d_field_PeerState_accepted(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			       TrUserData);
d_field_PeerState_accepted(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, _, F19, F20, F21,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, F17, NewFValue, F19, F20, F21,
				 TrUserData).


d_field_PeerState_advertised(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_advertised(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, TrUserData);
d_field_PeerState_advertised(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, _, F20,
			     F21, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, F17, F18, NewFValue, F20, F21,
				 TrUserData).


d_field_PeerState_out_q(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_out_q(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18, F19, F20, F21, TrUserData);
d_field_PeerState_out_q(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, _, F21,
			TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, F17, F18, F19, NewFValue, F21,
				 TrUserData).


d_field_PeerState_flops(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, F20, F21, TrUserData)
    when N < 57 ->
    d_field_PeerState_flops(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18, F19, F20, F21, TrUserData);
d_field_PeerState_flops(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, F20, _,
			TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PeerState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, F17, F18, F19, F20, NewFValue,
				 TrUserData).


skip_varint_PeerState(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, F17, F18, F19, F20, F21, TrUserData) ->
    skip_varint_PeerState(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			  F17, F18, F19, F20, F21, TrUserData);
skip_varint_PeerState(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, F17, F18, F19, F20, F21, TrUserData) ->
    dfp_read_field_def_PeerState(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


skip_length_delimited_PeerState(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, TrUserData)
    when N < 57 ->
    skip_length_delimited_PeerState(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, TrUserData);
skip_length_delimited_PeerState(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PeerState(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


skip_group_PeerState(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		     F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
		     F18, F19, F20, F21, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PeerState(Rest, 0, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


skip_32_PeerState(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, F20, F21, TrUserData) ->
    dfp_read_field_def_PeerState(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


skip_64_PeerState(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, F20, F21, TrUserData) ->
    dfp_read_field_def_PeerState(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21,
				 TrUserData).


d_msg_RouteReflector(Bin, TrUserData) ->
    dfp_read_field_def_RouteReflector(Bin, 0, 0,
				      id(false, TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_RouteReflector(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_RouteReflector_route_reflector_client(Rest, Z1,
						  Z2, F1, F2, TrUserData);
dfp_read_field_def_RouteReflector(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_RouteReflector_route_reflector_cluster_id(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData);
dfp_read_field_def_RouteReflector(<<>>, 0, 0, F1, F2,
				  _) ->
    #{route_reflector_client => F1,
      route_reflector_cluster_id => F2};
dfp_read_field_def_RouteReflector(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_RouteReflector(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_RouteReflector(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RouteReflector(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_RouteReflector(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RouteReflector_route_reflector_client(Rest, 0,
							0, F1, F2, TrUserData);
      18 ->
	  d_field_RouteReflector_route_reflector_cluster_id(Rest,
							    0, 0, F1, F2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RouteReflector(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_RouteReflector(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_RouteReflector(Rest, 0, 0, F1, F2,
						     TrUserData);
	    3 ->
		skip_group_RouteReflector(Rest, Key bsr 3, 0, F1, F2,
					  TrUserData);
	    5 ->
		skip_32_RouteReflector(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_RouteReflector(<<>>, 0, 0, F1, F2,
				 _) ->
    #{route_reflector_client => F1,
      route_reflector_cluster_id => F2}.

d_field_RouteReflector_route_reflector_client(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RouteReflector_route_reflector_client(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
d_field_RouteReflector_route_reflector_client(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RouteReflector(Rest, 0, 0, NewFValue,
				      F2, TrUserData).


d_field_RouteReflector_route_reflector_cluster_id(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RouteReflector_route_reflector_cluster_id(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, TrUserData);
d_field_RouteReflector_route_reflector_cluster_id(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RouteReflector(Rest2, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_RouteReflector(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_RouteReflector(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_RouteReflector(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RouteReflector(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_RouteReflector(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RouteReflector(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_RouteReflector(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RouteReflector(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_group_RouteReflector(Bin, FNum, Z2, F1, F2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RouteReflector(Rest, 0, Z2, F1, F2,
				      TrUserData).


skip_32_RouteReflector(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_RouteReflector(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_RouteReflector(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_RouteReflector(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_EbgpMultihop(Bin, TrUserData) ->
    dfp_read_field_def_EbgpMultihop(Bin, 0, 0,
				    id(false, TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_EbgpMultihop(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_EbgpMultihop_enabled(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_EbgpMultihop(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_EbgpMultihop_multihop_ttl(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_EbgpMultihop(<<>>, 0, 0, F1, F2,
				_) ->
    #{enabled => F1, multihop_ttl => F2};
dfp_read_field_def_EbgpMultihop(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_EbgpMultihop(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_EbgpMultihop(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EbgpMultihop(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_EbgpMultihop(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EbgpMultihop_enabled(Rest, 0, 0, F1, F2,
				       TrUserData);
      16 ->
	  d_field_EbgpMultihop_multihop_ttl(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EbgpMultihop(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_EbgpMultihop(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_EbgpMultihop(Rest, 0, 0, F1, F2,
						   TrUserData);
	    3 ->
		skip_group_EbgpMultihop(Rest, Key bsr 3, 0, F1, F2,
					TrUserData);
	    5 ->
		skip_32_EbgpMultihop(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_EbgpMultihop(<<>>, 0, 0, F1, F2, _) ->
    #{enabled => F1, multihop_ttl => F2}.

d_field_EbgpMultihop_enabled(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EbgpMultihop_enabled(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_EbgpMultihop_enabled(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EbgpMultihop(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_EbgpMultihop_multihop_ttl(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EbgpMultihop_multihop_ttl(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_EbgpMultihop_multihop_ttl(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_EbgpMultihop(Rest, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_EbgpMultihop(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_EbgpMultihop(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_EbgpMultihop(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_EbgpMultihop(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_EbgpMultihop(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EbgpMultihop(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_EbgpMultihop(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EbgpMultihop(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_group_EbgpMultihop(Bin, FNum, Z2, F1, F2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EbgpMultihop(Rest, 0, Z2, F1, F2,
				    TrUserData).


skip_32_EbgpMultihop(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_EbgpMultihop(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_EbgpMultihop(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_EbgpMultihop(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_Peer(Bin, TrUserData) ->
    dfp_read_field_def_Peer(Bin, 0, 0, id([], TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), id([], TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Peer(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_pfield_Peer_families(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<8, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_families(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_apply_policy(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_conf(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_ebgp_multihop(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<42, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_route_reflector(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12,
				 TrUserData);
dfp_read_field_def_Peer(<<50, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_info(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<58, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_timers(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<66, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_transport(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<74, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_route_server(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<82, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_graceful_restart(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData);
dfp_read_field_def_Peer(<<90, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_afi_safis(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<98, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    d_field_Peer_add_paths(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_Peer(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, TrUserData) ->
    #{families => lists_reverse(F1, TrUserData),
      apply_policy => F2, conf => F3, ebgp_multihop => F4,
      route_reflector => F5, info => F6, timers => F7,
      transport => F8, route_server => F9,
      graceful_restart => F10,
      afi_safis => lists_reverse(F11, TrUserData),
      add_paths => F12};
dfp_read_field_def_Peer(Other, Z1, Z2, F1, F2, F3, F4,
			F5, F6, F7, F8, F9, F10, F11, F12, TrUserData) ->
    dg_read_field_def_Peer(Other, Z1, Z2, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).

dg_read_field_def_Peer(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Peer(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			   TrUserData);
dg_read_field_def_Peer(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_Peer_families(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, TrUserData);
      8 ->
	  d_field_Peer_families(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, TrUserData);
      18 ->
	  d_field_Peer_apply_policy(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12,
				    TrUserData);
      26 ->
	  d_field_Peer_conf(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, TrUserData);
      34 ->
	  d_field_Peer_ebgp_multihop(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
      42 ->
	  d_field_Peer_route_reflector(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12,
				       TrUserData);
      50 ->
	  d_field_Peer_info(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, TrUserData);
      58 ->
	  d_field_Peer_timers(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, TrUserData);
      66 ->
	  d_field_Peer_transport(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, TrUserData);
      74 ->
	  d_field_Peer_route_server(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12,
				    TrUserData);
      82 ->
	  d_field_Peer_graceful_restart(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					TrUserData);
      90 ->
	  d_field_Peer_afi_safis(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, TrUserData);
      98 ->
	  d_field_Peer_add_paths(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Peer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12, TrUserData);
	    1 ->
		skip_64_Peer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, F10, F11, F12, TrUserData);
	    2 ->
		skip_length_delimited_Peer(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   TrUserData);
	    3 ->
		skip_group_Peer(Rest, Key bsr 3, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, TrUserData);
	    5 ->
		skip_32_Peer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, F10, F11, F12, TrUserData)
	  end
    end;
dg_read_field_def_Peer(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       F6, F7, F8, F9, F10, F11, F12, TrUserData) ->
    #{families => lists_reverse(F1, TrUserData),
      apply_policy => F2, conf => F3, ebgp_multihop => F4,
      route_reflector => F5, info => F6, timers => F7,
      transport => F8, route_server => F9,
      graceful_restart => F10,
      afi_safis => lists_reverse(F11, TrUserData),
      add_paths => F12}.

d_field_Peer_families(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		      TrUserData)
    when N < 57 ->
    d_field_Peer_families(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  TrUserData);
d_field_Peer_families(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		      TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Peer(Rest, 0, 0,
			    cons(NewFValue, F1, TrUserData), F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, TrUserData).

d_pfield_Peer_families(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData)
    when N < 57 ->
    d_pfield_Peer_families(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			   TrUserData);
d_pfield_Peer_families(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_Peer_families(PackedBytes, 0, 0,
					  F1),
    dfp_read_field_def_Peer(Rest2, 0, 0, NewSeq, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).


d_packed_field_Peer_families(<<1:1, X:7, Rest/binary>>,
			     N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_Peer_families(Rest, N + 7, X bsl N + Acc,
				 AccSeq);
d_packed_field_Peer_families(<<0:1, X:7, Rest/binary>>,
			     N, Acc, AccSeq) ->
    NewFValue = X bsl N + Acc,
    d_packed_field_Peer_families(Rest, 0, 0,
				 [NewFValue | AccSeq]);
d_packed_field_Peer_families(<<>>, 0, 0, AccSeq) ->
    AccSeq.


d_field_Peer_apply_policy(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, TrUserData)
    when N < 57 ->
    d_field_Peer_apply_policy(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      TrUserData);
d_field_Peer_apply_policy(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ApplyPolicy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   merge_msg_ApplyPolicy(F2, NewFValue,
							 TrUserData)
			    end,
			    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    TrUserData).


d_field_Peer_conf(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		  TrUserData)
    when N < 57 ->
    d_field_Peer_conf(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
d_field_Peer_conf(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PeerConf(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2,
			    if F3 == undefined -> NewFValue;
			       true ->
				   merge_msg_PeerConf(F3, NewFValue, TrUserData)
			    end,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).


d_field_Peer_ebgp_multihop(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData)
    when N < 57 ->
    d_field_Peer_ebgp_multihop(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, TrUserData);
d_field_Peer_ebgp_multihop(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EbgpMultihop(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3,
			    if F4 == undefined -> NewFValue;
			       true ->
				   merge_msg_EbgpMultihop(F4, NewFValue,
							  TrUserData)
			    end,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).


d_field_Peer_route_reflector(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, TrUserData)
    when N < 57 ->
    d_field_Peer_route_reflector(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, TrUserData);
d_field_Peer_route_reflector(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteReflector(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4,
			    if F5 == undefined -> NewFValue;
			       true ->
				   merge_msg_RouteReflector(F5, NewFValue,
							    TrUserData)
			    end,
			    F6, F7, F8, F9, F10, F11, F12, TrUserData).


d_field_Peer_info(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		  TrUserData)
    when N < 57 ->
    d_field_Peer_info(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
d_field_Peer_info(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PeerState(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    if F6 == undefined -> NewFValue;
			       true ->
				   merge_msg_PeerState(F6, NewFValue,
						       TrUserData)
			    end,
			    F7, F8, F9, F10, F11, F12, TrUserData).


d_field_Peer_timers(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		    TrUserData)
    when N < 57 ->
    d_field_Peer_timers(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
d_field_Peer_timers(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Timers(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6,
			    if F7 == undefined -> NewFValue;
			       true ->
				   merge_msg_Timers(F7, NewFValue, TrUserData)
			    end,
			    F8, F9, F10, F11, F12, TrUserData).


d_field_Peer_transport(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData)
    when N < 57 ->
    d_field_Peer_transport(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			   TrUserData);
d_field_Peer_transport(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Transport(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7,
			    if F8 == undefined -> NewFValue;
			       true ->
				   merge_msg_Transport(F8, NewFValue,
						       TrUserData)
			    end,
			    F9, F10, F11, F12, TrUserData).


d_field_Peer_route_server(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, TrUserData)
    when N < 57 ->
    d_field_Peer_route_server(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      TrUserData);
d_field_Peer_route_server(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RouteServer(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8,
			    if F9 == undefined -> NewFValue;
			       true ->
				   merge_msg_RouteServer(F9, NewFValue,
							 TrUserData)
			    end,
			    F10, F11, F12, TrUserData).


d_field_Peer_graceful_restart(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, TrUserData)
    when N < 57 ->
    d_field_Peer_graceful_restart(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, TrUserData);
d_field_Peer_graceful_restart(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_GracefulRestart(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9,
			    if F10 == undefined -> NewFValue;
			       true ->
				   merge_msg_GracefulRestart(F10, NewFValue,
							     TrUserData)
			    end,
			    F11, F12, TrUserData).


d_field_Peer_afi_safis(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData)
    when N < 57 ->
    d_field_Peer_afi_safis(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			   TrUserData);
d_field_Peer_afi_safis(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AfiSafi(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10,
			    cons(NewFValue, F11, TrUserData), F12, TrUserData).


d_field_Peer_add_paths(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData)
    when N < 57 ->
    d_field_Peer_add_paths(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			   TrUserData);
d_field_Peer_add_paths(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_AddPaths(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11,
			    if F12 == undefined -> NewFValue;
			       true ->
				   merge_msg_AddPaths(F12, NewFValue,
						      TrUserData)
			    end,
			    TrUserData).


skip_varint_Peer(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		 TrUserData) ->
    skip_varint_Peer(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, F9, F10, F11, F12, TrUserData);
skip_varint_Peer(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		 TrUserData) ->
    dfp_read_field_def_Peer(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).


skip_length_delimited_Peer(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData)
    when N < 57 ->
    skip_length_delimited_Peer(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, TrUserData);
skip_length_delimited_Peer(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Peer(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, TrUserData).


skip_group_Peer(Bin, FNum, Z2, F1, F2, F3, F4, F5, F6,
		F7, F8, F9, F10, F11, F12, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Peer(Rest, 0, Z2, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, TrUserData).


skip_32_Peer(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, F10, F11, F12, TrUserData) ->
    dfp_read_field_def_Peer(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).


skip_64_Peer(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, F10, F11, F12, TrUserData) ->
    dfp_read_field_def_Peer(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData).


d_msg_AddNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddNeighborRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_AddNeighborRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_AddNeighborRequest_peer(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_AddNeighborRequest(<<>>, 0, 0, F1,
				      _) ->
    #{peer => F1};
dfp_read_field_def_AddNeighborRequest(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_AddNeighborRequest(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_AddNeighborRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddNeighborRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_AddNeighborRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddNeighborRequest_peer(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddNeighborRequest(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_AddNeighborRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_AddNeighborRequest(Rest, 0, 0, F1,
							 TrUserData);
	    3 ->
		skip_group_AddNeighborRequest(Rest, Key bsr 3, 0, F1,
					      TrUserData);
	    5 ->
		skip_32_AddNeighborRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_AddNeighborRequest(<<>>, 0, 0, F1,
				     _) ->
    #{peer => F1}.

d_field_AddNeighborRequest_peer(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_AddNeighborRequest_peer(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_AddNeighborRequest_peer(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Peer(Bs, TrUserData), TrUserData),
    dfp_read_field_def_AddNeighborRequest(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 merge_msg_Peer(F1, NewFValue,
								TrUserData)
					  end,
					  TrUserData).


skip_varint_AddNeighborRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_AddNeighborRequest(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_AddNeighborRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddNeighborRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_AddNeighborRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddNeighborRequest(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_AddNeighborRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddNeighborRequest(Rest2, 0, 0, F1,
					  TrUserData).


skip_group_AddNeighborRequest(Bin, FNum, Z2, F1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddNeighborRequest(Rest, 0, Z2, F1,
					  TrUserData).


skip_32_AddNeighborRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_AddNeighborRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_AddNeighborRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_AddNeighborRequest(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_ValidateRibRequest(Bin, TrUserData) ->
    dfp_read_field_def_ValidateRibRequest(Bin, 0, 0,
					  id('GLOBAL', TrUserData),
					  id(0, TrUserData), id([], TrUserData),
					  TrUserData).

dfp_read_field_def_ValidateRibRequest(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ValidateRibRequest_type(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_ValidateRibRequest(<<16,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ValidateRibRequest_family(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_ValidateRibRequest(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ValidateRibRequest_prefix(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_ValidateRibRequest(<<>>, 0, 0, F1,
				      F2, F3, _) ->
    #{type => F1, family => F2, prefix => F3};
dfp_read_field_def_ValidateRibRequest(Other, Z1, Z2, F1,
				      F2, F3, TrUserData) ->
    dg_read_field_def_ValidateRibRequest(Other, Z1, Z2, F1,
					 F2, F3, TrUserData).

dg_read_field_def_ValidateRibRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ValidateRibRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_ValidateRibRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ValidateRibRequest_type(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      16 ->
	  d_field_ValidateRibRequest_family(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      26 ->
	  d_field_ValidateRibRequest_prefix(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ValidateRibRequest(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    1 ->
		skip_64_ValidateRibRequest(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    2 ->
		skip_length_delimited_ValidateRibRequest(Rest, 0, 0, F1,
							 F2, F3, TrUserData);
	    3 ->
		skip_group_ValidateRibRequest(Rest, Key bsr 3, 0, F1,
					      F2, F3, TrUserData);
	    5 ->
		skip_32_ValidateRibRequest(Rest, 0, 0, F1, F2, F3,
					   TrUserData)
	  end
    end;
dg_read_field_def_ValidateRibRequest(<<>>, 0, 0, F1, F2,
				     F3, _) ->
    #{type => F1, family => F2, prefix => F3}.

d_field_ValidateRibRequest_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ValidateRibRequest_type(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ValidateRibRequest_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_ValidateRibRequest(Rest, 0, 0,
					  NewFValue, F2, F3, TrUserData).


d_field_ValidateRibRequest_family(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ValidateRibRequest_family(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ValidateRibRequest_family(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ValidateRibRequest(Rest, 0, 0, F1,
					  NewFValue, F3, TrUserData).


d_field_ValidateRibRequest_prefix(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ValidateRibRequest_prefix(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ValidateRibRequest_prefix(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ValidateRibRequest(Rest2, 0, 0, F1,
					  F2, NewFValue, TrUserData).


skip_varint_ValidateRibRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ValidateRibRequest(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
skip_varint_ValidateRibRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ValidateRibRequest(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


skip_length_delimited_ValidateRibRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ValidateRibRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
skip_length_delimited_ValidateRibRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ValidateRibRequest(Rest2, 0, 0, F1,
					  F2, F3, TrUserData).


skip_group_ValidateRibRequest(Bin, FNum, Z2, F1, F2, F3,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ValidateRibRequest(Rest, 0, Z2, F1,
					  F2, F3, TrUserData).


skip_32_ValidateRibRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ValidateRibRequest(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


skip_64_ValidateRibRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ValidateRibRequest(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


d_msg_DeletePolicyAssignmentRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentRequest(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     id(false, TrUserData),
						     TrUserData).

dfp_read_field_def_DeletePolicyAssignmentRequest(<<10,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeletePolicyAssignmentRequest_assignment(Rest,
						     Z1, Z2, F1, F2,
						     TrUserData);
dfp_read_field_def_DeletePolicyAssignmentRequest(<<16,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeletePolicyAssignmentRequest_all(Rest, Z1, Z2,
					      F1, F2, TrUserData);
dfp_read_field_def_DeletePolicyAssignmentRequest(<<>>,
						 0, 0, F1, F2, _) ->
    #{assignment => F1, all => F2};
dfp_read_field_def_DeletePolicyAssignmentRequest(Other,
						 Z1, Z2, F1, F2, TrUserData) ->
    dg_read_field_def_DeletePolicyAssignmentRequest(Other,
						    Z1, Z2, F1, F2, TrUserData).

dg_read_field_def_DeletePolicyAssignmentRequest(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeletePolicyAssignmentRequest(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, TrUserData);
dg_read_field_def_DeletePolicyAssignmentRequest(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeletePolicyAssignmentRequest_assignment(Rest,
							   0, 0, F1, F2,
							   TrUserData);
      16 ->
	  d_field_DeletePolicyAssignmentRequest_all(Rest, 0, 0,
						    F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeletePolicyAssignmentRequest(Rest, 0, 0,
							  F1, F2, TrUserData);
	    1 ->
		skip_64_DeletePolicyAssignmentRequest(Rest, 0, 0, F1,
						      F2, TrUserData);
	    2 ->
		skip_length_delimited_DeletePolicyAssignmentRequest(Rest,
								    0, 0, F1,
								    F2,
								    TrUserData);
	    3 ->
		skip_group_DeletePolicyAssignmentRequest(Rest,
							 Key bsr 3, 0, F1, F2,
							 TrUserData);
	    5 ->
		skip_32_DeletePolicyAssignmentRequest(Rest, 0, 0, F1,
						      F2, TrUserData)
	  end
    end;
dg_read_field_def_DeletePolicyAssignmentRequest(<<>>, 0,
						0, F1, F2, _) ->
    #{assignment => F1, all => F2}.

d_field_DeletePolicyAssignmentRequest_assignment(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeletePolicyAssignmentRequest_assignment(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, TrUserData);
d_field_DeletePolicyAssignmentRequest_assignment(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest2,
						     0, 0,
						     if F1 == undefined ->
							    NewFValue;
							true ->
							    merge_msg_PolicyAssignment(F1,
										       NewFValue,
										       TrUserData)
						     end,
						     F2, TrUserData).


d_field_DeletePolicyAssignmentRequest_all(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeletePolicyAssignmentRequest_all(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
d_field_DeletePolicyAssignmentRequest_all(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest,
						     0, 0, F1, NewFValue,
						     TrUserData).


skip_varint_DeletePolicyAssignmentRequest(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DeletePolicyAssignmentRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData);
skip_varint_DeletePolicyAssignmentRequest(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest,
						     Z1, Z2, F1, F2,
						     TrUserData).


skip_length_delimited_DeletePolicyAssignmentRequest(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeletePolicyAssignmentRequest(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, TrUserData);
skip_length_delimited_DeletePolicyAssignmentRequest(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest2,
						     0, 0, F1, F2, TrUserData).


skip_group_DeletePolicyAssignmentRequest(Bin, FNum, Z2,
					 F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest,
						     0, Z2, F1, F2, TrUserData).


skip_32_DeletePolicyAssignmentRequest(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest,
						     Z1, Z2, F1, F2,
						     TrUserData).


skip_64_DeletePolicyAssignmentRequest(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentRequest(Rest,
						     Z1, Z2, F1, F2,
						     TrUserData).


d_msg_RPKIValidation(Bin, TrUserData) ->
    dfp_read_field_def_RPKIValidation(Bin, 0, 0,
				      id('STATE_NONE', TrUserData),
				      id('REASOT_NONE', TrUserData),
				      id([], TrUserData), id([], TrUserData),
				      id([], TrUserData), TrUserData).

dfp_read_field_def_RPKIValidation(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_RPKIValidation_state(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
dfp_read_field_def_RPKIValidation(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_RPKIValidation_reason(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_RPKIValidation(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_RPKIValidation_matched(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_RPKIValidation(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_RPKIValidation_unmatched_as(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData);
dfp_read_field_def_RPKIValidation(<<42, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_RPKIValidation_unmatched_length(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_RPKIValidation(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, TrUserData) ->
    #{state => F1, reason => F2,
      matched => lists_reverse(F3, TrUserData),
      unmatched_as => lists_reverse(F4, TrUserData),
      unmatched_length => lists_reverse(F5, TrUserData)};
dfp_read_field_def_RPKIValidation(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, TrUserData) ->
    dg_read_field_def_RPKIValidation(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData).

dg_read_field_def_RPKIValidation(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RPKIValidation(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
dg_read_field_def_RPKIValidation(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RPKIValidation_state(Rest, 0, 0, F1, F2, F3, F4,
				       F5, TrUserData);
      16 ->
	  d_field_RPKIValidation_reason(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      26 ->
	  d_field_RPKIValidation_matched(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      34 ->
	  d_field_RPKIValidation_unmatched_as(Rest, 0, 0, F1, F2,
					      F3, F4, F5, TrUserData);
      42 ->
	  d_field_RPKIValidation_unmatched_length(Rest, 0, 0, F1,
						  F2, F3, F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RPKIValidation(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData);
	    1 ->
		skip_64_RPKIValidation(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData);
	    2 ->
		skip_length_delimited_RPKIValidation(Rest, 0, 0, F1, F2,
						     F3, F4, F5, TrUserData);
	    3 ->
		skip_group_RPKIValidation(Rest, Key bsr 3, 0, F1, F2,
					  F3, F4, F5, TrUserData);
	    5 ->
		skip_32_RPKIValidation(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData)
	  end
    end;
dg_read_field_def_RPKIValidation(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, TrUserData) ->
    #{state => F1, reason => F2,
      matched => lists_reverse(F3, TrUserData),
      unmatched_as => lists_reverse(F4, TrUserData),
      unmatched_length => lists_reverse(F5, TrUserData)}.

d_field_RPKIValidation_state(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RPKIValidation_state(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, TrUserData);
d_field_RPKIValidation_state(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_RPKIValidation.State'(Tmp),
    dfp_read_field_def_RPKIValidation(Rest, 0, 0, NewFValue,
				      F2, F3, F4, F5, TrUserData).


d_field_RPKIValidation_reason(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RPKIValidation_reason(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_RPKIValidation_reason(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_RPKIValidation.Reason'(Tmp),
    dfp_read_field_def_RPKIValidation(Rest, 0, 0, F1,
				      NewFValue, F3, F4, F5, TrUserData).


d_field_RPKIValidation_matched(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RPKIValidation_matched(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_RPKIValidation_matched(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Roa(Bs, TrUserData), TrUserData),
    dfp_read_field_def_RPKIValidation(Rest2, 0, 0, F1, F2,
				      cons(NewFValue, F3, TrUserData), F4, F5,
				      TrUserData).


d_field_RPKIValidation_unmatched_as(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RPKIValidation_unmatched_as(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
d_field_RPKIValidation_unmatched_as(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Roa(Bs, TrUserData), TrUserData),
    dfp_read_field_def_RPKIValidation(Rest2, 0, 0, F1, F2,
				      F3, cons(NewFValue, F4, TrUserData), F5,
				      TrUserData).


d_field_RPKIValidation_unmatched_length(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RPKIValidation_unmatched_length(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    TrUserData);
d_field_RPKIValidation_unmatched_length(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5,
					TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Roa(Bs, TrUserData), TrUserData),
    dfp_read_field_def_RPKIValidation(Rest2, 0, 0, F1, F2,
				      F3, F4, cons(NewFValue, F5, TrUserData),
				      TrUserData).


skip_varint_RPKIValidation(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_RPKIValidation(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
skip_varint_RPKIValidation(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_RPKIValidation(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_length_delimited_RPKIValidation(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_RPKIValidation(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
skip_length_delimited_RPKIValidation(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RPKIValidation(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, TrUserData).


skip_group_RPKIValidation(Bin, FNum, Z2, F1, F2, F3, F4,
			  F5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RPKIValidation(Rest, 0, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_32_RPKIValidation(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_RPKIValidation(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_64_RPKIValidation(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_RPKIValidation(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


d_msg_Path(Bin, TrUserData) ->
    dfp_read_field_def_Path(Bin, 0, 0, id(<<>>, TrUserData),
			    id([], TrUserData), id(0, TrUserData),
			    id(false, TrUserData), id(false, TrUserData),
			    id(0, TrUserData), id(undefined, TrUserData),
			    id(false, TrUserData), id(0, TrUserData),
			    id(0, TrUserData), id([], TrUserData),
			    id(false, TrUserData), id(false, TrUserData),
			    id(false, TrUserData), id([], TrUserData),
			    id(<<>>, TrUserData), id(false, TrUserData),
			    id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Path(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_nlri(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		      F19, TrUserData);
dfp_read_field_def_Path(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_pattrs(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			F18, F19, TrUserData);
dfp_read_field_def_Path(<<24, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_age(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		     F19, TrUserData);
dfp_read_field_def_Path(<<32, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_best(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		      F19, TrUserData);
dfp_read_field_def_Path(<<40, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_is_withdraw(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<48, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_validation(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<58, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_validation_detail(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<64, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_no_implicit_withdraw(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      TrUserData);
dfp_read_field_def_Path(<<72, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_family(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			F18, F19, TrUserData);
dfp_read_field_def_Path(<<80, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_source_asn(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<90, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_source_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			   F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<96, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_filtered(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			  F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<104, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_stale(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		       F19, TrUserData);
dfp_read_field_def_Path(<<112, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_is_from_external(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<122, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_neighbor_ip(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<130, 1, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_uuid(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		      F19, TrUserData);
dfp_read_field_def_Path(<<136, 1, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_is_nexthop_invalid(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19,
				    TrUserData);
dfp_read_field_def_Path(<<144, 1, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_identifier(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<152, 1, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, TrUserData) ->
    d_field_Path_local_identifier(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, TrUserData);
dfp_read_field_def_Path(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			F18, F19, TrUserData) ->
    #{nlri => F1, pattrs => lists_reverse(F2, TrUserData),
      age => F3, best => F4, is_withdraw => F5,
      validation => F6, validation_detail => F7,
      no_implicit_withdraw => F8, family => F9,
      source_asn => F10, source_id => F11, filtered => F12,
      stale => F13, is_from_external => F14,
      neighbor_ip => F15, uuid => F16,
      is_nexthop_invalid => F17, identifier => F18,
      local_identifier => F19};
dfp_read_field_def_Path(Other, Z1, Z2, F1, F2, F3, F4,
			F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			F17, F18, F19, TrUserData) ->
    dg_read_field_def_Path(Other, Z1, Z2, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			   F16, F17, F18, F19, TrUserData).

dg_read_field_def_Path(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Path(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14, F15, F16, F17, F18, F19, TrUserData);
dg_read_field_def_Path(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Path_nlri(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			    F18, F19, TrUserData);
      18 ->
	  d_field_Path_pattrs(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			      F17, F18, F19, TrUserData);
      24 ->
	  d_field_Path_age(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			   F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
			   F19, TrUserData);
      32 ->
	  d_field_Path_best(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			    F18, F19, TrUserData);
      40 ->
	  d_field_Path_is_withdraw(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, TrUserData);
      48 ->
	  d_field_Path_validation(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18, F19, TrUserData);
      58 ->
	  d_field_Path_validation_detail(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19,
					 TrUserData);
      64 ->
	  d_field_Path_no_implicit_withdraw(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, TrUserData);
      72 ->
	  d_field_Path_family(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			      F17, F18, F19, TrUserData);
      80 ->
	  d_field_Path_source_asn(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18, F19, TrUserData);
      90 ->
	  d_field_Path_source_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				 F16, F17, F18, F19, TrUserData);
      96 ->
	  d_field_Path_filtered(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				F16, F17, F18, F19, TrUserData);
      104 ->
	  d_field_Path_stale(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			     F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			     F18, F19, TrUserData);
      112 ->
	  d_field_Path_is_from_external(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19,
					TrUserData);
      122 ->
	  d_field_Path_neighbor_ip(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, TrUserData);
      130 ->
	  d_field_Path_uuid(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			    F18, F19, TrUserData);
      136 ->
	  d_field_Path_is_nexthop_invalid(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  TrUserData);
      144 ->
	  d_field_Path_identifier(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18, F19, TrUserData);
      152 ->
	  d_field_Path_local_identifier(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Path(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
				 F18, F19, TrUserData);
	    1 ->
		skip_64_Path(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
			     F19, TrUserData);
	    2 ->
		skip_length_delimited_Path(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   TrUserData);
	    3 ->
		skip_group_Path(Rest, Key bsr 3, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				F16, F17, F18, F19, TrUserData);
	    5 ->
		skip_32_Path(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
			     F19, TrUserData)
	  end
    end;
dg_read_field_def_Path(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
		       F18, F19, TrUserData) ->
    #{nlri => F1, pattrs => lists_reverse(F2, TrUserData),
      age => F3, best => F4, is_withdraw => F5,
      validation => F6, validation_detail => F7,
      no_implicit_withdraw => F8, family => F9,
      source_asn => F10, source_id => F11, filtered => F12,
      stale => F13, is_from_external => F14,
      neighbor_ip => F15, uuid => F16,
      is_nexthop_invalid => F17, identifier => F18,
      local_identifier => F19}.

d_field_Path_nlri(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_nlri(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		      F15, F16, F17, F18, F19, TrUserData);
d_field_Path_nlri(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Path(Rest2, 0, 0, NewFValue, F2, F3,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			    F15, F16, F17, F18, F19, TrUserData).


d_field_Path_pattrs(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_pattrs(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData);
d_field_Path_pattrs(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14, F15, F16, F17, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Path(Rest2, 0, 0, F1,
			    cons(NewFValue, F2, TrUserData), F3, F4, F5, F6, F7,
			    F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
			    F19, TrUserData).


d_field_Path_age(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		 F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_age(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
		     F16, F17, F18, F19, TrUserData);
d_field_Path_age(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		 F15, F16, F17, F18, F19, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, NewFValue,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			    F15, F16, F17, F18, F19, TrUserData).


d_field_Path_best(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_best(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		      F15, F16, F17, F18, F19, TrUserData);
d_field_Path_best(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, _, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3,
			    NewFValue, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18, F19, TrUserData).


d_field_Path_is_withdraw(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_is_withdraw(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_is_withdraw(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4,
			    NewFValue, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			    F15, F16, F17, F18, F19, TrUserData).


d_field_Path_validation(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_validation(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_validation(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    NewFValue, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_validation_detail(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData)
    when N < 57 ->
    d_field_Path_validation_detail(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, TrUserData);
d_field_Path_validation_detail(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RPKIValidation(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Path(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6,
			    if F7 == undefined -> NewFValue;
			       true ->
				   merge_msg_RPKIValidation(F7, NewFValue,
							    TrUserData)
			    end,
			    F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
			    F19, TrUserData).


d_field_Path_no_implicit_withdraw(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, TrUserData)
    when N < 57 ->
    d_field_Path_no_implicit_withdraw(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, TrUserData);
d_field_Path_no_implicit_withdraw(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, NewFValue, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_family(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_family(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, F17, F18, F19, TrUserData);
d_field_Path_family(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, _, F10, F11, F12, F13,
		    F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, NewFValue, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_source_asn(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_source_asn(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_source_asn(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, NewFValue, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_source_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_source_id(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_source_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, _, F12,
		       F13, F14, F15, F16, F17, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Path(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, NewFValue, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_filtered(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_filtered(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_filtered(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _, F13,
		      F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, NewFValue, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_stale(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		   F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_stale(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		       F15, F16, F17, F18, F19, TrUserData);
d_field_Path_stale(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, _,
		   F14, F15, F16, F17, F18, F19, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, NewFValue, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_is_from_external(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19,
			      TrUserData)
    when N < 57 ->
    d_field_Path_is_from_external(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, TrUserData);
d_field_Path_is_from_external(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, _, F15, F16, F17, F18, F19,
			      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, NewFValue, F15,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_neighbor_ip(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_neighbor_ip(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_neighbor_ip(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, _, F16, F17, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Path(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, NewFValue,
			    F16, F17, F18, F19, TrUserData).


d_field_Path_uuid(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_uuid(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		      F15, F16, F17, F18, F19, TrUserData);
d_field_Path_uuid(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, _, F17, F18, F19, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Path(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    NewFValue, F17, F18, F19, TrUserData).


d_field_Path_is_nexthop_invalid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				TrUserData)
    when N < 57 ->
    d_field_Path_is_nexthop_invalid(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, TrUserData);
d_field_Path_is_nexthop_invalid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, _, F18, F19,
				TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			    NewFValue, F18, F19, TrUserData).


d_field_Path_identifier(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    d_field_Path_identifier(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18, F19, TrUserData);
d_field_Path_identifier(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, _, F19, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			    F17, NewFValue, F19, TrUserData).


d_field_Path_local_identifier(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19,
			      TrUserData)
    when N < 57 ->
    d_field_Path_local_identifier(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, TrUserData);
d_field_Path_local_identifier(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, _,
			      TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Path(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			    F17, F18, NewFValue, TrUserData).


skip_varint_Path(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		 F15, F16, F17, F18, F19, TrUserData) ->
    skip_varint_Path(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		     F19, TrUserData);
skip_varint_Path(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		 F15, F16, F17, F18, F19, TrUserData) ->
    dfp_read_field_def_Path(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


skip_length_delimited_Path(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, TrUserData)
    when N < 57 ->
    skip_length_delimited_Path(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19,
			       TrUserData);
skip_length_delimited_Path(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19,
			   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Path(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			    F17, F18, F19, TrUserData).


skip_group_Path(Bin, FNum, Z2, F1, F2, F3, F4, F5, F6,
		F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18,
		F19, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Path(Rest, 0, Z2, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			    F17, F18, F19, TrUserData).


skip_32_Path(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
	     F16, F17, F18, F19, TrUserData) ->
    dfp_read_field_def_Path(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


skip_64_Path(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
	     F16, F17, F18, F19, TrUserData) ->
    dfp_read_field_def_Path(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18, F19, TrUserData).


d_msg_Destination(Bin, TrUserData) ->
    dfp_read_field_def_Destination(Bin, 0, 0,
				   id([], TrUserData), id([], TrUserData),
				   id(false, TrUserData), id(false, TrUserData),
				   TrUserData).

dfp_read_field_def_Destination(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_Destination_prefix(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData);
dfp_read_field_def_Destination(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_Destination_paths(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_Destination(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_Destination_longer_prefixes(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_Destination(<<32, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_Destination_shorter_prefixes(Rest, Z1, Z2, F1,
					 F2, F3, F4, TrUserData);
dfp_read_field_def_Destination(<<>>, 0, 0, F1, F2, F3,
			       F4, TrUserData) ->
    #{prefix => F1, paths => lists_reverse(F2, TrUserData),
      longer_prefixes => F3, shorter_prefixes => F4};
dfp_read_field_def_Destination(Other, Z1, Z2, F1, F2,
			       F3, F4, TrUserData) ->
    dg_read_field_def_Destination(Other, Z1, Z2, F1, F2, F3,
				  F4, TrUserData).

dg_read_field_def_Destination(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Destination(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_Destination(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Destination_prefix(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
      18 ->
	  d_field_Destination_paths(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      24 ->
	  d_field_Destination_longer_prefixes(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      32 ->
	  d_field_Destination_shorter_prefixes(Rest, 0, 0, F1, F2,
					       F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Destination(Rest, 0, 0, F1, F2, F3, F4,
					TrUserData);
	    1 ->
		skip_64_Destination(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
	    2 ->
		skip_length_delimited_Destination(Rest, 0, 0, F1, F2,
						  F3, F4, TrUserData);
	    3 ->
		skip_group_Destination(Rest, Key bsr 3, 0, F1, F2, F3,
				       F4, TrUserData);
	    5 ->
		skip_32_Destination(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData)
	  end
    end;
dg_read_field_def_Destination(<<>>, 0, 0, F1, F2, F3,
			      F4, TrUserData) ->
    #{prefix => F1, paths => lists_reverse(F2, TrUserData),
      longer_prefixes => F3, shorter_prefixes => F4}.

d_field_Destination_prefix(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Destination_prefix(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, TrUserData);
d_field_Destination_prefix(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Destination(Rest2, 0, 0, NewFValue,
				   F2, F3, F4, TrUserData).


d_field_Destination_paths(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Destination_paths(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_Destination_paths(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Path(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Destination(Rest2, 0, 0, F1,
				   cons(NewFValue, F2, TrUserData), F3, F4,
				   TrUserData).


d_field_Destination_longer_prefixes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Destination_longer_prefixes(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_Destination_longer_prefixes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Destination(Rest, 0, 0, F1, F2,
				   NewFValue, F4, TrUserData).


d_field_Destination_shorter_prefixes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Destination_shorter_prefixes(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
d_field_Destination_shorter_prefixes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Destination(Rest, 0, 0, F1, F2, F3,
				   NewFValue, TrUserData).


skip_varint_Destination(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_Destination(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData);
skip_varint_Destination(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_Destination(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData).


skip_length_delimited_Destination(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Destination(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
skip_length_delimited_Destination(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Destination(Rest2, 0, 0, F1, F2, F3,
				   F4, TrUserData).


skip_group_Destination(Bin, FNum, Z2, F1, F2, F3, F4,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Destination(Rest, 0, Z2, F1, F2, F3,
				   F4, TrUserData).


skip_32_Destination(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, TrUserData) ->
    dfp_read_field_def_Destination(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData).


skip_64_Destination(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, TrUserData) ->
    dfp_read_field_def_Destination(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData).


d_msg_Table(Bin, TrUserData) ->
    dfp_read_field_def_Table(Bin, 0, 0,
			     id('GLOBAL', TrUserData), id([], TrUserData),
			     id(0, TrUserData), id([], TrUserData),
			     id(false, TrUserData), TrUserData).

dfp_read_field_def_Table(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, F4, F5, TrUserData) ->
    d_field_Table_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		       TrUserData);
dfp_read_field_def_Table(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    d_field_Table_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		       TrUserData);
dfp_read_field_def_Table(<<24, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    d_field_Table_family(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 TrUserData);
dfp_read_field_def_Table(<<34, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    d_field_Table_destinations(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
dfp_read_field_def_Table(<<40, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    d_field_Table_post_policy(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData);
dfp_read_field_def_Table(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 TrUserData) ->
    #{type => F1, name => F2, family => F3,
      destinations => lists_reverse(F4, TrUserData),
      post_policy => F5};
dfp_read_field_def_Table(Other, Z1, Z2, F1, F2, F3, F4,
			 F5, TrUserData) ->
    dg_read_field_def_Table(Other, Z1, Z2, F1, F2, F3, F4,
			    F5, TrUserData).

dg_read_field_def_Table(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Table(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, TrUserData);
dg_read_field_def_Table(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Table_type(Rest, 0, 0, F1, F2, F3, F4, F5,
			     TrUserData);
      18 ->
	  d_field_Table_name(Rest, 0, 0, F1, F2, F3, F4, F5,
			     TrUserData);
      24 ->
	  d_field_Table_family(Rest, 0, 0, F1, F2, F3, F4, F5,
			       TrUserData);
      34 ->
	  d_field_Table_destinations(Rest, 0, 0, F1, F2, F3, F4,
				     F5, TrUserData);
      40 ->
	  d_field_Table_post_policy(Rest, 0, 0, F1, F2, F3, F4,
				    F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Table(Rest, 0, 0, F1, F2, F3, F4, F5,
				  TrUserData);
	    1 ->
		skip_64_Table(Rest, 0, 0, F1, F2, F3, F4, F5,
			      TrUserData);
	    2 ->
		skip_length_delimited_Table(Rest, 0, 0, F1, F2, F3, F4,
					    F5, TrUserData);
	    3 ->
		skip_group_Table(Rest, Key bsr 3, 0, F1, F2, F3, F4, F5,
				 TrUserData);
	    5 ->
		skip_32_Table(Rest, 0, 0, F1, F2, F3, F4, F5,
			      TrUserData)
	  end
    end;
dg_read_field_def_Table(<<>>, 0, 0, F1, F2, F3, F4, F5,
			TrUserData) ->
    #{type => F1, name => F2, family => F3,
      destinations => lists_reverse(F4, TrUserData),
      post_policy => F5}.

d_field_Table_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Table_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, TrUserData);
d_field_Table_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_Table(Rest, 0, 0, NewFValue, F2, F3,
			     F4, F5, TrUserData).


d_field_Table_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Table_name(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, TrUserData);
d_field_Table_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Table(Rest2, 0, 0, F1, NewFValue, F3,
			     F4, F5, TrUserData).


d_field_Table_family(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Table_family(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, TrUserData);
d_field_Table_family(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Table(Rest, 0, 0, F1, F2, NewFValue,
			     F4, F5, TrUserData).


d_field_Table_destinations(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Table_destinations(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, TrUserData);
d_field_Table_destinations(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Destination(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Table(Rest2, 0, 0, F1, F2, F3,
			     cons(NewFValue, F4, TrUserData), F5, TrUserData).


d_field_Table_post_policy(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Table_post_policy(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
d_field_Table_post_policy(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Table(Rest, 0, 0, F1, F2, F3, F4,
			     NewFValue, TrUserData).


skip_varint_Table(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, TrUserData) ->
    skip_varint_Table(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		      TrUserData);
skip_varint_Table(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_Table(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, TrUserData).


skip_length_delimited_Table(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Table(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, TrUserData);
skip_length_delimited_Table(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Table(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, TrUserData).


skip_group_Table(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Table(Rest, 0, Z2, F1, F2, F3, F4,
			     F5, TrUserData).


skip_32_Table(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, TrUserData) ->
    dfp_read_field_def_Table(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, TrUserData).


skip_64_Table(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, TrUserData) ->
    dfp_read_field_def_Table(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, TrUserData).


d_msg_MonitorRibRequest(Bin, TrUserData) ->
    dfp_read_field_def_MonitorRibRequest(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(false, TrUserData), TrUserData).

dfp_read_field_def_MonitorRibRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_MonitorRibRequest_table(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_MonitorRibRequest(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_MonitorRibRequest_current(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_MonitorRibRequest(<<>>, 0, 0, F1, F2,
				     _) ->
    #{table => F1, current => F2};
dfp_read_field_def_MonitorRibRequest(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_MonitorRibRequest(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_MonitorRibRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MonitorRibRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_MonitorRibRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MonitorRibRequest_table(Rest, 0, 0, F1, F2,
					  TrUserData);
      16 ->
	  d_field_MonitorRibRequest_current(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MonitorRibRequest(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_MonitorRibRequest(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_MonitorRibRequest(Rest, 0, 0, F1,
							F2, TrUserData);
	    3 ->
		skip_group_MonitorRibRequest(Rest, Key bsr 3, 0, F1, F2,
					     TrUserData);
	    5 ->
		skip_32_MonitorRibRequest(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_MonitorRibRequest(<<>>, 0, 0, F1, F2,
				    _) ->
    #{table => F1, current => F2}.

d_field_MonitorRibRequest_table(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MonitorRibRequest_table(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_MonitorRibRequest_table(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Table(Bs, TrUserData), TrUserData),
    dfp_read_field_def_MonitorRibRequest(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_Table(F1, NewFValue,
								TrUserData)
					 end,
					 F2, TrUserData).


d_field_MonitorRibRequest_current(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MonitorRibRequest_current(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_MonitorRibRequest_current(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MonitorRibRequest(Rest, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_MonitorRibRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_MonitorRibRequest(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_MonitorRibRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_MonitorRibRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_MonitorRibRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MonitorRibRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_MonitorRibRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MonitorRibRequest(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_group_MonitorRibRequest(Bin, FNum, Z2, F1, F2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MonitorRibRequest(Rest, 0, Z2, F1,
					 F2, TrUserData).


skip_32_MonitorRibRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_MonitorRibRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_MonitorRibRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_MonitorRibRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_ShutdownNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborResponse(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_ShutdownNeighborResponse(<<>>, 0, 0,
					    _) ->
    #{};
dfp_read_field_def_ShutdownNeighborResponse(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_ShutdownNeighborResponse(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_ShutdownNeighborResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShutdownNeighborResponse(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_ShutdownNeighborResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ShutdownNeighborResponse(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_ShutdownNeighborResponse(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_ShutdownNeighborResponse(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_ShutdownNeighborResponse(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_ShutdownNeighborResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ShutdownNeighborResponse(<<>>, 0, 0,
					   _) ->
    #{}.

skip_varint_ShutdownNeighborResponse(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_ShutdownNeighborResponse(Rest, Z1, Z2,
					 TrUserData);
skip_varint_ShutdownNeighborResponse(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborResponse(Rest, Z1,
						Z2, TrUserData).


skip_length_delimited_ShutdownNeighborResponse(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShutdownNeighborResponse(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_ShutdownNeighborResponse(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShutdownNeighborResponse(Rest2, 0, 0,
						TrUserData).


skip_group_ShutdownNeighborResponse(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShutdownNeighborResponse(Rest, 0, Z2,
						TrUserData).


skip_32_ShutdownNeighborResponse(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborResponse(Rest, Z1,
						Z2, TrUserData).


skip_64_ShutdownNeighborResponse(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborResponse(Rest, Z1,
						Z2, TrUserData).


d_msg_AddRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddRpkiResponse(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_AddRpkiResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AddRpkiResponse(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_AddRpkiResponse(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_AddRpkiResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddRpkiResponse(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_AddRpkiResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AddRpkiResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_AddRpkiResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddRpkiResponse(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_AddRpkiResponse(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_AddRpkiResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddRpkiResponse(<<>>, 0, 0, _) -> #{}.

skip_varint_AddRpkiResponse(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_AddRpkiResponse(Rest, Z1, Z2, TrUserData);
skip_varint_AddRpkiResponse(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddRpkiResponse(Rest, Z1, Z2,
				       TrUserData).


skip_length_delimited_AddRpkiResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddRpkiResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_AddRpkiResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddRpkiResponse(Rest2, 0, 0,
				       TrUserData).


skip_group_AddRpkiResponse(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddRpkiResponse(Rest, 0, Z2,
				       TrUserData).


skip_32_AddRpkiResponse(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_AddRpkiResponse(Rest, Z1, Z2,
				       TrUserData).


skip_64_AddRpkiResponse(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_AddRpkiResponse(Rest, Z1, Z2,
				       TrUserData).


d_msg_AddPolicyRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddPolicyRequest(Bin, 0, 0,
					id(undefined, TrUserData),
					id(false, TrUserData), TrUserData).

dfp_read_field_def_AddPolicyRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_AddPolicyRequest_policy(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_AddPolicyRequest(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_AddPolicyRequest_refer_existing_statements(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData);
dfp_read_field_def_AddPolicyRequest(<<>>, 0, 0, F1, F2,
				    _) ->
    #{policy => F1, refer_existing_statements => F2};
dfp_read_field_def_AddPolicyRequest(Other, Z1, Z2, F1,
				    F2, TrUserData) ->
    dg_read_field_def_AddPolicyRequest(Other, Z1, Z2, F1,
				       F2, TrUserData).

dg_read_field_def_AddPolicyRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPolicyRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_AddPolicyRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddPolicyRequest_policy(Rest, 0, 0, F1, F2,
					  TrUserData);
      16 ->
	  d_field_AddPolicyRequest_refer_existing_statements(Rest,
							     0, 0, F1, F2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPolicyRequest(Rest, 0, 0, F1, F2,
					     TrUserData);
	    1 ->
		skip_64_AddPolicyRequest(Rest, 0, 0, F1, F2,
					 TrUserData);
	    2 ->
		skip_length_delimited_AddPolicyRequest(Rest, 0, 0, F1,
						       F2, TrUserData);
	    3 ->
		skip_group_AddPolicyRequest(Rest, Key bsr 3, 0, F1, F2,
					    TrUserData);
	    5 ->
		skip_32_AddPolicyRequest(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_AddPolicyRequest(<<>>, 0, 0, F1, F2,
				   _) ->
    #{policy => F1, refer_existing_statements => F2}.

d_field_AddPolicyRequest_policy(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPolicyRequest_policy(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_AddPolicyRequest_policy(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Policy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AddPolicyRequest(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_Policy(F1, NewFValue,
								TrUserData)
					end,
					F2, TrUserData).


d_field_AddPolicyRequest_refer_existing_statements(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_AddPolicyRequest_refer_existing_statements(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
d_field_AddPolicyRequest_refer_existing_statements(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_AddPolicyRequest(Rest, 0, 0, F1,
					NewFValue, TrUserData).


skip_varint_AddPolicyRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_AddPolicyRequest(Rest, Z1, Z2, F1, F2,
				 TrUserData);
skip_varint_AddPolicyRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_AddPolicyRequest(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_length_delimited_AddPolicyRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPolicyRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_AddPolicyRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPolicyRequest(Rest2, 0, 0, F1, F2,
					TrUserData).


skip_group_AddPolicyRequest(Bin, FNum, Z2, F1, F2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPolicyRequest(Rest, 0, Z2, F1, F2,
					TrUserData).


skip_32_AddPolicyRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_AddPolicyRequest(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_64_AddPolicyRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_AddPolicyRequest(Rest, Z1, Z2, F1,
					F2, TrUserData).


d_msg_RPKIState(Bin, TrUserData) ->
    dfp_read_field_def_RPKIState(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 id(false, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_RPKIState(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			     F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_uptime(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_downtime(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_up(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
			 TrUserData);
dfp_read_field_def_RPKIState(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_record_ipv4(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_record_ipv6(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_prefix_ipv4(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<56, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_prefix_ipv6(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_serial(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<72, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_received_ipv4(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<80, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_received_ipv6(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<88, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_serial_notify(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<96, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_cache_reset(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<104, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_cache_response(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<112, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_end_of_data(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<120, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_error(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<128, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_serial_query(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<136, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    d_field_RPKIState_reset_query(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, TrUserData);
dfp_read_field_def_RPKIState(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, _) ->
    #{uptime => F1, downtime => F2, up => F3,
      record_ipv4 => F4, record_ipv6 => F5, prefix_ipv4 => F6,
      prefix_ipv6 => F7, serial => F8, received_ipv4 => F9,
      received_ipv6 => F10, serial_notify => F11,
      cache_reset => F12, cache_response => F13,
      end_of_data => F14, error => F15, serial_query => F16,
      reset_query => F17};
dfp_read_field_def_RPKIState(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			     F15, F16, F17, TrUserData) ->
    dg_read_field_def_RPKIState(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, TrUserData).

dg_read_field_def_RPKIState(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RPKIState(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, TrUserData);
dg_read_field_def_RPKIState(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RPKIState_uptime(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, TrUserData);
      16 ->
	  d_field_RPKIState_downtime(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, TrUserData);
      24 ->
	  d_field_RPKIState_up(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			       F17, TrUserData);
      32 ->
	  d_field_RPKIState_record_ipv4(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      40 ->
	  d_field_RPKIState_record_ipv6(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      48 ->
	  d_field_RPKIState_prefix_ipv4(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      56 ->
	  d_field_RPKIState_prefix_ipv6(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      64 ->
	  d_field_RPKIState_serial(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, TrUserData);
      72 ->
	  d_field_RPKIState_received_ipv4(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, TrUserData);
      80 ->
	  d_field_RPKIState_received_ipv6(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, TrUserData);
      88 ->
	  d_field_RPKIState_serial_notify(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, TrUserData);
      96 ->
	  d_field_RPKIState_cache_reset(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      104 ->
	  d_field_RPKIState_cache_response(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17,
					   TrUserData);
      112 ->
	  d_field_RPKIState_end_of_data(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      120 ->
	  d_field_RPKIState_error(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, TrUserData);
      128 ->
	  d_field_RPKIState_serial_query(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, TrUserData);
      136 ->
	  d_field_RPKIState_reset_query(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RPKIState(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15, F16, F17, TrUserData);
	    1 ->
		skip_64_RPKIState(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  F17, TrUserData);
	    2 ->
		skip_length_delimited_RPKIState(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, F13, F14, F15, F16,
						F17, TrUserData);
	    3 ->
		skip_group_RPKIState(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, TrUserData);
	    5 ->
		skip_32_RPKIState(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  F17, TrUserData)
	  end
    end;
dg_read_field_def_RPKIState(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, _) ->
    #{uptime => F1, downtime => F2, up => F3,
      record_ipv4 => F4, record_ipv6 => F5, prefix_ipv4 => F6,
      prefix_ipv6 => F7, serial => F8, received_ipv4 => F9,
      received_ipv6 => F10, serial_notify => F11,
      cache_reset => F12, cache_response => F13,
      end_of_data => F14, error => F15, serial_query => F16,
      reset_query => F17}.

d_field_RPKIState_uptime(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_uptime(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, TrUserData);
d_field_RPKIState_uptime(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_downtime(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_downtime(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, TrUserData);
d_field_RPKIState_downtime(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_up(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_up(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			 F15, F16, F17, TrUserData);
d_field_RPKIState_up(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, F17, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, TrUserData).


d_field_RPKIState_record_ipv4(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_record_ipv4(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_record_ipv4(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				 F13, F14, F15, F16, F17, TrUserData).


d_field_RPKIState_record_ipv6(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_record_ipv6(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_record_ipv6(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_prefix_ipv4(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_prefix_ipv4(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_prefix_ipv4(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_prefix_ipv6(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_prefix_ipv6(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_prefix_ipv6(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, NewFValue, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_serial(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_serial(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, TrUserData);
d_field_RPKIState_serial(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_received_ipv4(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_received_ipv4(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, TrUserData);
d_field_RPKIState_received_ipv4(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, F14, F15, F16, F17,
				TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, NewFValue, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_received_ipv6(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_received_ipv6(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, TrUserData);
d_field_RPKIState_received_ipv6(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				F11, F12, F13, F14, F15, F16, F17,
				TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, NewFValue, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_serial_notify(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_serial_notify(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, TrUserData);
d_field_RPKIState_serial_notify(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				_, F12, F13, F14, F15, F16, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, NewFValue, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_cache_reset(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_cache_reset(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_cache_reset(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, _, F13, F14, F15, F16, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, NewFValue, F13,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_cache_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17,
				 TrUserData)
    when N < 57 ->
    d_field_RPKIState_cache_response(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, TrUserData);
d_field_RPKIState_cache_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, _, F14, F15, F16, F17,
				 TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, NewFValue,
				 F14, F15, F16, F17, TrUserData).


d_field_RPKIState_end_of_data(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_end_of_data(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_end_of_data(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, _, F15, F16, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 NewFValue, F15, F16, F17, TrUserData).


d_field_RPKIState_error(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_error(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, TrUserData);
d_field_RPKIState_error(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, _, F16, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 NewFValue, F16, F17, TrUserData).


d_field_RPKIState_serial_query(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_serial_query(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, TrUserData);
d_field_RPKIState_serial_query(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, _, F17, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, NewFValue, F17, TrUserData).


d_field_RPKIState_reset_query(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    d_field_RPKIState_reset_query(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  TrUserData);
d_field_RPKIState_reset_query(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, _, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_RPKIState(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, NewFValue, TrUserData).


skip_varint_RPKIState(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, F17, TrUserData) ->
    skip_varint_RPKIState(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			  F17, TrUserData);
skip_varint_RPKIState(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, F17, TrUserData) ->
    dfp_read_field_def_RPKIState(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


skip_length_delimited_RPKIState(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, TrUserData)
    when N < 57 ->
    skip_length_delimited_RPKIState(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, TrUserData);
skip_length_delimited_RPKIState(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RPKIState(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


skip_group_RPKIState(Bin, FNum, Z2, F1, F2, F3, F4, F5,
		     F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RPKIState(Rest, 0, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


skip_32_RPKIState(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, TrUserData) ->
    dfp_read_field_def_RPKIState(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


skip_64_RPKIState(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, F17, TrUserData) ->
    dfp_read_field_def_RPKIState(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, TrUserData).


d_msg_Rpki(Bin, TrUserData) ->
    dfp_read_field_def_Rpki(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Rpki(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Rpki_conf(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Rpki(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Rpki_state(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Rpki(<<>>, 0, 0, F1, F2, _) ->
    #{conf => F1, state => F2};
dfp_read_field_def_Rpki(Other, Z1, Z2, F1, F2,
			TrUserData) ->
    dg_read_field_def_Rpki(Other, Z1, Z2, F1, F2,
			   TrUserData).

dg_read_field_def_Rpki(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Rpki(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
dg_read_field_def_Rpki(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Rpki_conf(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Rpki_state(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Rpki(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Rpki(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Rpki(Rest, 0, 0, F1, F2,
					   TrUserData);
	    3 ->
		skip_group_Rpki(Rest, Key bsr 3, 0, F1, F2, TrUserData);
	    5 -> skip_32_Rpki(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Rpki(<<>>, 0, 0, F1, F2, _) ->
    #{conf => F1, state => F2}.

d_field_Rpki_conf(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, TrUserData)
    when N < 57 ->
    d_field_Rpki_conf(Rest, N + 7, X bsl N + Acc, F1, F2,
		      TrUserData);
d_field_Rpki_conf(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RPKIConf(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Rpki(Rest2, 0, 0,
			    if F1 == undefined -> NewFValue;
			       true ->
				   merge_msg_RPKIConf(F1, NewFValue, TrUserData)
			    end,
			    F2, TrUserData).


d_field_Rpki_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_Rpki_state(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_Rpki_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RPKIState(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Rpki(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   merge_msg_RPKIState(F2, NewFValue,
						       TrUserData)
			    end,
			    TrUserData).


skip_varint_Rpki(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    skip_varint_Rpki(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Rpki(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    dfp_read_field_def_Rpki(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_length_delimited_Rpki(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Rpki(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
skip_length_delimited_Rpki(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Rpki(Rest2, 0, 0, F1, F2,
			    TrUserData).


skip_group_Rpki(Bin, FNum, Z2, F1, F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Rpki(Rest, 0, Z2, F1, F2,
			    TrUserData).


skip_32_Rpki(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Rpki(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_64_Rpki(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Rpki(Rest, Z1, Z2, F1, F2,
			    TrUserData).


d_msg_AddPathRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddPathRequest(Bin, 0, 0,
				      id('GLOBAL', TrUserData),
				      id([], TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AddPathRequest(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddPathRequest_resource(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_AddPathRequest(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddPathRequest_vrf_id(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_AddPathRequest(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddPathRequest_path(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_AddPathRequest(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #{resource => F1, vrf_id => F2, path => F3};
dfp_read_field_def_AddPathRequest(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_AddPathRequest(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_AddPathRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPathRequest(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_AddPathRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AddPathRequest_resource(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      18 ->
	  d_field_AddPathRequest_vrf_id(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      26 ->
	  d_field_AddPathRequest_path(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPathRequest(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_AddPathRequest(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_AddPathRequest(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    3 ->
		skip_group_AddPathRequest(Rest, Key bsr 3, 0, F1, F2,
					  F3, TrUserData);
	    5 ->
		skip_32_AddPathRequest(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_AddPathRequest(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #{resource => F1, vrf_id => F2, path => F3}.

d_field_AddPathRequest_resource(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddPathRequest_resource(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_AddPathRequest_resource(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_AddPathRequest(Rest, 0, 0, NewFValue,
				      F2, F3, TrUserData).


d_field_AddPathRequest_vrf_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddPathRequest_vrf_id(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_AddPathRequest_vrf_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_AddPathRequest(Rest2, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_AddPathRequest_path(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddPathRequest_path(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_AddPathRequest_path(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Path(Bs, TrUserData), TrUserData),
    dfp_read_field_def_AddPathRequest(Rest2, 0, 0, F1, F2,
				      if F3 == undefined -> NewFValue;
					 true ->
					     merge_msg_Path(F3, NewFValue,
							    TrUserData)
				      end,
				      TrUserData).


skip_varint_AddPathRequest(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_AddPathRequest(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_AddPathRequest(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddPathRequest(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_AddPathRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPathRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_AddPathRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPathRequest(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_group_AddPathRequest(Bin, FNum, Z2, F1, F2, F3,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPathRequest(Rest, 0, Z2, F1, F2,
				      F3, TrUserData).


skip_32_AddPathRequest(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddPathRequest(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_AddPathRequest(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddPathRequest(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_ResetRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_ResetRpkiResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_ResetRpkiResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_ResetRpkiResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_ResetRpkiResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_ResetRpkiResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResetRpkiResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_ResetRpkiResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ResetRpkiResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_ResetRpkiResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ResetRpkiResponse(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_ResetRpkiResponse(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_ResetRpkiResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ResetRpkiResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_ResetRpkiResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_ResetRpkiResponse(Rest, Z1, Z2, TrUserData);
skip_varint_ResetRpkiResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_ResetRpkiResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_ResetRpkiResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResetRpkiResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_ResetRpkiResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResetRpkiResponse(Rest2, 0, 0,
					 TrUserData).


skip_group_ResetRpkiResponse(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResetRpkiResponse(Rest, 0, Z2,
					 TrUserData).


skip_32_ResetRpkiResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_ResetRpkiResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_ResetRpkiResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_ResetRpkiResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_ResetRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_ResetRpkiRequest(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_ResetRpkiRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_ResetRpkiRequest_address(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_ResetRpkiRequest(<<>>, 0, 0, F1,
				    _) ->
    #{address => F1};
dfp_read_field_def_ResetRpkiRequest(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_ResetRpkiRequest(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_ResetRpkiRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResetRpkiRequest(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ResetRpkiRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResetRpkiRequest_address(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResetRpkiRequest(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_ResetRpkiRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ResetRpkiRequest(Rest, 0, 0, F1,
						       TrUserData);
	    3 ->
		skip_group_ResetRpkiRequest(Rest, Key bsr 3, 0, F1,
					    TrUserData);
	    5 ->
		skip_32_ResetRpkiRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ResetRpkiRequest(<<>>, 0, 0, F1, _) ->
    #{address => F1}.

d_field_ResetRpkiRequest_address(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ResetRpkiRequest_address(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_ResetRpkiRequest_address(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResetRpkiRequest(Rest2, 0, 0,
					NewFValue, TrUserData).


skip_varint_ResetRpkiRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_ResetRpkiRequest(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_ResetRpkiRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ResetRpkiRequest(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_ResetRpkiRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResetRpkiRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ResetRpkiRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResetRpkiRequest(Rest2, 0, 0, F1,
					TrUserData).


skip_group_ResetRpkiRequest(Bin, FNum, Z2, F1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResetRpkiRequest(Rest, 0, Z2, F1,
					TrUserData).


skip_32_ResetRpkiRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_ResetRpkiRequest(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_ResetRpkiRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_ResetRpkiRequest(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_SoftResetNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborRequest(Bin, 0, 0,
						id([], TrUserData),
						id('IN', TrUserData),
						TrUserData).

dfp_read_field_def_SoftResetNeighborRequest(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    d_field_SoftResetNeighborRequest_address(Rest, Z1, Z2,
					     F1, F2, TrUserData);
dfp_read_field_def_SoftResetNeighborRequest(<<16,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    d_field_SoftResetNeighborRequest_direction(Rest, Z1, Z2,
					       F1, F2, TrUserData);
dfp_read_field_def_SoftResetNeighborRequest(<<>>, 0, 0,
					    F1, F2, _) ->
    #{address => F1, direction => F2};
dfp_read_field_def_SoftResetNeighborRequest(Other, Z1,
					    Z2, F1, F2, TrUserData) ->
    dg_read_field_def_SoftResetNeighborRequest(Other, Z1,
					       Z2, F1, F2, TrUserData).

dg_read_field_def_SoftResetNeighborRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SoftResetNeighborRequest(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
dg_read_field_def_SoftResetNeighborRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SoftResetNeighborRequest_address(Rest, 0, 0, F1,
						   F2, TrUserData);
      16 ->
	  d_field_SoftResetNeighborRequest_direction(Rest, 0, 0,
						     F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SoftResetNeighborRequest(Rest, 0, 0, F1, F2,
						     TrUserData);
	    1 ->
		skip_64_SoftResetNeighborRequest(Rest, 0, 0, F1, F2,
						 TrUserData);
	    2 ->
		skip_length_delimited_SoftResetNeighborRequest(Rest, 0,
							       0, F1, F2,
							       TrUserData);
	    3 ->
		skip_group_SoftResetNeighborRequest(Rest, Key bsr 3, 0,
						    F1, F2, TrUserData);
	    5 ->
		skip_32_SoftResetNeighborRequest(Rest, 0, 0, F1, F2,
						 TrUserData)
	  end
    end;
dg_read_field_def_SoftResetNeighborRequest(<<>>, 0, 0,
					   F1, F2, _) ->
    #{address => F1, direction => F2}.

d_field_SoftResetNeighborRequest_address(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_SoftResetNeighborRequest_address(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
d_field_SoftResetNeighborRequest_address(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SoftResetNeighborRequest(Rest2, 0, 0,
						NewFValue, F2, TrUserData).


d_field_SoftResetNeighborRequest_direction(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_SoftResetNeighborRequest_direction(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
d_field_SoftResetNeighborRequest_direction(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_SoftResetNeighborRequest.SoftResetDirection'(Tmp),
    dfp_read_field_def_SoftResetNeighborRequest(Rest, 0, 0,
						F1, NewFValue, TrUserData).


skip_varint_SoftResetNeighborRequest(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_SoftResetNeighborRequest(Rest, Z1, Z2, F1,
					 F2, TrUserData);
skip_varint_SoftResetNeighborRequest(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborRequest(Rest, Z1,
						Z2, F1, F2, TrUserData).


skip_length_delimited_SoftResetNeighborRequest(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SoftResetNeighborRequest(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
skip_length_delimited_SoftResetNeighborRequest(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SoftResetNeighborRequest(Rest2, 0, 0,
						F1, F2, TrUserData).


skip_group_SoftResetNeighborRequest(Bin, FNum, Z2, F1,
				    F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SoftResetNeighborRequest(Rest, 0, Z2,
						F1, F2, TrUserData).


skip_32_SoftResetNeighborRequest(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborRequest(Rest, Z1,
						Z2, F1, F2, TrUserData).


skip_64_SoftResetNeighborRequest(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborRequest(Rest, Z1,
						Z2, F1, F2, TrUserData).


d_msg_AddPolicyResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddPolicyResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_AddPolicyResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_AddPolicyResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_AddPolicyResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_AddPolicyResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPolicyResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_AddPolicyResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AddPolicyResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_AddPolicyResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddPolicyResponse(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_AddPolicyResponse(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_AddPolicyResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddPolicyResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_AddPolicyResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_AddPolicyResponse(Rest, Z1, Z2, TrUserData);
skip_varint_AddPolicyResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddPolicyResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_AddPolicyResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPolicyResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_AddPolicyResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPolicyResponse(Rest2, 0, 0,
					 TrUserData).


skip_group_AddPolicyResponse(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPolicyResponse(Rest, 0, Z2,
					 TrUserData).


skip_32_AddPolicyResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_AddPolicyResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_AddPolicyResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_AddPolicyResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_EnableNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_EnableNeighborRequest(Bin, 0, 0,
					     id([], TrUserData), TrUserData).

dfp_read_field_def_EnableNeighborRequest(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, TrUserData) ->
    d_field_EnableNeighborRequest_address(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_EnableNeighborRequest(<<>>, 0, 0, F1,
					 _) ->
    #{address => F1};
dfp_read_field_def_EnableNeighborRequest(Other, Z1, Z2,
					 F1, TrUserData) ->
    dg_read_field_def_EnableNeighborRequest(Other, Z1, Z2,
					    F1, TrUserData).

dg_read_field_def_EnableNeighborRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableNeighborRequest(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_EnableNeighborRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnableNeighborRequest_address(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnableNeighborRequest(Rest, 0, 0, F1,
						  TrUserData);
	    1 ->
		skip_64_EnableNeighborRequest(Rest, 0, 0, F1,
					      TrUserData);
	    2 ->
		skip_length_delimited_EnableNeighborRequest(Rest, 0, 0,
							    F1, TrUserData);
	    3 ->
		skip_group_EnableNeighborRequest(Rest, Key bsr 3, 0, F1,
						 TrUserData);
	    5 ->
		skip_32_EnableNeighborRequest(Rest, 0, 0, F1,
					      TrUserData)
	  end
    end;
dg_read_field_def_EnableNeighborRequest(<<>>, 0, 0, F1,
					_) ->
    #{address => F1}.

d_field_EnableNeighborRequest_address(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_EnableNeighborRequest_address(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_EnableNeighborRequest_address(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnableNeighborRequest(Rest2, 0, 0,
					     NewFValue, TrUserData).


skip_varint_EnableNeighborRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    skip_varint_EnableNeighborRequest(Rest, Z1, Z2, F1,
				      TrUserData);
skip_varint_EnableNeighborRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_EnableNeighborRequest(Rest, Z1, Z2,
					     F1, TrUserData).


skip_length_delimited_EnableNeighborRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableNeighborRequest(Rest, N + 7,
						X bsl N + Acc, F1, TrUserData);
skip_length_delimited_EnableNeighborRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableNeighborRequest(Rest2, 0, 0,
					     F1, TrUserData).


skip_group_EnableNeighborRequest(Bin, FNum, Z2, F1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableNeighborRequest(Rest, 0, Z2,
					     F1, TrUserData).


skip_32_EnableNeighborRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_EnableNeighborRequest(Rest, Z1, Z2,
					     F1, TrUserData).


skip_64_EnableNeighborRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_EnableNeighborRequest(Rest, Z1, Z2,
					     F1, TrUserData).


d_msg_AddPathResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddPathResponse(Bin, 0, 0,
				       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_AddPathResponse(<<10, Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    d_field_AddPathResponse_uuid(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_AddPathResponse(<<>>, 0, 0, F1, _) ->
    #{uuid => F1};
dfp_read_field_def_AddPathResponse(Other, Z1, Z2, F1,
				   TrUserData) ->
    dg_read_field_def_AddPathResponse(Other, Z1, Z2, F1,
				      TrUserData).

dg_read_field_def_AddPathResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddPathResponse(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_AddPathResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddPathResponse_uuid(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddPathResponse(Rest, 0, 0, F1, TrUserData);
	    1 ->
		skip_64_AddPathResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_AddPathResponse(Rest, 0, 0, F1,
						      TrUserData);
	    3 ->
		skip_group_AddPathResponse(Rest, Key bsr 3, 0, F1,
					   TrUserData);
	    5 -> skip_32_AddPathResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_AddPathResponse(<<>>, 0, 0, F1, _) ->
    #{uuid => F1}.

d_field_AddPathResponse_uuid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_AddPathResponse_uuid(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_AddPathResponse_uuid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_AddPathResponse(Rest2, 0, 0,
				       NewFValue, TrUserData).


skip_varint_AddPathResponse(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    skip_varint_AddPathResponse(Rest, Z1, Z2, F1,
				TrUserData);
skip_varint_AddPathResponse(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddPathResponse(Rest, Z1, Z2, F1,
				       TrUserData).


skip_length_delimited_AddPathResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddPathResponse(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_AddPathResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddPathResponse(Rest2, 0, 0, F1,
				       TrUserData).


skip_group_AddPathResponse(Bin, FNum, Z2, F1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddPathResponse(Rest, 0, Z2, F1,
				       TrUserData).


skip_32_AddPathResponse(<<_:32, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_AddPathResponse(Rest, Z1, Z2, F1,
				       TrUserData).


skip_64_AddPathResponse(<<_:64, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_AddPathResponse(Rest, Z1, Z2, F1,
				       TrUserData).


d_msg_Vrf(Bin, TrUserData) ->
    dfp_read_field_def_Vrf(Bin, 0, 0, id([], TrUserData),
			   id(<<>>, TrUserData), id([], TrUserData),
			   id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Vrf(<<10, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Vrf_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		     TrUserData);
dfp_read_field_def_Vrf(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Vrf_rd(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		   TrUserData);
dfp_read_field_def_Vrf(<<26, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Vrf_import_rt(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  TrUserData);
dfp_read_field_def_Vrf(<<34, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Vrf_export_rt(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  TrUserData);
dfp_read_field_def_Vrf(<<40, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, TrUserData) ->
    d_field_Vrf_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		   TrUserData);
dfp_read_field_def_Vrf(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       TrUserData) ->
    #{name => F1, rd => F2,
      import_rt => lists_reverse(F3, TrUserData),
      export_rt => lists_reverse(F4, TrUserData), id => F5};
dfp_read_field_def_Vrf(Other, Z1, Z2, F1, F2, F3, F4,
		       F5, TrUserData) ->
    dg_read_field_def_Vrf(Other, Z1, Z2, F1, F2, F3, F4, F5,
			  TrUserData).

dg_read_field_def_Vrf(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Vrf(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, TrUserData);
dg_read_field_def_Vrf(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Vrf_name(Rest, 0, 0, F1, F2, F3, F4, F5,
			   TrUserData);
      18 ->
	  d_field_Vrf_rd(Rest, 0, 0, F1, F2, F3, F4, F5,
			 TrUserData);
      26 ->
	  d_field_Vrf_import_rt(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
      34 ->
	  d_field_Vrf_export_rt(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
      40 ->
	  d_field_Vrf_id(Rest, 0, 0, F1, F2, F3, F4, F5,
			 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Vrf(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
	    1 ->
		skip_64_Vrf(Rest, 0, 0, F1, F2, F3, F4, F5, TrUserData);
	    2 ->
		skip_length_delimited_Vrf(Rest, 0, 0, F1, F2, F3, F4,
					  F5, TrUserData);
	    3 ->
		skip_group_Vrf(Rest, Key bsr 3, 0, F1, F2, F3, F4, F5,
			       TrUserData);
	    5 ->
		skip_32_Vrf(Rest, 0, 0, F1, F2, F3, F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_Vrf(<<>>, 0, 0, F1, F2, F3, F4, F5,
		      TrUserData) ->
    #{name => F1, rd => F2,
      import_rt => lists_reverse(F3, TrUserData),
      export_rt => lists_reverse(F4, TrUserData), id => F5}.

d_field_Vrf_name(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Vrf_name(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5, TrUserData);
d_field_Vrf_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Vrf(Rest2, 0, 0, NewFValue, F2, F3,
			   F4, F5, TrUserData).


d_field_Vrf_rd(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
	       F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Vrf_rd(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		   F4, F5, TrUserData);
d_field_Vrf_rd(<<0:1, X:7, Rest/binary>>, N, Acc, F1, _,
	       F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Vrf(Rest2, 0, 0, F1, NewFValue, F3,
			   F4, F5, TrUserData).


d_field_Vrf_import_rt(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Vrf_import_rt(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, TrUserData);
d_field_Vrf_import_rt(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Vrf(Rest2, 0, 0, F1, F2,
			   cons(NewFValue, F3, TrUserData), F4, F5, TrUserData).


d_field_Vrf_export_rt(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Vrf_export_rt(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, TrUserData);
d_field_Vrf_export_rt(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Vrf(Rest2, 0, 0, F1, F2, F3,
			   cons(NewFValue, F4, TrUserData), F5, TrUserData).


d_field_Vrf_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
	       F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_Vrf_id(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		   F4, F5, TrUserData);
d_field_Vrf_id(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
	       F2, F3, F4, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Vrf(Rest, 0, 0, F1, F2, F3, F4,
			   NewFValue, TrUserData).


skip_varint_Vrf(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5, TrUserData) ->
    skip_varint_Vrf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		    TrUserData);
skip_varint_Vrf(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_Vrf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


skip_length_delimited_Vrf(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Vrf(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
skip_length_delimited_Vrf(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Vrf(Rest2, 0, 0, F1, F2, F3, F4, F5,
			   TrUserData).


skip_group_Vrf(Bin, FNum, Z2, F1, F2, F3, F4, F5,
	       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Vrf(Rest, 0, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


skip_32_Vrf(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5, TrUserData) ->
    dfp_read_field_def_Vrf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


skip_64_Vrf(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5, TrUserData) ->
    dfp_read_field_def_Vrf(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData).


d_msg_GetVrfResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetVrfResponse(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_GetVrfResponse(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_GetVrfResponse_vrfs(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_GetVrfResponse(<<>>, 0, 0, F1,
				  TrUserData) ->
    #{vrfs => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetVrfResponse(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_GetVrfResponse(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_GetVrfResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetVrfResponse(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetVrfResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetVrfResponse_vrfs(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetVrfResponse(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetVrfResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetVrfResponse(Rest, 0, 0, F1,
						     TrUserData);
	    3 ->
		skip_group_GetVrfResponse(Rest, Key bsr 3, 0, F1,
					  TrUserData);
	    5 -> skip_32_GetVrfResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetVrfResponse(<<>>, 0, 0, F1,
				 TrUserData) ->
    #{vrfs => lists_reverse(F1, TrUserData)}.

d_field_GetVrfResponse_vrfs(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetVrfResponse_vrfs(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_GetVrfResponse_vrfs(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Vrf(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GetVrfResponse(Rest2, 0, 0,
				      cons(NewFValue, F1, TrUserData),
				      TrUserData).


skip_varint_GetVrfResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_GetVrfResponse(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_GetVrfResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetVrfResponse(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_GetVrfResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetVrfResponse(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetVrfResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetVrfResponse(Rest2, 0, 0, F1,
				      TrUserData).


skip_group_GetVrfResponse(Bin, FNum, Z2, F1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetVrfResponse(Rest, 0, Z2, F1,
				      TrUserData).


skip_32_GetVrfResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetVrfResponse(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_GetVrfResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetVrfResponse(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_SoftResetRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiRequest(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_SoftResetRpkiRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_SoftResetRpkiRequest_address(Rest, Z1, Z2, F1,
					 TrUserData);
dfp_read_field_def_SoftResetRpkiRequest(<<>>, 0, 0, F1,
					_) ->
    #{address => F1};
dfp_read_field_def_SoftResetRpkiRequest(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_SoftResetRpkiRequest(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_SoftResetRpkiRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SoftResetRpkiRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_SoftResetRpkiRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SoftResetRpkiRequest_address(Rest, 0, 0, F1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SoftResetRpkiRequest(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_SoftResetRpkiRequest(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_SoftResetRpkiRequest(Rest, 0, 0,
							   F1, TrUserData);
	    3 ->
		skip_group_SoftResetRpkiRequest(Rest, Key bsr 3, 0, F1,
						TrUserData);
	    5 ->
		skip_32_SoftResetRpkiRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_SoftResetRpkiRequest(<<>>, 0, 0, F1,
				       _) ->
    #{address => F1}.

d_field_SoftResetRpkiRequest_address(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_SoftResetRpkiRequest_address(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
d_field_SoftResetRpkiRequest_address(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SoftResetRpkiRequest(Rest2, 0, 0,
					    NewFValue, TrUserData).


skip_varint_SoftResetRpkiRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_SoftResetRpkiRequest(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_SoftResetRpkiRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_SoftResetRpkiRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SoftResetRpkiRequest(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_SoftResetRpkiRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SoftResetRpkiRequest(Rest2, 0, 0, F1,
					    TrUserData).


skip_group_SoftResetRpkiRequest(Bin, FNum, Z2, F1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SoftResetRpkiRequest(Rest, 0, Z2, F1,
					    TrUserData).


skip_32_SoftResetRpkiRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_SoftResetRpkiRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiRequest(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_StopServerRequest(Bin, TrUserData) ->
    dfp_read_field_def_StopServerRequest(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_StopServerRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_StopServerRequest(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_StopServerRequest(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_StopServerRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StopServerRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_StopServerRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_StopServerRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_StopServerRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_StopServerRequest(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_StopServerRequest(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_StopServerRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_StopServerRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_StopServerRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_StopServerRequest(Rest, Z1, Z2, TrUserData);
skip_varint_StopServerRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_StopServerRequest(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_StopServerRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_StopServerRequest(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_StopServerRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StopServerRequest(Rest2, 0, 0,
					 TrUserData).


skip_group_StopServerRequest(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StopServerRequest(Rest, 0, Z2,
					 TrUserData).


skip_32_StopServerRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_StopServerRequest(Rest, Z1, Z2,
					 TrUserData).


skip_64_StopServerRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_StopServerRequest(Rest, Z1, Z2,
					 TrUserData).


d_msg_AddBmpResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddBmpResponse(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_AddBmpResponse(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_AddBmpResponse(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_AddBmpResponse(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_AddBmpResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddBmpResponse(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_AddBmpResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_AddBmpResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_AddBmpResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddBmpResponse(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_AddBmpResponse(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_AddBmpResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddBmpResponse(<<>>, 0, 0, _) -> #{}.

skip_varint_AddBmpResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_AddBmpResponse(Rest, Z1, Z2, TrUserData);
skip_varint_AddBmpResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddBmpResponse(Rest, Z1, Z2,
				      TrUserData).


skip_length_delimited_AddBmpResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddBmpResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_AddBmpResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddBmpResponse(Rest2, 0, 0,
				      TrUserData).


skip_group_AddBmpResponse(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddBmpResponse(Rest, 0, Z2,
				      TrUserData).


skip_32_AddBmpResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_AddBmpResponse(Rest, Z1, Z2,
				      TrUserData).


skip_64_AddBmpResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_AddBmpResponse(Rest, Z1, Z2,
				      TrUserData).


d_msg_GetRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRpkiRequest(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_GetRpkiRequest(<<8, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_GetRpkiRequest_family(Rest, Z1, Z2, F1,
				  TrUserData);
dfp_read_field_def_GetRpkiRequest(<<>>, 0, 0, F1, _) ->
    #{family => F1};
dfp_read_field_def_GetRpkiRequest(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_GetRpkiRequest(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_GetRpkiRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRpkiRequest(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRpkiRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetRpkiRequest_family(Rest, 0, 0, F1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRpkiRequest(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetRpkiRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRpkiRequest(Rest, 0, 0, F1,
						     TrUserData);
	    3 ->
		skip_group_GetRpkiRequest(Rest, Key bsr 3, 0, F1,
					  TrUserData);
	    5 -> skip_32_GetRpkiRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRpkiRequest(<<>>, 0, 0, F1, _) ->
    #{family => F1}.

d_field_GetRpkiRequest_family(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRpkiRequest_family(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
d_field_GetRpkiRequest_family(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_GetRpkiRequest(Rest, 0, 0, NewFValue,
				      TrUserData).


skip_varint_GetRpkiRequest(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_GetRpkiRequest(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_GetRpkiRequest(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRpkiRequest(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_GetRpkiRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRpkiRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRpkiRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRpkiRequest(Rest2, 0, 0, F1,
				      TrUserData).


skip_group_GetRpkiRequest(Bin, FNum, Z2, F1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRpkiRequest(Rest, 0, Z2, F1,
				      TrUserData).


skip_32_GetRpkiRequest(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetRpkiRequest(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_GetRpkiRequest(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetRpkiRequest(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_DeleteNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteNeighborRequest(Bin, 0, 0,
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_DeleteNeighborRequest(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, TrUserData) ->
    d_field_DeleteNeighborRequest_peer(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_DeleteNeighborRequest(<<>>, 0, 0, F1,
					 _) ->
    #{peer => F1};
dfp_read_field_def_DeleteNeighborRequest(Other, Z1, Z2,
					 F1, TrUserData) ->
    dg_read_field_def_DeleteNeighborRequest(Other, Z1, Z2,
					    F1, TrUserData).

dg_read_field_def_DeleteNeighborRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteNeighborRequest(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DeleteNeighborRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteNeighborRequest_peer(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteNeighborRequest(Rest, 0, 0, F1,
						  TrUserData);
	    1 ->
		skip_64_DeleteNeighborRequest(Rest, 0, 0, F1,
					      TrUserData);
	    2 ->
		skip_length_delimited_DeleteNeighborRequest(Rest, 0, 0,
							    F1, TrUserData);
	    3 ->
		skip_group_DeleteNeighborRequest(Rest, Key bsr 3, 0, F1,
						 TrUserData);
	    5 ->
		skip_32_DeleteNeighborRequest(Rest, 0, 0, F1,
					      TrUserData)
	  end
    end;
dg_read_field_def_DeleteNeighborRequest(<<>>, 0, 0, F1,
					_) ->
    #{peer => F1}.

d_field_DeleteNeighborRequest_peer(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_DeleteNeighborRequest_peer(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_DeleteNeighborRequest_peer(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Peer(Bs, TrUserData), TrUserData),
    dfp_read_field_def_DeleteNeighborRequest(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    merge_msg_Peer(F1,
								   NewFValue,
								   TrUserData)
					     end,
					     TrUserData).


skip_varint_DeleteNeighborRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    skip_varint_DeleteNeighborRequest(Rest, Z1, Z2, F1,
				      TrUserData);
skip_varint_DeleteNeighborRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteNeighborRequest(Rest, Z1, Z2,
					     F1, TrUserData).


skip_length_delimited_DeleteNeighborRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteNeighborRequest(Rest, N + 7,
						X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DeleteNeighborRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteNeighborRequest(Rest2, 0, 0,
					     F1, TrUserData).


skip_group_DeleteNeighborRequest(Bin, FNum, Z2, F1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteNeighborRequest(Rest, 0, Z2,
					     F1, TrUserData).


skip_32_DeleteNeighborRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteNeighborRequest(Rest, Z1, Z2,
					     F1, TrUserData).


skip_64_DeleteNeighborRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteNeighborRequest(Rest, Z1, Z2,
					     F1, TrUserData).


d_msg_AfiSafiState(Bin, TrUserData) ->
    dfp_read_field_def_AfiSafiState(Bin, 0, 0,
				    id(0, TrUserData), id(false, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_AfiSafiState(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_AfiSafiState_family(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_AfiSafiState(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_AfiSafiState_enabled(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
dfp_read_field_def_AfiSafiState(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_AfiSafiState_total_paths(Rest, Z1, Z2, F1, F2,
				     F3, F4, TrUserData);
dfp_read_field_def_AfiSafiState(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_AfiSafiState_total_prefixes(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_AfiSafiState(<<>>, 0, 0, F1, F2, F3,
				F4, _) ->
    #{family => F1, enabled => F2, total_paths => F3,
      total_prefixes => F4};
dfp_read_field_def_AfiSafiState(Other, Z1, Z2, F1, F2,
				F3, F4, TrUserData) ->
    dg_read_field_def_AfiSafiState(Other, Z1, Z2, F1, F2,
				   F3, F4, TrUserData).

dg_read_field_def_AfiSafiState(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AfiSafiState(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_AfiSafiState(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AfiSafiState_family(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      16 ->
	  d_field_AfiSafiState_enabled(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
      24 ->
	  d_field_AfiSafiState_total_paths(Rest, 0, 0, F1, F2, F3,
					   F4, TrUserData);
      32 ->
	  d_field_AfiSafiState_total_prefixes(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AfiSafiState(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    1 ->
		skip_64_AfiSafiState(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
	    2 ->
		skip_length_delimited_AfiSafiState(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData);
	    3 ->
		skip_group_AfiSafiState(Rest, Key bsr 3, 0, F1, F2, F3,
					F4, TrUserData);
	    5 ->
		skip_32_AfiSafiState(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData)
	  end
    end;
dg_read_field_def_AfiSafiState(<<>>, 0, 0, F1, F2, F3,
			       F4, _) ->
    #{family => F1, enabled => F2, total_paths => F3,
      total_prefixes => F4}.

d_field_AfiSafiState_family(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_AfiSafiState_family(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_AfiSafiState_family(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AfiSafiState(Rest, 0, 0, NewFValue,
				    F2, F3, F4, TrUserData).


d_field_AfiSafiState_enabled(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_AfiSafiState_enabled(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, TrUserData);
d_field_AfiSafiState_enabled(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_AfiSafiState(Rest, 0, 0, F1,
				    NewFValue, F3, F4, TrUserData).


d_field_AfiSafiState_total_paths(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_AfiSafiState_total_paths(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_AfiSafiState_total_paths(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AfiSafiState(Rest, 0, 0, F1, F2,
				    NewFValue, F4, TrUserData).


d_field_AfiSafiState_total_prefixes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_AfiSafiState_total_prefixes(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_AfiSafiState_total_prefixes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AfiSafiState(Rest, 0, 0, F1, F2, F3,
				    NewFValue, TrUserData).


skip_varint_AfiSafiState(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_AfiSafiState(Rest, Z1, Z2, F1, F2, F3, F4,
			     TrUserData);
skip_varint_AfiSafiState(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_AfiSafiState(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_length_delimited_AfiSafiState(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_AfiSafiState(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
skip_length_delimited_AfiSafiState(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AfiSafiState(Rest2, 0, 0, F1, F2, F3,
				    F4, TrUserData).


skip_group_AfiSafiState(Bin, FNum, Z2, F1, F2, F3, F4,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AfiSafiState(Rest, 0, Z2, F1, F2, F3,
				    F4, TrUserData).


skip_32_AfiSafiState(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_AfiSafiState(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_64_AfiSafiState(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_AfiSafiState(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


d_msg_GetServerResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetServerResponse(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetServerResponse(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_GetServerResponse_global(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_GetServerResponse(<<>>, 0, 0, F1,
				     _) ->
    #{global => F1};
dfp_read_field_def_GetServerResponse(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_GetServerResponse(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_GetServerResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetServerResponse(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetServerResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetServerResponse_global(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetServerResponse(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_GetServerResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetServerResponse(Rest, 0, 0, F1,
							TrUserData);
	    3 ->
		skip_group_GetServerResponse(Rest, Key bsr 3, 0, F1,
					     TrUserData);
	    5 ->
		skip_32_GetServerResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetServerResponse(<<>>, 0, 0, F1,
				    _) ->
    #{global => F1}.

d_field_GetServerResponse_global(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetServerResponse_global(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_GetServerResponse_global(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Global(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetServerResponse(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_Global(F1, NewFValue,
								 TrUserData)
					 end,
					 TrUserData).


skip_varint_GetServerResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_GetServerResponse(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_GetServerResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetServerResponse(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_GetServerResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetServerResponse(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetServerResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetServerResponse(Rest2, 0, 0, F1,
					 TrUserData).


skip_group_GetServerResponse(Bin, FNum, Z2, F1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetServerResponse(Rest, 0, Z2, F1,
					 TrUserData).


skip_32_GetServerResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GetServerResponse(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_GetServerResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GetServerResponse(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_EnableMrtResponse(Bin, TrUserData) ->
    dfp_read_field_def_EnableMrtResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_EnableMrtResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_EnableMrtResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_EnableMrtResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_EnableMrtResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableMrtResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_EnableMrtResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_EnableMrtResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_EnableMrtResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_EnableMrtResponse(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_EnableMrtResponse(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_EnableMrtResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_EnableMrtResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_EnableMrtResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_EnableMrtResponse(Rest, Z1, Z2, TrUserData);
skip_varint_EnableMrtResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_EnableMrtResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_EnableMrtResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableMrtResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_EnableMrtResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableMrtResponse(Rest2, 0, 0,
					 TrUserData).


skip_group_EnableMrtResponse(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableMrtResponse(Rest, 0, Z2,
					 TrUserData).


skip_32_EnableMrtResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_EnableMrtResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_EnableMrtResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_EnableMrtResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_InjectMrtRequest(Bin, TrUserData) ->
    dfp_read_field_def_InjectMrtRequest(Bin, 0, 0,
					id('GLOBAL', TrUserData),
					id([], TrUserData), id([], TrUserData),
					TrUserData).

dfp_read_field_def_InjectMrtRequest(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InjectMrtRequest_resource(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_InjectMrtRequest(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InjectMrtRequest_vrf_id(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_InjectMrtRequest(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InjectMrtRequest_paths(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_InjectMrtRequest(<<>>, 0, 0, F1, F2,
				    F3, TrUserData) ->
    #{resource => F1, vrf_id => F2,
      paths => lists_reverse(F3, TrUserData)};
dfp_read_field_def_InjectMrtRequest(Other, Z1, Z2, F1,
				    F2, F3, TrUserData) ->
    dg_read_field_def_InjectMrtRequest(Other, Z1, Z2, F1,
				       F2, F3, TrUserData).

dg_read_field_def_InjectMrtRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InjectMrtRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_InjectMrtRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InjectMrtRequest_resource(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      18 ->
	  d_field_InjectMrtRequest_vrf_id(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      26 ->
	  d_field_InjectMrtRequest_paths(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InjectMrtRequest(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    1 ->
		skip_64_InjectMrtRequest(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    2 ->
		skip_length_delimited_InjectMrtRequest(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    3 ->
		skip_group_InjectMrtRequest(Rest, Key bsr 3, 0, F1, F2,
					    F3, TrUserData);
	    5 ->
		skip_32_InjectMrtRequest(Rest, 0, 0, F1, F2, F3,
					 TrUserData)
	  end
    end;
dg_read_field_def_InjectMrtRequest(<<>>, 0, 0, F1, F2,
				   F3, TrUserData) ->
    #{resource => F1, vrf_id => F2,
      paths => lists_reverse(F3, TrUserData)}.

d_field_InjectMrtRequest_resource(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InjectMrtRequest_resource(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_InjectMrtRequest_resource(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_InjectMrtRequest(Rest, 0, 0,
					NewFValue, F2, F3, TrUserData).


d_field_InjectMrtRequest_vrf_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InjectMrtRequest_vrf_id(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_InjectMrtRequest_vrf_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_InjectMrtRequest(Rest2, 0, 0, F1,
					NewFValue, F3, TrUserData).


d_field_InjectMrtRequest_paths(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InjectMrtRequest_paths(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_InjectMrtRequest_paths(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Path(Bs, TrUserData), TrUserData),
    dfp_read_field_def_InjectMrtRequest(Rest2, 0, 0, F1, F2,
					cons(NewFValue, F3, TrUserData),
					TrUserData).


skip_varint_InjectMrtRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_InjectMrtRequest(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
skip_varint_InjectMrtRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InjectMrtRequest(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_length_delimited_InjectMrtRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_InjectMrtRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
skip_length_delimited_InjectMrtRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InjectMrtRequest(Rest2, 0, 0, F1, F2,
					F3, TrUserData).


skip_group_InjectMrtRequest(Bin, FNum, Z2, F1, F2, F3,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InjectMrtRequest(Rest, 0, Z2, F1, F2,
					F3, TrUserData).


skip_32_InjectMrtRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InjectMrtRequest(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_64_InjectMrtRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InjectMrtRequest(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


d_msg_Prefix(Bin, TrUserData) ->
    dfp_read_field_def_Prefix(Bin, 0, 0, id([], TrUserData),
			      id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Prefix(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_Prefix_ip_prefix(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_Prefix(<<16, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_Prefix_mask_length_min(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_Prefix(<<24, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_Prefix_mask_length_max(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_Prefix(<<>>, 0, 0, F1, F2, F3, _) ->
    #{ip_prefix => F1, mask_length_min => F2,
      mask_length_max => F3};
dfp_read_field_def_Prefix(Other, Z1, Z2, F1, F2, F3,
			  TrUserData) ->
    dg_read_field_def_Prefix(Other, Z1, Z2, F1, F2, F3,
			     TrUserData).

dg_read_field_def_Prefix(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Prefix(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
dg_read_field_def_Prefix(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Prefix_ip_prefix(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      16 ->
	  d_field_Prefix_mask_length_min(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      24 ->
	  d_field_Prefix_mask_length_max(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Prefix(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 -> skip_64_Prefix(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_Prefix(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    3 ->
		skip_group_Prefix(Rest, Key bsr 3, 0, F1, F2, F3,
				  TrUserData);
	    5 -> skip_32_Prefix(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_Prefix(<<>>, 0, 0, F1, F2, F3, _) ->
    #{ip_prefix => F1, mask_length_min => F2,
      mask_length_max => F3}.

d_field_Prefix_ip_prefix(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Prefix_ip_prefix(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_Prefix_ip_prefix(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Prefix(Rest2, 0, 0, NewFValue, F2,
			      F3, TrUserData).


d_field_Prefix_mask_length_min(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Prefix_mask_length_min(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_Prefix_mask_length_min(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Prefix(Rest, 0, 0, F1, NewFValue, F3,
			      TrUserData).


d_field_Prefix_mask_length_max(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Prefix_mask_length_max(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_Prefix_mask_length_max(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Prefix(Rest, 0, 0, F1, F2, NewFValue,
			      TrUserData).


skip_varint_Prefix(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, TrUserData) ->
    skip_varint_Prefix(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
skip_varint_Prefix(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, TrUserData) ->
    dfp_read_field_def_Prefix(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


skip_length_delimited_Prefix(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Prefix(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
skip_length_delimited_Prefix(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Prefix(Rest2, 0, 0, F1, F2, F3,
			      TrUserData).


skip_group_Prefix(Bin, FNum, Z2, F1, F2, F3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Prefix(Rest, 0, Z2, F1, F2, F3,
			      TrUserData).


skip_32_Prefix(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, TrUserData) ->
    dfp_read_field_def_Prefix(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


skip_64_Prefix(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, TrUserData) ->
    dfp_read_field_def_Prefix(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


d_msg_DefinedSet(Bin, TrUserData) ->
    dfp_read_field_def_DefinedSet(Bin, 0, 0,
				  id('PREFIX', TrUserData), id([], TrUserData),
				  id([], TrUserData), id([], TrUserData),
				  TrUserData).

dfp_read_field_def_DefinedSet(<<8, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DefinedSet_type(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData);
dfp_read_field_def_DefinedSet(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DefinedSet_name(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData);
dfp_read_field_def_DefinedSet(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DefinedSet_list(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData);
dfp_read_field_def_DefinedSet(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DefinedSet_prefixes(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_DefinedSet(<<>>, 0, 0, F1, F2, F3,
			      F4, TrUserData) ->
    #{type => F1, name => F2,
      list => lists_reverse(F3, TrUserData),
      prefixes => lists_reverse(F4, TrUserData)};
dfp_read_field_def_DefinedSet(Other, Z1, Z2, F1, F2, F3,
			      F4, TrUserData) ->
    dg_read_field_def_DefinedSet(Other, Z1, Z2, F1, F2, F3,
				 F4, TrUserData).

dg_read_field_def_DefinedSet(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DefinedSet(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, TrUserData);
dg_read_field_def_DefinedSet(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DefinedSet_type(Rest, 0, 0, F1, F2, F3, F4,
				  TrUserData);
      18 ->
	  d_field_DefinedSet_name(Rest, 0, 0, F1, F2, F3, F4,
				  TrUserData);
      26 ->
	  d_field_DefinedSet_list(Rest, 0, 0, F1, F2, F3, F4,
				  TrUserData);
      34 ->
	  d_field_DefinedSet_prefixes(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DefinedSet(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
	    1 ->
		skip_64_DefinedSet(Rest, 0, 0, F1, F2, F3, F4,
				   TrUserData);
	    2 ->
		skip_length_delimited_DefinedSet(Rest, 0, 0, F1, F2, F3,
						 F4, TrUserData);
	    3 ->
		skip_group_DefinedSet(Rest, Key bsr 3, 0, F1, F2, F3,
				      F4, TrUserData);
	    5 ->
		skip_32_DefinedSet(Rest, 0, 0, F1, F2, F3, F4,
				   TrUserData)
	  end
    end;
dg_read_field_def_DefinedSet(<<>>, 0, 0, F1, F2, F3, F4,
			     TrUserData) ->
    #{type => F1, name => F2,
      list => lists_reverse(F3, TrUserData),
      prefixes => lists_reverse(F4, TrUserData)}.

d_field_DefinedSet_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DefinedSet_type(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, TrUserData);
d_field_DefinedSet_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, F3, F4, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_DefinedType(Tmp),
    dfp_read_field_def_DefinedSet(Rest, 0, 0, NewFValue, F2,
				  F3, F4, TrUserData).


d_field_DefinedSet_name(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DefinedSet_name(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, TrUserData);
d_field_DefinedSet_name(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DefinedSet(Rest2, 0, 0, F1,
				  NewFValue, F3, F4, TrUserData).


d_field_DefinedSet_list(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DefinedSet_list(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, TrUserData);
d_field_DefinedSet_list(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DefinedSet(Rest2, 0, 0, F1, F2,
				  cons(NewFValue, F3, TrUserData), F4,
				  TrUserData).


d_field_DefinedSet_prefixes(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DefinedSet_prefixes(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_DefinedSet_prefixes(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Prefix(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DefinedSet(Rest2, 0, 0, F1, F2, F3,
				  cons(NewFValue, F4, TrUserData), TrUserData).


skip_varint_DefinedSet(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_DefinedSet(Rest, Z1, Z2, F1, F2, F3, F4,
			   TrUserData);
skip_varint_DefinedSet(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DefinedSet(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData).


skip_length_delimited_DefinedSet(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_DefinedSet(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
skip_length_delimited_DefinedSet(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DefinedSet(Rest2, 0, 0, F1, F2, F3,
				  F4, TrUserData).


skip_group_DefinedSet(Bin, FNum, Z2, F1, F2, F3, F4,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DefinedSet(Rest, 0, Z2, F1, F2, F3,
				  F4, TrUserData).


skip_32_DefinedSet(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DefinedSet(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData).


skip_64_DefinedSet(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DefinedSet(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData).


d_msg_AddDefinedSetRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddDefinedSetRequest(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_AddDefinedSetRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_AddDefinedSetRequest_set(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_AddDefinedSetRequest(<<>>, 0, 0, F1,
					_) ->
    #{set => F1};
dfp_read_field_def_AddDefinedSetRequest(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_AddDefinedSetRequest(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_AddDefinedSetRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddDefinedSetRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_AddDefinedSetRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddDefinedSetRequest_set(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddDefinedSetRequest(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_AddDefinedSetRequest(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_AddDefinedSetRequest(Rest, 0, 0,
							   F1, TrUserData);
	    3 ->
		skip_group_AddDefinedSetRequest(Rest, Key bsr 3, 0, F1,
						TrUserData);
	    5 ->
		skip_32_AddDefinedSetRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_AddDefinedSetRequest(<<>>, 0, 0, F1,
				       _) ->
    #{set => F1}.

d_field_AddDefinedSetRequest_set(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_AddDefinedSetRequest_set(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_AddDefinedSetRequest_set(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_DefinedSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_AddDefinedSetRequest(Rest2, 0, 0,
					    if F1 == undefined -> NewFValue;
					       true ->
						   merge_msg_DefinedSet(F1,
									NewFValue,
									TrUserData)
					    end,
					    TrUserData).


skip_varint_AddDefinedSetRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_AddDefinedSetRequest(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_AddDefinedSetRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_AddDefinedSetRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_AddDefinedSetRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddDefinedSetRequest(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_AddDefinedSetRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddDefinedSetRequest(Rest2, 0, 0, F1,
					    TrUserData).


skip_group_AddDefinedSetRequest(Bin, FNum, Z2, F1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddDefinedSetRequest(Rest, 0, Z2, F1,
					    TrUserData).


skip_32_AddDefinedSetRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_AddDefinedSetRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_AddDefinedSetRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_AddDefinedSetRequest(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_ReplacePolicyAssignmentRequest(Bin, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_ReplacePolicyAssignmentRequest(<<10,
						    Rest/binary>>,
						  Z1, Z2, F1, TrUserData) ->
    d_field_ReplacePolicyAssignmentRequest_assignment(Rest,
						      Z1, Z2, F1, TrUserData);
dfp_read_field_def_ReplacePolicyAssignmentRequest(<<>>,
						  0, 0, F1, _) ->
    #{assignment => F1};
dfp_read_field_def_ReplacePolicyAssignmentRequest(Other,
						  Z1, Z2, F1, TrUserData) ->
    dg_read_field_def_ReplacePolicyAssignmentRequest(Other,
						     Z1, Z2, F1, TrUserData).

dg_read_field_def_ReplacePolicyAssignmentRequest(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplacePolicyAssignmentRequest(Rest,
						     N + 7, X bsl N + Acc, F1,
						     TrUserData);
dg_read_field_def_ReplacePolicyAssignmentRequest(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReplacePolicyAssignmentRequest_assignment(Rest,
							    0, 0, F1,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReplacePolicyAssignmentRequest(Rest, 0, 0,
							   F1, TrUserData);
	    1 ->
		skip_64_ReplacePolicyAssignmentRequest(Rest, 0, 0, F1,
						       TrUserData);
	    2 ->
		skip_length_delimited_ReplacePolicyAssignmentRequest(Rest,
								     0, 0, F1,
								     TrUserData);
	    3 ->
		skip_group_ReplacePolicyAssignmentRequest(Rest,
							  Key bsr 3, 0, F1,
							  TrUserData);
	    5 ->
		skip_32_ReplacePolicyAssignmentRequest(Rest, 0, 0, F1,
						       TrUserData)
	  end
    end;
dg_read_field_def_ReplacePolicyAssignmentRequest(<<>>,
						 0, 0, F1, _) ->
    #{assignment => F1}.

d_field_ReplacePolicyAssignmentRequest_assignment(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ReplacePolicyAssignmentRequest_assignment(Rest,
						      N + 7, X bsl N + Acc, F1,
						      TrUserData);
d_field_ReplacePolicyAssignmentRequest_assignment(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Rest2,
						      0, 0,
						      if F1 == undefined ->
							     NewFValue;
							 true ->
							     merge_msg_PolicyAssignment(F1,
											NewFValue,
											TrUserData)
						      end,
						      TrUserData).


skip_varint_ReplacePolicyAssignmentRequest(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, TrUserData) ->
    skip_varint_ReplacePolicyAssignmentRequest(Rest, Z1, Z2,
					       F1, TrUserData);
skip_varint_ReplacePolicyAssignmentRequest(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Rest,
						      Z1, Z2, F1, TrUserData).


skip_length_delimited_ReplacePolicyAssignmentRequest(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplacePolicyAssignmentRequest(Rest,
							 N + 7, X bsl N + Acc,
							 F1, TrUserData);
skip_length_delimited_ReplacePolicyAssignmentRequest(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Rest2,
						      0, 0, F1, TrUserData).


skip_group_ReplacePolicyAssignmentRequest(Bin, FNum, Z2,
					  F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Rest,
						      0, Z2, F1, TrUserData).


skip_32_ReplacePolicyAssignmentRequest(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Rest,
						      Z1, Z2, F1, TrUserData).


skip_64_ReplacePolicyAssignmentRequest(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentRequest(Rest,
						      Z1, Z2, F1, TrUserData).


d_msg_DeletePathResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeletePathResponse(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_DeletePathResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DeletePathResponse(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_DeletePathResponse(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_DeletePathResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeletePathResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_DeletePathResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeletePathResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_DeletePathResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeletePathResponse(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_DeletePathResponse(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_DeletePathResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeletePathResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DeletePathResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_DeletePathResponse(Rest, Z1, Z2,
				   TrUserData);
skip_varint_DeletePathResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeletePathResponse(Rest, Z1, Z2,
					  TrUserData).


skip_length_delimited_DeletePathResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeletePathResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_DeletePathResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeletePathResponse(Rest2, 0, 0,
					  TrUserData).


skip_group_DeletePathResponse(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeletePathResponse(Rest, 0, Z2,
					  TrUserData).


skip_32_DeletePathResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_DeletePathResponse(Rest, Z1, Z2,
					  TrUserData).


skip_64_DeletePathResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_DeletePathResponse(Rest, Z1, Z2,
					  TrUserData).


d_msg_DeletePolicyRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeletePolicyRequest(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(false, TrUserData),
					   id(false, TrUserData), TrUserData).

dfp_read_field_def_DeletePolicyRequest(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_DeletePolicyRequest_policy(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData);
dfp_read_field_def_DeletePolicyRequest(<<16,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_DeletePolicyRequest_preserve_statements(Rest,
						    Z1, Z2, F1, F2, F3,
						    TrUserData);
dfp_read_field_def_DeletePolicyRequest(<<24,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_DeletePolicyRequest_all(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_DeletePolicyRequest(<<>>, 0, 0, F1,
				       F2, F3, _) ->
    #{policy => F1, preserve_statements => F2, all => F3};
dfp_read_field_def_DeletePolicyRequest(Other, Z1, Z2,
				       F1, F2, F3, TrUserData) ->
    dg_read_field_def_DeletePolicyRequest(Other, Z1, Z2, F1,
					  F2, F3, TrUserData).

dg_read_field_def_DeletePolicyRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeletePolicyRequest(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
dg_read_field_def_DeletePolicyRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeletePolicyRequest_policy(Rest, 0, 0, F1, F2,
					     F3, TrUserData);
      16 ->
	  d_field_DeletePolicyRequest_preserve_statements(Rest, 0,
							  0, F1, F2, F3,
							  TrUserData);
      24 ->
	  d_field_DeletePolicyRequest_all(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeletePolicyRequest(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    1 ->
		skip_64_DeletePolicyRequest(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    2 ->
		skip_length_delimited_DeletePolicyRequest(Rest, 0, 0,
							  F1, F2, F3,
							  TrUserData);
	    3 ->
		skip_group_DeletePolicyRequest(Rest, Key bsr 3, 0, F1,
					       F2, F3, TrUserData);
	    5 ->
		skip_32_DeletePolicyRequest(Rest, 0, 0, F1, F2, F3,
					    TrUserData)
	  end
    end;
dg_read_field_def_DeletePolicyRequest(<<>>, 0, 0, F1,
				      F2, F3, _) ->
    #{policy => F1, preserve_statements => F2, all => F3}.

d_field_DeletePolicyRequest_policy(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_DeletePolicyRequest_policy(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_DeletePolicyRequest_policy(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Policy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeletePolicyRequest(Rest2, 0, 0,
					   if F1 == undefined -> NewFValue;
					      true ->
						  merge_msg_Policy(F1,
								   NewFValue,
								   TrUserData)
					   end,
					   F2, F3, TrUserData).


d_field_DeletePolicyRequest_preserve_statements(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_DeletePolicyRequest_preserve_statements(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, TrUserData);
d_field_DeletePolicyRequest_preserve_statements(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, _, F3,
						TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_DeletePolicyRequest(Rest, 0, 0, F1,
					   NewFValue, F3, TrUserData).


d_field_DeletePolicyRequest_all(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_DeletePolicyRequest_all(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_DeletePolicyRequest_all(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_DeletePolicyRequest(Rest, 0, 0, F1,
					   F2, NewFValue, TrUserData).


skip_varint_DeletePolicyRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_DeletePolicyRequest(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
skip_varint_DeletePolicyRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_DeletePolicyRequest(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


skip_length_delimited_DeletePolicyRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeletePolicyRequest(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3,
					      TrUserData);
skip_length_delimited_DeletePolicyRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeletePolicyRequest(Rest2, 0, 0, F1,
					   F2, F3, TrUserData).


skip_group_DeletePolicyRequest(Bin, FNum, Z2, F1, F2,
			       F3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeletePolicyRequest(Rest, 0, Z2, F1,
					   F2, F3, TrUserData).


skip_32_DeletePolicyRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_DeletePolicyRequest(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


skip_64_DeletePolicyRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_DeletePolicyRequest(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


d_msg_DeleteVrfRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteVrfRequest(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DeleteVrfRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_DeleteVrfRequest_vrf(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_DeleteVrfRequest(<<>>, 0, 0, F1,
				    _) ->
    #{vrf => F1};
dfp_read_field_def_DeleteVrfRequest(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_DeleteVrfRequest(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_DeleteVrfRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteVrfRequest(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DeleteVrfRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteVrfRequest_vrf(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteVrfRequest(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_DeleteVrfRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_DeleteVrfRequest(Rest, 0, 0, F1,
						       TrUserData);
	    3 ->
		skip_group_DeleteVrfRequest(Rest, Key bsr 3, 0, F1,
					    TrUserData);
	    5 ->
		skip_32_DeleteVrfRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_DeleteVrfRequest(<<>>, 0, 0, F1, _) ->
    #{vrf => F1}.

d_field_DeleteVrfRequest_vrf(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_DeleteVrfRequest_vrf(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_DeleteVrfRequest_vrf(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Vrf(Bs, TrUserData), TrUserData),
    dfp_read_field_def_DeleteVrfRequest(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_Vrf(F1, NewFValue,
							     TrUserData)
					end,
					TrUserData).


skip_varint_DeleteVrfRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_DeleteVrfRequest(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_DeleteVrfRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteVrfRequest(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_DeleteVrfRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteVrfRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DeleteVrfRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteVrfRequest(Rest2, 0, 0, F1,
					TrUserData).


skip_group_DeleteVrfRequest(Bin, FNum, Z2, F1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteVrfRequest(Rest, 0, Z2, F1,
					TrUserData).


skip_32_DeleteVrfRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_DeleteVrfRequest(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_DeleteVrfRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_DeleteVrfRequest(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_GetPolicyAssignmentResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentResponse(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_GetPolicyAssignmentResponse(<<10,
						 Rest/binary>>,
					       Z1, Z2, F1, TrUserData) ->
    d_field_GetPolicyAssignmentResponse_assignment(Rest, Z1,
						   Z2, F1, TrUserData);
dfp_read_field_def_GetPolicyAssignmentResponse(<<>>, 0,
					       0, F1, _) ->
    #{assignment => F1};
dfp_read_field_def_GetPolicyAssignmentResponse(Other,
					       Z1, Z2, F1, TrUserData) ->
    dg_read_field_def_GetPolicyAssignmentResponse(Other, Z1,
						  Z2, F1, TrUserData).

dg_read_field_def_GetPolicyAssignmentResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetPolicyAssignmentResponse(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
dg_read_field_def_GetPolicyAssignmentResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetPolicyAssignmentResponse_assignment(Rest, 0,
							 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetPolicyAssignmentResponse(Rest, 0, 0, F1,
							TrUserData);
	    1 ->
		skip_64_GetPolicyAssignmentResponse(Rest, 0, 0, F1,
						    TrUserData);
	    2 ->
		skip_length_delimited_GetPolicyAssignmentResponse(Rest,
								  0, 0, F1,
								  TrUserData);
	    3 ->
		skip_group_GetPolicyAssignmentResponse(Rest, Key bsr 3,
						       0, F1, TrUserData);
	    5 ->
		skip_32_GetPolicyAssignmentResponse(Rest, 0, 0, F1,
						    TrUserData)
	  end
    end;
dg_read_field_def_GetPolicyAssignmentResponse(<<>>, 0,
					      0, F1, _) ->
    #{assignment => F1}.

d_field_GetPolicyAssignmentResponse_assignment(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetPolicyAssignmentResponse_assignment(Rest,
						   N + 7, X bsl N + Acc, F1,
						   TrUserData);
d_field_GetPolicyAssignmentResponse_assignment(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetPolicyAssignmentResponse(Rest2, 0,
						   0,
						   if F1 == undefined ->
							  NewFValue;
						      true ->
							  merge_msg_PolicyAssignment(F1,
										     NewFValue,
										     TrUserData)
						   end,
						   TrUserData).


skip_varint_GetPolicyAssignmentResponse(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    skip_varint_GetPolicyAssignmentResponse(Rest, Z1, Z2,
					    F1, TrUserData);
skip_varint_GetPolicyAssignmentResponse(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentResponse(Rest, Z1,
						   Z2, F1, TrUserData).


skip_length_delimited_GetPolicyAssignmentResponse(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetPolicyAssignmentResponse(Rest,
						      N + 7, X bsl N + Acc, F1,
						      TrUserData);
skip_length_delimited_GetPolicyAssignmentResponse(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetPolicyAssignmentResponse(Rest2, 0,
						   0, F1, TrUserData).


skip_group_GetPolicyAssignmentResponse(Bin, FNum, Z2,
				       F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetPolicyAssignmentResponse(Rest, 0,
						   Z2, F1, TrUserData).


skip_32_GetPolicyAssignmentResponse(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentResponse(Rest, Z1,
						   Z2, F1, TrUserData).


skip_64_GetPolicyAssignmentResponse(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentResponse(Rest, Z1,
						   Z2, F1, TrUserData).


d_msg_DeleteDefinedSetResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetResponse(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_DeleteDefinedSetResponse(<<>>, 0, 0,
					    _) ->
    #{};
dfp_read_field_def_DeleteDefinedSetResponse(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_DeleteDefinedSetResponse(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_DeleteDefinedSetResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteDefinedSetResponse(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteDefinedSetResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteDefinedSetResponse(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_DeleteDefinedSetResponse(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_DeleteDefinedSetResponse(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_DeleteDefinedSetResponse(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_DeleteDefinedSetResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteDefinedSetResponse(<<>>, 0, 0,
					   _) ->
    #{}.

skip_varint_DeleteDefinedSetResponse(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_DeleteDefinedSetResponse(Rest, Z1, Z2,
					 TrUserData);
skip_varint_DeleteDefinedSetResponse(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetResponse(Rest, Z1,
						Z2, TrUserData).


skip_length_delimited_DeleteDefinedSetResponse(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteDefinedSetResponse(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_DeleteDefinedSetResponse(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteDefinedSetResponse(Rest2, 0, 0,
						TrUserData).


skip_group_DeleteDefinedSetResponse(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteDefinedSetResponse(Rest, 0, Z2,
						TrUserData).


skip_32_DeleteDefinedSetResponse(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetResponse(Rest, Z1,
						Z2, TrUserData).


skip_64_DeleteDefinedSetResponse(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetResponse(Rest, Z1,
						Z2, TrUserData).


d_msg_ReplacePolicyAssignmentResponse(Bin,
				      TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentResponse(Bin,
						       0, 0, TrUserData).

dfp_read_field_def_ReplacePolicyAssignmentResponse(<<>>,
						   0, 0, _) ->
    #{};
dfp_read_field_def_ReplacePolicyAssignmentResponse(Other,
						   Z1, Z2, TrUserData) ->
    dg_read_field_def_ReplacePolicyAssignmentResponse(Other,
						      Z1, Z2, TrUserData).

dg_read_field_def_ReplacePolicyAssignmentResponse(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplacePolicyAssignmentResponse(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
dg_read_field_def_ReplacePolicyAssignmentResponse(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ReplacePolicyAssignmentResponse(Rest, 0, 0,
						      TrUserData);
      1 ->
	  skip_64_ReplacePolicyAssignmentResponse(Rest, 0, 0,
						  TrUserData);
      2 ->
	  skip_length_delimited_ReplacePolicyAssignmentResponse(Rest,
								0, 0,
								TrUserData);
      3 ->
	  skip_group_ReplacePolicyAssignmentResponse(Rest,
						     Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_ReplacePolicyAssignmentResponse(Rest, 0, 0,
						  TrUserData)
    end;
dg_read_field_def_ReplacePolicyAssignmentResponse(<<>>,
						  0, 0, _) ->
    #{}.

skip_varint_ReplacePolicyAssignmentResponse(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, TrUserData) ->
    skip_varint_ReplacePolicyAssignmentResponse(Rest, Z1,
						Z2, TrUserData);
skip_varint_ReplacePolicyAssignmentResponse(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentResponse(Rest,
						       Z1, Z2, TrUserData).


skip_length_delimited_ReplacePolicyAssignmentResponse(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplacePolicyAssignmentResponse(Rest,
							  N + 7, X bsl N + Acc,
							  TrUserData);
skip_length_delimited_ReplacePolicyAssignmentResponse(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplacePolicyAssignmentResponse(Rest2,
						       0, 0, TrUserData).


skip_group_ReplacePolicyAssignmentResponse(Bin, FNum,
					   Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplacePolicyAssignmentResponse(Rest,
						       0, Z2, TrUserData).


skip_32_ReplacePolicyAssignmentResponse(<<_:32,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentResponse(Rest,
						       Z1, Z2, TrUserData).


skip_64_ReplacePolicyAssignmentResponse(<<_:64,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplacePolicyAssignmentResponse(Rest,
						       Z1, Z2, TrUserData).


d_msg_GetServerRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetServerRequest(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_GetServerRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_GetServerRequest(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_GetServerRequest(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_GetServerRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetServerRequest(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_GetServerRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_GetServerRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_GetServerRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_GetServerRequest(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_GetServerRequest(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_GetServerRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_GetServerRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_GetServerRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_GetServerRequest(Rest, Z1, Z2, TrUserData);
skip_varint_GetServerRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_GetServerRequest(Rest, Z1, Z2,
					TrUserData).


skip_length_delimited_GetServerRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetServerRequest(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_GetServerRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetServerRequest(Rest2, 0, 0,
					TrUserData).


skip_group_GetServerRequest(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetServerRequest(Rest, 0, Z2,
					TrUserData).


skip_32_GetServerRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_GetServerRequest(Rest, Z1, Z2,
					TrUserData).


skip_64_GetServerRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_GetServerRequest(Rest, Z1, Z2,
					TrUserData).


d_msg_AddBmpRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddBmpRequest(Bin, 0, 0,
				     id([], TrUserData), id(0, TrUserData),
				     id('PRE', TrUserData), TrUserData).

dfp_read_field_def_AddBmpRequest(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddBmpRequest_address(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_AddBmpRequest(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddBmpRequest_port(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_AddBmpRequest(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddBmpRequest_type(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_AddBmpRequest(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #{address => F1, port => F2, type => F3};
dfp_read_field_def_AddBmpRequest(Other, Z1, Z2, F1, F2,
				 F3, TrUserData) ->
    dg_read_field_def_AddBmpRequest(Other, Z1, Z2, F1, F2,
				    F3, TrUserData).

dg_read_field_def_AddBmpRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddBmpRequest(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_AddBmpRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddBmpRequest_address(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      16 ->
	  d_field_AddBmpRequest_port(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      24 ->
	  d_field_AddBmpRequest_type(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddBmpRequest(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
	    1 ->
		skip_64_AddBmpRequest(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    2 ->
		skip_length_delimited_AddBmpRequest(Rest, 0, 0, F1, F2,
						    F3, TrUserData);
	    3 ->
		skip_group_AddBmpRequest(Rest, Key bsr 3, 0, F1, F2, F3,
					 TrUserData);
	    5 ->
		skip_32_AddBmpRequest(Rest, 0, 0, F1, F2, F3,
				      TrUserData)
	  end
    end;
dg_read_field_def_AddBmpRequest(<<>>, 0, 0, F1, F2, F3,
				_) ->
    #{address => F1, port => F2, type => F3}.

d_field_AddBmpRequest_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddBmpRequest_address(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_AddBmpRequest_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_AddBmpRequest(Rest2, 0, 0, NewFValue,
				     F2, F3, TrUserData).


d_field_AddBmpRequest_port(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddBmpRequest_port(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_AddBmpRequest_port(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AddBmpRequest(Rest, 0, 0, F1,
				     NewFValue, F3, TrUserData).


d_field_AddBmpRequest_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddBmpRequest_type(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_AddBmpRequest_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_AddBmpRequest.MonitoringPolicy'(Tmp),
    dfp_read_field_def_AddBmpRequest(Rest, 0, 0, F1, F2,
				     NewFValue, TrUserData).


skip_varint_AddBmpRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, TrUserData) ->
    skip_varint_AddBmpRequest(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
skip_varint_AddBmpRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddBmpRequest(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


skip_length_delimited_AddBmpRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddBmpRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_AddBmpRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddBmpRequest(Rest2, 0, 0, F1, F2,
				     F3, TrUserData).


skip_group_AddBmpRequest(Bin, FNum, Z2, F1, F2, F3,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddBmpRequest(Rest, 0, Z2, F1, F2,
				     F3, TrUserData).


skip_32_AddBmpRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, TrUserData) ->
    dfp_read_field_def_AddBmpRequest(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


skip_64_AddBmpRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, TrUserData) ->
    dfp_read_field_def_AddBmpRequest(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


d_msg_ResetNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_ResetNeighborRequest(Bin, 0, 0,
					    id([], TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_ResetNeighborRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_ResetNeighborRequest_address(Rest, Z1, Z2, F1,
					 F2, TrUserData);
dfp_read_field_def_ResetNeighborRequest(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_ResetNeighborRequest_communication(Rest, Z1, Z2,
					       F1, F2, TrUserData);
dfp_read_field_def_ResetNeighborRequest(<<>>, 0, 0, F1,
					F2, _) ->
    #{address => F1, communication => F2};
dfp_read_field_def_ResetNeighborRequest(Other, Z1, Z2,
					F1, F2, TrUserData) ->
    dg_read_field_def_ResetNeighborRequest(Other, Z1, Z2,
					   F1, F2, TrUserData).

dg_read_field_def_ResetNeighborRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResetNeighborRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_ResetNeighborRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResetNeighborRequest_address(Rest, 0, 0, F1, F2,
					       TrUserData);
      18 ->
	  d_field_ResetNeighborRequest_communication(Rest, 0, 0,
						     F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResetNeighborRequest(Rest, 0, 0, F1, F2,
						 TrUserData);
	    1 ->
		skip_64_ResetNeighborRequest(Rest, 0, 0, F1, F2,
					     TrUserData);
	    2 ->
		skip_length_delimited_ResetNeighborRequest(Rest, 0, 0,
							   F1, F2, TrUserData);
	    3 ->
		skip_group_ResetNeighborRequest(Rest, Key bsr 3, 0, F1,
						F2, TrUserData);
	    5 ->
		skip_32_ResetNeighborRequest(Rest, 0, 0, F1, F2,
					     TrUserData)
	  end
    end;
dg_read_field_def_ResetNeighborRequest(<<>>, 0, 0, F1,
				       F2, _) ->
    #{address => F1, communication => F2}.

d_field_ResetNeighborRequest_address(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ResetNeighborRequest_address(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
d_field_ResetNeighborRequest_address(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResetNeighborRequest(Rest2, 0, 0,
					    NewFValue, F2, TrUserData).


d_field_ResetNeighborRequest_communication(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ResetNeighborRequest_communication(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
d_field_ResetNeighborRequest_communication(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResetNeighborRequest(Rest2, 0, 0, F1,
					    NewFValue, TrUserData).


skip_varint_ResetNeighborRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ResetNeighborRequest(Rest, Z1, Z2, F1, F2,
				     TrUserData);
skip_varint_ResetNeighborRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ResetNeighborRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_length_delimited_ResetNeighborRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResetNeighborRequest(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
skip_length_delimited_ResetNeighborRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResetNeighborRequest(Rest2, 0, 0, F1,
					    F2, TrUserData).


skip_group_ResetNeighborRequest(Bin, FNum, Z2, F1, F2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResetNeighborRequest(Rest, 0, Z2, F1,
					    F2, TrUserData).


skip_32_ResetNeighborRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ResetNeighborRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_64_ResetNeighborRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ResetNeighborRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData).


d_msg_GetRibInfoRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRibInfoRequest(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRibInfoRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_GetRibInfoRequest_info(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_GetRibInfoRequest(<<>>, 0, 0, F1,
				     _) ->
    #{info => F1};
dfp_read_field_def_GetRibInfoRequest(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_GetRibInfoRequest(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_GetRibInfoRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRibInfoRequest(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRibInfoRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRibInfoRequest_info(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRibInfoRequest(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_GetRibInfoRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRibInfoRequest(Rest, 0, 0, F1,
							TrUserData);
	    3 ->
		skip_group_GetRibInfoRequest(Rest, Key bsr 3, 0, F1,
					     TrUserData);
	    5 ->
		skip_32_GetRibInfoRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRibInfoRequest(<<>>, 0, 0, F1,
				    _) ->
    #{info => F1}.

d_field_GetRibInfoRequest_info(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRibInfoRequest_info(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_GetRibInfoRequest_info(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetRibInfoRequest(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_TableInfo(F1,
								    NewFValue,
								    TrUserData)
					 end,
					 TrUserData).


skip_varint_GetRibInfoRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_GetRibInfoRequest(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_GetRibInfoRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRibInfoRequest(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_GetRibInfoRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRibInfoRequest(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRibInfoRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRibInfoRequest(Rest2, 0, 0, F1,
					 TrUserData).


skip_group_GetRibInfoRequest(Bin, FNum, Z2, F1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRibInfoRequest(Rest, 0, Z2, F1,
					 TrUserData).


skip_32_GetRibInfoRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GetRibInfoRequest(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_GetRibInfoRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GetRibInfoRequest(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_GetRibRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRibRequest(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRibRequest(<<10, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    d_field_GetRibRequest_table(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_GetRibRequest(<<>>, 0, 0, F1, _) ->
    #{table => F1};
dfp_read_field_def_GetRibRequest(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_GetRibRequest(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_GetRibRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRibRequest(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRibRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRibRequest_table(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRibRequest(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetRibRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRibRequest(Rest, 0, 0, F1,
						    TrUserData);
	    3 ->
		skip_group_GetRibRequest(Rest, Key bsr 3, 0, F1,
					 TrUserData);
	    5 -> skip_32_GetRibRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRibRequest(<<>>, 0, 0, F1, _) ->
    #{table => F1}.

d_field_GetRibRequest_table(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRibRequest_table(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_GetRibRequest_table(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Table(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GetRibRequest(Rest2, 0, 0,
				     if F1 == undefined -> NewFValue;
					true ->
					    merge_msg_Table(F1, NewFValue,
							    TrUserData)
				     end,
				     TrUserData).


skip_varint_GetRibRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_GetRibRequest(Rest, Z1, Z2, F1, TrUserData);
skip_varint_GetRibRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRibRequest(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_GetRibRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRibRequest(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRibRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRibRequest(Rest2, 0, 0, F1,
				     TrUserData).


skip_group_GetRibRequest(Bin, FNum, Z2, F1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRibRequest(Rest, 0, Z2, F1,
				     TrUserData).


skip_32_GetRibRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_GetRibRequest(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_GetRibRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_GetRibRequest(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_GetStatementRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetStatementRequest(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_GetStatementRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_GetStatementRequest(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_GetStatementRequest(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_GetStatementRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetStatementRequest(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_GetStatementRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_GetStatementRequest(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_GetStatementRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_GetStatementRequest(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_GetStatementRequest(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_GetStatementRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_GetStatementRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_GetStatementRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_GetStatementRequest(Rest, Z1, Z2,
				    TrUserData);
skip_varint_GetStatementRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_GetStatementRequest(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_GetStatementRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetStatementRequest(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_GetStatementRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetStatementRequest(Rest2, 0, 0,
					   TrUserData).


skip_group_GetStatementRequest(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetStatementRequest(Rest, 0, Z2,
					   TrUserData).


skip_32_GetStatementRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_GetStatementRequest(Rest, Z1, Z2,
					   TrUserData).


skip_64_GetStatementRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_GetStatementRequest(Rest, Z1, Z2,
					   TrUserData).


d_msg_ReplaceStatementRequest(Bin, TrUserData) ->
    dfp_read_field_def_ReplaceStatementRequest(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_ReplaceStatementRequest(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, TrUserData) ->
    d_field_ReplaceStatementRequest_statement(Rest, Z1, Z2,
					      F1, TrUserData);
dfp_read_field_def_ReplaceStatementRequest(<<>>, 0, 0,
					   F1, _) ->
    #{statement => F1};
dfp_read_field_def_ReplaceStatementRequest(Other, Z1,
					   Z2, F1, TrUserData) ->
    dg_read_field_def_ReplaceStatementRequest(Other, Z1, Z2,
					      F1, TrUserData).

dg_read_field_def_ReplaceStatementRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplaceStatementRequest(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ReplaceStatementRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReplaceStatementRequest_statement(Rest, 0, 0,
						    F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReplaceStatementRequest(Rest, 0, 0, F1,
						    TrUserData);
	    1 ->
		skip_64_ReplaceStatementRequest(Rest, 0, 0, F1,
						TrUserData);
	    2 ->
		skip_length_delimited_ReplaceStatementRequest(Rest, 0,
							      0, F1,
							      TrUserData);
	    3 ->
		skip_group_ReplaceStatementRequest(Rest, Key bsr 3, 0,
						   F1, TrUserData);
	    5 ->
		skip_32_ReplaceStatementRequest(Rest, 0, 0, F1,
						TrUserData)
	  end
    end;
dg_read_field_def_ReplaceStatementRequest(<<>>, 0, 0,
					  F1, _) ->
    #{statement => F1}.

d_field_ReplaceStatementRequest_statement(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ReplaceStatementRequest_statement(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
d_field_ReplaceStatementRequest_statement(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Statement(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ReplaceStatementRequest(Rest2, 0, 0,
					       if F1 == undefined -> NewFValue;
						  true ->
						      merge_msg_Statement(F1,
									  NewFValue,
									  TrUserData)
					       end,
					       TrUserData).


skip_varint_ReplaceStatementRequest(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    skip_varint_ReplaceStatementRequest(Rest, Z1, Z2, F1,
					TrUserData);
skip_varint_ReplaceStatementRequest(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplaceStatementRequest(Rest, Z1, Z2,
					       F1, TrUserData).


skip_length_delimited_ReplaceStatementRequest(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplaceStatementRequest(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
skip_length_delimited_ReplaceStatementRequest(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplaceStatementRequest(Rest2, 0, 0,
					       F1, TrUserData).


skip_group_ReplaceStatementRequest(Bin, FNum, Z2, F1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplaceStatementRequest(Rest, 0, Z2,
					       F1, TrUserData).


skip_32_ReplaceStatementRequest(<<_:32, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplaceStatementRequest(Rest, Z1, Z2,
					       F1, TrUserData).


skip_64_ReplaceStatementRequest(<<_:64, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplaceStatementRequest(Rest, Z1, Z2,
					       F1, TrUserData).


d_msg_StopServerResponse(Bin, TrUserData) ->
    dfp_read_field_def_StopServerResponse(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_StopServerResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_StopServerResponse(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_StopServerResponse(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_StopServerResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StopServerResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_StopServerResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_StopServerResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_StopServerResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_StopServerResponse(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_StopServerResponse(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_StopServerResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_StopServerResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_StopServerResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_StopServerResponse(Rest, Z1, Z2,
				   TrUserData);
skip_varint_StopServerResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_StopServerResponse(Rest, Z1, Z2,
					  TrUserData).


skip_length_delimited_StopServerResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_StopServerResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_StopServerResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StopServerResponse(Rest2, 0, 0,
					  TrUserData).


skip_group_StopServerResponse(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StopServerResponse(Rest, 0, Z2,
					  TrUserData).


skip_32_StopServerResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_StopServerResponse(Rest, Z1, Z2,
					  TrUserData).


skip_64_StopServerResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_StopServerResponse(Rest, Z1, Z2,
					  TrUserData).


d_msg_DeleteStatementRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteStatementRequest(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(false, TrUserData),
					      TrUserData).

dfp_read_field_def_DeleteStatementRequest(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteStatementRequest_statement(Rest, Z1, Z2,
					     F1, F2, TrUserData);
dfp_read_field_def_DeleteStatementRequest(<<16,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteStatementRequest_all(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_DeleteStatementRequest(<<>>, 0, 0,
					  F1, F2, _) ->
    #{statement => F1, all => F2};
dfp_read_field_def_DeleteStatementRequest(Other, Z1, Z2,
					  F1, F2, TrUserData) ->
    dg_read_field_def_DeleteStatementRequest(Other, Z1, Z2,
					     F1, F2, TrUserData).

dg_read_field_def_DeleteStatementRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteStatementRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_DeleteStatementRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteStatementRequest_statement(Rest, 0, 0, F1,
						   F2, TrUserData);
      16 ->
	  d_field_DeleteStatementRequest_all(Rest, 0, 0, F1, F2,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteStatementRequest(Rest, 0, 0, F1, F2,
						   TrUserData);
	    1 ->
		skip_64_DeleteStatementRequest(Rest, 0, 0, F1, F2,
					       TrUserData);
	    2 ->
		skip_length_delimited_DeleteStatementRequest(Rest, 0, 0,
							     F1, F2,
							     TrUserData);
	    3 ->
		skip_group_DeleteStatementRequest(Rest, Key bsr 3, 0,
						  F1, F2, TrUserData);
	    5 ->
		skip_32_DeleteStatementRequest(Rest, 0, 0, F1, F2,
					       TrUserData)
	  end
    end;
dg_read_field_def_DeleteStatementRequest(<<>>, 0, 0, F1,
					 F2, _) ->
    #{statement => F1, all => F2}.

d_field_DeleteStatementRequest_statement(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteStatementRequest_statement(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteStatementRequest_statement(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Statement(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeleteStatementRequest(Rest2, 0, 0,
					      if F1 == undefined -> NewFValue;
						 true ->
						     merge_msg_Statement(F1,
									 NewFValue,
									 TrUserData)
					      end,
					      F2, TrUserData).


d_field_DeleteStatementRequest_all(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteStatementRequest_all(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteStatementRequest_all(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_DeleteStatementRequest(Rest, 0, 0,
					      F1, NewFValue, TrUserData).


skip_varint_DeleteStatementRequest(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DeleteStatementRequest(Rest, Z1, Z2, F1, F2,
				       TrUserData);
skip_varint_DeleteStatementRequest(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteStatementRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData).


skip_length_delimited_DeleteStatementRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteStatementRequest(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 TrUserData);
skip_length_delimited_DeleteStatementRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteStatementRequest(Rest2, 0, 0,
					      F1, F2, TrUserData).


skip_group_DeleteStatementRequest(Bin, FNum, Z2, F1, F2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteStatementRequest(Rest, 0, Z2,
					      F1, F2, TrUserData).


skip_32_DeleteStatementRequest(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteStatementRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData).


skip_64_DeleteStatementRequest(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteStatementRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData).


d_msg_AddRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddRpkiRequest(Bin, 0, 0,
				      id([], TrUserData), id(0, TrUserData),
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_AddRpkiRequest(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddRpkiRequest_address(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_AddRpkiRequest(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddRpkiRequest_port(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_AddRpkiRequest(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_AddRpkiRequest_lifetime(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_AddRpkiRequest(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #{address => F1, port => F2, lifetime => F3};
dfp_read_field_def_AddRpkiRequest(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_AddRpkiRequest(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_AddRpkiRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddRpkiRequest(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_AddRpkiRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddRpkiRequest_address(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      16 ->
	  d_field_AddRpkiRequest_port(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      24 ->
	  d_field_AddRpkiRequest_lifetime(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddRpkiRequest(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_AddRpkiRequest(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_AddRpkiRequest(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    3 ->
		skip_group_AddRpkiRequest(Rest, Key bsr 3, 0, F1, F2,
					  F3, TrUserData);
	    5 ->
		skip_32_AddRpkiRequest(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_AddRpkiRequest(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #{address => F1, port => F2, lifetime => F3}.

d_field_AddRpkiRequest_address(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddRpkiRequest_address(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_AddRpkiRequest_address(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_AddRpkiRequest(Rest2, 0, 0,
				      NewFValue, F2, F3, TrUserData).


d_field_AddRpkiRequest_port(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddRpkiRequest_port(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_AddRpkiRequest_port(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AddRpkiRequest(Rest, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_AddRpkiRequest_lifetime(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_AddRpkiRequest_lifetime(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_AddRpkiRequest_lifetime(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_AddRpkiRequest(Rest, 0, 0, F1, F2,
				      NewFValue, TrUserData).


skip_varint_AddRpkiRequest(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_AddRpkiRequest(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_AddRpkiRequest(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddRpkiRequest(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_AddRpkiRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddRpkiRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_AddRpkiRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddRpkiRequest(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_group_AddRpkiRequest(Bin, FNum, Z2, F1, F2, F3,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddRpkiRequest(Rest, 0, Z2, F1, F2,
				      F3, TrUserData).


skip_32_AddRpkiRequest(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddRpkiRequest(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_AddRpkiRequest(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_AddRpkiRequest(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_GetRibResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRibResponse(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRibResponse(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_GetRibResponse_table(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_GetRibResponse(<<>>, 0, 0, F1, _) ->
    #{table => F1};
dfp_read_field_def_GetRibResponse(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_GetRibResponse(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_GetRibResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRibResponse(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRibResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRibResponse_table(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRibResponse(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetRibResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRibResponse(Rest, 0, 0, F1,
						     TrUserData);
	    3 ->
		skip_group_GetRibResponse(Rest, Key bsr 3, 0, F1,
					  TrUserData);
	    5 -> skip_32_GetRibResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRibResponse(<<>>, 0, 0, F1, _) ->
    #{table => F1}.

d_field_GetRibResponse_table(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRibResponse_table(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_GetRibResponse_table(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Table(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GetRibResponse(Rest2, 0, 0,
				      if F1 == undefined -> NewFValue;
					 true ->
					     merge_msg_Table(F1, NewFValue,
							     TrUserData)
				      end,
				      TrUserData).


skip_varint_GetRibResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_GetRibResponse(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_GetRibResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRibResponse(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_GetRibResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRibResponse(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRibResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRibResponse(Rest2, 0, 0, F1,
				      TrUserData).


skip_group_GetRibResponse(Bin, FNum, Z2, F1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRibResponse(Rest, 0, Z2, F1,
				      TrUserData).


skip_32_GetRibResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetRibResponse(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_GetRibResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetRibResponse(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_DisableMrtRequest(Bin, TrUserData) ->
    dfp_read_field_def_DisableMrtRequest(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_DisableMrtRequest(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DisableMrtRequest(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_DisableMrtRequest(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_DisableMrtRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisableMrtRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_DisableMrtRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DisableMrtRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_DisableMrtRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DisableMrtRequest(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_DisableMrtRequest(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_DisableMrtRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DisableMrtRequest(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DisableMrtRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_DisableMrtRequest(Rest, Z1, Z2, TrUserData);
skip_varint_DisableMrtRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_DisableMrtRequest(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_DisableMrtRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisableMrtRequest(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_DisableMrtRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisableMrtRequest(Rest2, 0, 0,
					 TrUserData).


skip_group_DisableMrtRequest(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisableMrtRequest(Rest, 0, Z2,
					 TrUserData).


skip_32_DisableMrtRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DisableMrtRequest(Rest, Z1, Z2,
					 TrUserData).


skip_64_DisableMrtRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DisableMrtRequest(Rest, Z1, Z2,
					 TrUserData).


d_msg_DisableRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_DisableRpkiRequest(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_DisableRpkiRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_DisableRpkiRequest_address(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_DisableRpkiRequest(<<>>, 0, 0, F1,
				      _) ->
    #{address => F1};
dfp_read_field_def_DisableRpkiRequest(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_DisableRpkiRequest(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_DisableRpkiRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisableRpkiRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DisableRpkiRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DisableRpkiRequest_address(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DisableRpkiRequest(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_DisableRpkiRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_DisableRpkiRequest(Rest, 0, 0, F1,
							 TrUserData);
	    3 ->
		skip_group_DisableRpkiRequest(Rest, Key bsr 3, 0, F1,
					      TrUserData);
	    5 ->
		skip_32_DisableRpkiRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_DisableRpkiRequest(<<>>, 0, 0, F1,
				     _) ->
    #{address => F1}.

d_field_DisableRpkiRequest_address(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_DisableRpkiRequest_address(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_DisableRpkiRequest_address(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DisableRpkiRequest(Rest2, 0, 0,
					  NewFValue, TrUserData).


skip_varint_DisableRpkiRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_DisableRpkiRequest(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_DisableRpkiRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_DisableRpkiRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_DisableRpkiRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisableRpkiRequest(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DisableRpkiRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisableRpkiRequest(Rest2, 0, 0, F1,
					  TrUserData).


skip_group_DisableRpkiRequest(Bin, FNum, Z2, F1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisableRpkiRequest(Rest, 0, Z2, F1,
					  TrUserData).


skip_32_DisableRpkiRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_DisableRpkiRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_DisableRpkiRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_DisableRpkiRequest(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_EnableRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_EnableRpkiResponse(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_EnableRpkiResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_EnableRpkiResponse(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_EnableRpkiResponse(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_EnableRpkiResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableRpkiResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_EnableRpkiResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_EnableRpkiResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_EnableRpkiResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_EnableRpkiResponse(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_EnableRpkiResponse(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_EnableRpkiResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_EnableRpkiResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_EnableRpkiResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_EnableRpkiResponse(Rest, Z1, Z2,
				   TrUserData);
skip_varint_EnableRpkiResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_EnableRpkiResponse(Rest, Z1, Z2,
					  TrUserData).


skip_length_delimited_EnableRpkiResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableRpkiResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_EnableRpkiResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableRpkiResponse(Rest2, 0, 0,
					  TrUserData).


skip_group_EnableRpkiResponse(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableRpkiResponse(Rest, 0, Z2,
					  TrUserData).


skip_32_EnableRpkiResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_EnableRpkiResponse(Rest, Z1, Z2,
					  TrUserData).


skip_64_EnableRpkiResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_EnableRpkiResponse(Rest, Z1, Z2,
					  TrUserData).


d_msg_ReplaceDefinedSetRequest(Bin, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetRequest(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_ReplaceDefinedSetRequest(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, TrUserData) ->
    d_field_ReplaceDefinedSetRequest_set(Rest, Z1, Z2, F1,
					 TrUserData);
dfp_read_field_def_ReplaceDefinedSetRequest(<<>>, 0, 0,
					    F1, _) ->
    #{set => F1};
dfp_read_field_def_ReplaceDefinedSetRequest(Other, Z1,
					    Z2, F1, TrUserData) ->
    dg_read_field_def_ReplaceDefinedSetRequest(Other, Z1,
					       Z2, F1, TrUserData).

dg_read_field_def_ReplaceDefinedSetRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplaceDefinedSetRequest(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ReplaceDefinedSetRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReplaceDefinedSetRequest_set(Rest, 0, 0, F1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReplaceDefinedSetRequest(Rest, 0, 0, F1,
						     TrUserData);
	    1 ->
		skip_64_ReplaceDefinedSetRequest(Rest, 0, 0, F1,
						 TrUserData);
	    2 ->
		skip_length_delimited_ReplaceDefinedSetRequest(Rest, 0,
							       0, F1,
							       TrUserData);
	    3 ->
		skip_group_ReplaceDefinedSetRequest(Rest, Key bsr 3, 0,
						    F1, TrUserData);
	    5 ->
		skip_32_ReplaceDefinedSetRequest(Rest, 0, 0, F1,
						 TrUserData)
	  end
    end;
dg_read_field_def_ReplaceDefinedSetRequest(<<>>, 0, 0,
					   F1, _) ->
    #{set => F1}.

d_field_ReplaceDefinedSetRequest_set(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ReplaceDefinedSetRequest_set(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
d_field_ReplaceDefinedSetRequest_set(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_DefinedSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ReplaceDefinedSetRequest(Rest2, 0, 0,
						if F1 == undefined -> NewFValue;
						   true ->
						       merge_msg_DefinedSet(F1,
									    NewFValue,
									    TrUserData)
						end,
						TrUserData).


skip_varint_ReplaceDefinedSetRequest(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    skip_varint_ReplaceDefinedSetRequest(Rest, Z1, Z2, F1,
					 TrUserData);
skip_varint_ReplaceDefinedSetRequest(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetRequest(Rest, Z1,
						Z2, F1, TrUserData).


skip_length_delimited_ReplaceDefinedSetRequest(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplaceDefinedSetRequest(Rest,
						   N + 7, X bsl N + Acc, F1,
						   TrUserData);
skip_length_delimited_ReplaceDefinedSetRequest(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplaceDefinedSetRequest(Rest2, 0, 0,
						F1, TrUserData).


skip_group_ReplaceDefinedSetRequest(Bin, FNum, Z2, F1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplaceDefinedSetRequest(Rest, 0, Z2,
						F1, TrUserData).


skip_32_ReplaceDefinedSetRequest(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetRequest(Rest, Z1,
						Z2, F1, TrUserData).


skip_64_ReplaceDefinedSetRequest(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetRequest(Rest, Z1,
						Z2, F1, TrUserData).


d_msg_DisableNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_DisableNeighborRequest(Bin, 0, 0,
					      id([], TrUserData),
					      id([], TrUserData), TrUserData).

dfp_read_field_def_DisableNeighborRequest(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    d_field_DisableNeighborRequest_address(Rest, Z1, Z2, F1,
					   F2, TrUserData);
dfp_read_field_def_DisableNeighborRequest(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, TrUserData) ->
    d_field_DisableNeighborRequest_communication(Rest, Z1,
						 Z2, F1, F2, TrUserData);
dfp_read_field_def_DisableNeighborRequest(<<>>, 0, 0,
					  F1, F2, _) ->
    #{address => F1, communication => F2};
dfp_read_field_def_DisableNeighborRequest(Other, Z1, Z2,
					  F1, F2, TrUserData) ->
    dg_read_field_def_DisableNeighborRequest(Other, Z1, Z2,
					     F1, F2, TrUserData).

dg_read_field_def_DisableNeighborRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisableNeighborRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_DisableNeighborRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DisableNeighborRequest_address(Rest, 0, 0, F1,
						 F2, TrUserData);
      18 ->
	  d_field_DisableNeighborRequest_communication(Rest, 0, 0,
						       F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DisableNeighborRequest(Rest, 0, 0, F1, F2,
						   TrUserData);
	    1 ->
		skip_64_DisableNeighborRequest(Rest, 0, 0, F1, F2,
					       TrUserData);
	    2 ->
		skip_length_delimited_DisableNeighborRequest(Rest, 0, 0,
							     F1, F2,
							     TrUserData);
	    3 ->
		skip_group_DisableNeighborRequest(Rest, Key bsr 3, 0,
						  F1, F2, TrUserData);
	    5 ->
		skip_32_DisableNeighborRequest(Rest, 0, 0, F1, F2,
					       TrUserData)
	  end
    end;
dg_read_field_def_DisableNeighborRequest(<<>>, 0, 0, F1,
					 F2, _) ->
    #{address => F1, communication => F2}.

d_field_DisableNeighborRequest_address(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DisableNeighborRequest_address(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
d_field_DisableNeighborRequest_address(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DisableNeighborRequest(Rest2, 0, 0,
					      NewFValue, F2, TrUserData).


d_field_DisableNeighborRequest_communication(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DisableNeighborRequest_communication(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 TrUserData);
d_field_DisableNeighborRequest_communication(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DisableNeighborRequest(Rest2, 0, 0,
					      F1, NewFValue, TrUserData).


skip_varint_DisableNeighborRequest(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DisableNeighborRequest(Rest, Z1, Z2, F1, F2,
				       TrUserData);
skip_varint_DisableNeighborRequest(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DisableNeighborRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData).


skip_length_delimited_DisableNeighborRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisableNeighborRequest(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 TrUserData);
skip_length_delimited_DisableNeighborRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisableNeighborRequest(Rest2, 0, 0,
					      F1, F2, TrUserData).


skip_group_DisableNeighborRequest(Bin, FNum, Z2, F1, F2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisableNeighborRequest(Rest, 0, Z2,
					      F1, F2, TrUserData).


skip_32_DisableNeighborRequest(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DisableNeighborRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData).


skip_64_DisableNeighborRequest(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DisableNeighborRequest(Rest, Z1, Z2,
					      F1, F2, TrUserData).


d_msg_DeletePolicyResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeletePolicyResponse(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_DeletePolicyResponse(<<>>, 0, 0,
					_) ->
    #{};
dfp_read_field_def_DeletePolicyResponse(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_DeletePolicyResponse(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_DeletePolicyResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeletePolicyResponse(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_DeletePolicyResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeletePolicyResponse(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_DeletePolicyResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeletePolicyResponse(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_DeletePolicyResponse(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_DeletePolicyResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeletePolicyResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DeletePolicyResponse(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_DeletePolicyResponse(Rest, Z1, Z2,
				     TrUserData);
skip_varint_DeletePolicyResponse(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeletePolicyResponse(Rest, Z1, Z2,
					    TrUserData).


skip_length_delimited_DeletePolicyResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeletePolicyResponse(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_DeletePolicyResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeletePolicyResponse(Rest2, 0, 0,
					    TrUserData).


skip_group_DeletePolicyResponse(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeletePolicyResponse(Rest, 0, Z2,
					    TrUserData).


skip_32_DeletePolicyResponse(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_DeletePolicyResponse(Rest, Z1, Z2,
					    TrUserData).


skip_64_DeletePolicyResponse(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_DeletePolicyResponse(Rest, Z1, Z2,
					    TrUserData).


d_msg_SoftResetRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiResponse(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_SoftResetRpkiResponse(<<>>, 0, 0,
					 _) ->
    #{};
dfp_read_field_def_SoftResetRpkiResponse(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_SoftResetRpkiResponse(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_SoftResetRpkiResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SoftResetRpkiResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_SoftResetRpkiResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_SoftResetRpkiResponse(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_SoftResetRpkiResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_SoftResetRpkiResponse(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_SoftResetRpkiResponse(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_SoftResetRpkiResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_SoftResetRpkiResponse(<<>>, 0, 0,
					_) ->
    #{}.

skip_varint_SoftResetRpkiResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_SoftResetRpkiResponse(Rest, Z1, Z2,
				      TrUserData);
skip_varint_SoftResetRpkiResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiResponse(Rest, Z1, Z2,
					     TrUserData).


skip_length_delimited_SoftResetRpkiResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_SoftResetRpkiResponse(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_SoftResetRpkiResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SoftResetRpkiResponse(Rest2, 0, 0,
					     TrUserData).


skip_group_SoftResetRpkiResponse(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SoftResetRpkiResponse(Rest, 0, Z2,
					     TrUserData).


skip_32_SoftResetRpkiResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiResponse(Rest, Z1, Z2,
					     TrUserData).


skip_64_SoftResetRpkiResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_SoftResetRpkiResponse(Rest, Z1, Z2,
					     TrUserData).


d_msg_GetNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetNeighborResponse(Bin, 0, 0,
					   id([], TrUserData), TrUserData).

dfp_read_field_def_GetNeighborResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    d_field_GetNeighborResponse_peers(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_GetNeighborResponse(<<>>, 0, 0, F1,
				       TrUserData) ->
    #{peers => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetNeighborResponse(Other, Z1, Z2,
				       F1, TrUserData) ->
    dg_read_field_def_GetNeighborResponse(Other, Z1, Z2, F1,
					  TrUserData).

dg_read_field_def_GetNeighborResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetNeighborResponse(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetNeighborResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetNeighborResponse_peers(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetNeighborResponse(Rest, 0, 0, F1,
						TrUserData);
	    1 ->
		skip_64_GetNeighborResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetNeighborResponse(Rest, 0, 0,
							  F1, TrUserData);
	    3 ->
		skip_group_GetNeighborResponse(Rest, Key bsr 3, 0, F1,
					       TrUserData);
	    5 ->
		skip_32_GetNeighborResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetNeighborResponse(<<>>, 0, 0, F1,
				      TrUserData) ->
    #{peers => lists_reverse(F1, TrUserData)}.

d_field_GetNeighborResponse_peers(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetNeighborResponse_peers(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_GetNeighborResponse_peers(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Peer(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GetNeighborResponse(Rest2, 0, 0,
					   cons(NewFValue, F1, TrUserData),
					   TrUserData).


skip_varint_GetNeighborResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    skip_varint_GetNeighborResponse(Rest, Z1, Z2, F1,
				    TrUserData);
skip_varint_GetNeighborResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetNeighborResponse(Rest, Z1, Z2, F1,
					   TrUserData).


skip_length_delimited_GetNeighborResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetNeighborResponse(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetNeighborResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetNeighborResponse(Rest2, 0, 0, F1,
					   TrUserData).


skip_group_GetNeighborResponse(Bin, FNum, Z2, F1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetNeighborResponse(Rest, 0, Z2, F1,
					   TrUserData).


skip_32_GetNeighborResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_GetNeighborResponse(Rest, Z1, Z2, F1,
					   TrUserData).


skip_64_GetNeighborResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_GetNeighborResponse(Rest, Z1, Z2, F1,
					   TrUserData).


d_msg_ReplacePolicyResponse(Bin, TrUserData) ->
    dfp_read_field_def_ReplacePolicyResponse(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_ReplacePolicyResponse(<<>>, 0, 0,
					 _) ->
    #{};
dfp_read_field_def_ReplacePolicyResponse(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_ReplacePolicyResponse(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_ReplacePolicyResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplacePolicyResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_ReplacePolicyResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ReplacePolicyResponse(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_ReplacePolicyResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ReplacePolicyResponse(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_ReplacePolicyResponse(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_ReplacePolicyResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ReplacePolicyResponse(<<>>, 0, 0,
					_) ->
    #{}.

skip_varint_ReplacePolicyResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_ReplacePolicyResponse(Rest, Z1, Z2,
				      TrUserData);
skip_varint_ReplacePolicyResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplacePolicyResponse(Rest, Z1, Z2,
					     TrUserData).


skip_length_delimited_ReplacePolicyResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplacePolicyResponse(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_ReplacePolicyResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplacePolicyResponse(Rest2, 0, 0,
					     TrUserData).


skip_group_ReplacePolicyResponse(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplacePolicyResponse(Rest, 0, Z2,
					     TrUserData).


skip_32_ReplacePolicyResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_ReplacePolicyResponse(Rest, Z1, Z2,
					     TrUserData).


skip_64_ReplacePolicyResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_ReplacePolicyResponse(Rest, Z1, Z2,
					     TrUserData).


d_msg_GetRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRpkiResponse(Bin, 0, 0,
				       id([], TrUserData), TrUserData).

dfp_read_field_def_GetRpkiResponse(<<10, Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    d_field_GetRpkiResponse_servers(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_GetRpkiResponse(<<>>, 0, 0, F1,
				   TrUserData) ->
    #{servers => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetRpkiResponse(Other, Z1, Z2, F1,
				   TrUserData) ->
    dg_read_field_def_GetRpkiResponse(Other, Z1, Z2, F1,
				      TrUserData).

dg_read_field_def_GetRpkiResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRpkiResponse(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRpkiResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRpkiResponse_servers(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRpkiResponse(Rest, 0, 0, F1, TrUserData);
	    1 ->
		skip_64_GetRpkiResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRpkiResponse(Rest, 0, 0, F1,
						      TrUserData);
	    3 ->
		skip_group_GetRpkiResponse(Rest, Key bsr 3, 0, F1,
					   TrUserData);
	    5 -> skip_32_GetRpkiResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRpkiResponse(<<>>, 0, 0, F1,
				  TrUserData) ->
    #{servers => lists_reverse(F1, TrUserData)}.

d_field_GetRpkiResponse_servers(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRpkiResponse_servers(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_GetRpkiResponse_servers(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Rpki(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GetRpkiResponse(Rest2, 0, 0,
				       cons(NewFValue, F1, TrUserData),
				       TrUserData).


skip_varint_GetRpkiResponse(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    skip_varint_GetRpkiResponse(Rest, Z1, Z2, F1,
				TrUserData);
skip_varint_GetRpkiResponse(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRpkiResponse(Rest, Z1, Z2, F1,
				       TrUserData).


skip_length_delimited_GetRpkiResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRpkiResponse(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRpkiResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRpkiResponse(Rest2, 0, 0, F1,
				       TrUserData).


skip_group_GetRpkiResponse(Bin, FNum, Z2, F1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRpkiResponse(Rest, 0, Z2, F1,
				       TrUserData).


skip_32_GetRpkiResponse(<<_:32, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_GetRpkiResponse(Rest, Z1, Z2, F1,
				       TrUserData).


skip_64_GetRpkiResponse(<<_:64, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_GetRpkiResponse(Rest, Z1, Z2, F1,
				       TrUserData).


d_msg_SoftResetNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborResponse(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_SoftResetNeighborResponse(<<>>, 0, 0,
					     _) ->
    #{};
dfp_read_field_def_SoftResetNeighborResponse(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_SoftResetNeighborResponse(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_SoftResetNeighborResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SoftResetNeighborResponse(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_SoftResetNeighborResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_SoftResetNeighborResponse(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_SoftResetNeighborResponse(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_SoftResetNeighborResponse(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_SoftResetNeighborResponse(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_SoftResetNeighborResponse(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_SoftResetNeighborResponse(<<>>, 0, 0,
					    _) ->
    #{}.

skip_varint_SoftResetNeighborResponse(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_SoftResetNeighborResponse(Rest, Z1, Z2,
					  TrUserData);
skip_varint_SoftResetNeighborResponse(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborResponse(Rest, Z1,
						 Z2, TrUserData).


skip_length_delimited_SoftResetNeighborResponse(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_SoftResetNeighborResponse(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_SoftResetNeighborResponse(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SoftResetNeighborResponse(Rest2, 0,
						 0, TrUserData).


skip_group_SoftResetNeighborResponse(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SoftResetNeighborResponse(Rest, 0,
						 Z2, TrUserData).


skip_32_SoftResetNeighborResponse(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborResponse(Rest, Z1,
						 Z2, TrUserData).


skip_64_SoftResetNeighborResponse(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_SoftResetNeighborResponse(Rest, Z1,
						 Z2, TrUserData).


d_msg_AddDefinedSetResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddDefinedSetResponse(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_AddDefinedSetResponse(<<>>, 0, 0,
					 _) ->
    #{};
dfp_read_field_def_AddDefinedSetResponse(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_AddDefinedSetResponse(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_AddDefinedSetResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddDefinedSetResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_AddDefinedSetResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_AddDefinedSetResponse(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_AddDefinedSetResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AddDefinedSetResponse(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_AddDefinedSetResponse(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_AddDefinedSetResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AddDefinedSetResponse(<<>>, 0, 0,
					_) ->
    #{}.

skip_varint_AddDefinedSetResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_AddDefinedSetResponse(Rest, Z1, Z2,
				      TrUserData);
skip_varint_AddDefinedSetResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_AddDefinedSetResponse(Rest, Z1, Z2,
					     TrUserData).


skip_length_delimited_AddDefinedSetResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddDefinedSetResponse(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_AddDefinedSetResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddDefinedSetResponse(Rest2, 0, 0,
					     TrUserData).


skip_group_AddDefinedSetResponse(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddDefinedSetResponse(Rest, 0, Z2,
					     TrUserData).


skip_32_AddDefinedSetResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_AddDefinedSetResponse(Rest, Z1, Z2,
					     TrUserData).


skip_64_AddDefinedSetResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_AddDefinedSetResponse(Rest, Z1, Z2,
					     TrUserData).


d_msg_GetNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetNeighborRequest(Bin, 0, 0,
					  id(false, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_GetNeighborRequest(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2, TrUserData) ->
    d_field_GetNeighborRequest_enableAdvertised(Rest, Z1,
						Z2, F1, F2, TrUserData);
dfp_read_field_def_GetNeighborRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, TrUserData) ->
    d_field_GetNeighborRequest_address(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_GetNeighborRequest(<<>>, 0, 0, F1,
				      F2, _) ->
    #{enableAdvertised => F1, address => F2};
dfp_read_field_def_GetNeighborRequest(Other, Z1, Z2, F1,
				      F2, TrUserData) ->
    dg_read_field_def_GetNeighborRequest(Other, Z1, Z2, F1,
					 F2, TrUserData).

dg_read_field_def_GetNeighborRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetNeighborRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_GetNeighborRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetNeighborRequest_enableAdvertised(Rest, 0, 0,
						      F1, F2, TrUserData);
      18 ->
	  d_field_GetNeighborRequest_address(Rest, 0, 0, F1, F2,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetNeighborRequest(Rest, 0, 0, F1, F2,
					       TrUserData);
	    1 ->
		skip_64_GetNeighborRequest(Rest, 0, 0, F1, F2,
					   TrUserData);
	    2 ->
		skip_length_delimited_GetNeighborRequest(Rest, 0, 0, F1,
							 F2, TrUserData);
	    3 ->
		skip_group_GetNeighborRequest(Rest, Key bsr 3, 0, F1,
					      F2, TrUserData);
	    5 ->
		skip_32_GetNeighborRequest(Rest, 0, 0, F1, F2,
					   TrUserData)
	  end
    end;
dg_read_field_def_GetNeighborRequest(<<>>, 0, 0, F1, F2,
				     _) ->
    #{enableAdvertised => F1, address => F2}.

d_field_GetNeighborRequest_enableAdvertised(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GetNeighborRequest_enableAdvertised(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
d_field_GetNeighborRequest_enableAdvertised(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GetNeighborRequest(Rest, 0, 0,
					  NewFValue, F2, TrUserData).


d_field_GetNeighborRequest_address(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GetNeighborRequest_address(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_GetNeighborRequest_address(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetNeighborRequest(Rest2, 0, 0, F1,
					  NewFValue, TrUserData).


skip_varint_GetNeighborRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_GetNeighborRequest(Rest, Z1, Z2, F1, F2,
				   TrUserData);
skip_varint_GetNeighborRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetNeighborRequest(Rest, Z1, Z2, F1,
					  F2, TrUserData).


skip_length_delimited_GetNeighborRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetNeighborRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_GetNeighborRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetNeighborRequest(Rest2, 0, 0, F1,
					  F2, TrUserData).


skip_group_GetNeighborRequest(Bin, FNum, Z2, F1, F2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetNeighborRequest(Rest, 0, Z2, F1,
					  F2, TrUserData).


skip_32_GetNeighborRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetNeighborRequest(Rest, Z1, Z2, F1,
					  F2, TrUserData).


skip_64_GetNeighborRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetNeighborRequest(Rest, Z1, Z2, F1,
					  F2, TrUserData).


d_msg_EnableMrtRequest(Bin, TrUserData) ->
    dfp_read_field_def_EnableMrtRequest(Bin, 0, 0,
					id(0, TrUserData), id([], TrUserData),
					id(0, TrUserData), TrUserData).

dfp_read_field_def_EnableMrtRequest(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnableMrtRequest_dump_type(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData);
dfp_read_field_def_EnableMrtRequest(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnableMrtRequest_filename(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_EnableMrtRequest(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnableMrtRequest_interval(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_EnableMrtRequest(<<>>, 0, 0, F1, F2,
				    F3, _) ->
    #{dump_type => F1, filename => F2, interval => F3};
dfp_read_field_def_EnableMrtRequest(Other, Z1, Z2, F1,
				    F2, F3, TrUserData) ->
    dg_read_field_def_EnableMrtRequest(Other, Z1, Z2, F1,
				       F2, F3, TrUserData).

dg_read_field_def_EnableMrtRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableMrtRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_EnableMrtRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EnableMrtRequest_dump_type(Rest, 0, 0, F1, F2,
					     F3, TrUserData);
      18 ->
	  d_field_EnableMrtRequest_filename(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      24 ->
	  d_field_EnableMrtRequest_interval(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnableMrtRequest(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    1 ->
		skip_64_EnableMrtRequest(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    2 ->
		skip_length_delimited_EnableMrtRequest(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    3 ->
		skip_group_EnableMrtRequest(Rest, Key bsr 3, 0, F1, F2,
					    F3, TrUserData);
	    5 ->
		skip_32_EnableMrtRequest(Rest, 0, 0, F1, F2, F3,
					 TrUserData)
	  end
    end;
dg_read_field_def_EnableMrtRequest(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #{dump_type => F1, filename => F2, interval => F3}.

d_field_EnableMrtRequest_dump_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnableMrtRequest_dump_type(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnableMrtRequest_dump_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_EnableMrtRequest(Rest, 0, 0,
					NewFValue, F2, F3, TrUserData).


d_field_EnableMrtRequest_filename(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnableMrtRequest_filename(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnableMrtRequest_filename(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnableMrtRequest(Rest2, 0, 0, F1,
					NewFValue, F3, TrUserData).


d_field_EnableMrtRequest_interval(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnableMrtRequest_interval(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnableMrtRequest_interval(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_EnableMrtRequest(Rest, 0, 0, F1, F2,
					NewFValue, TrUserData).


skip_varint_EnableMrtRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_EnableMrtRequest(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
skip_varint_EnableMrtRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnableMrtRequest(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_length_delimited_EnableMrtRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableMrtRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
skip_length_delimited_EnableMrtRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableMrtRequest(Rest2, 0, 0, F1, F2,
					F3, TrUserData).


skip_group_EnableMrtRequest(Bin, FNum, Z2, F1, F2, F3,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableMrtRequest(Rest, 0, Z2, F1, F2,
					F3, TrUserData).


skip_32_EnableMrtRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnableMrtRequest(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_64_EnableMrtRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnableMrtRequest(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


d_msg_ReplacePolicyRequest(Bin, TrUserData) ->
    dfp_read_field_def_ReplacePolicyRequest(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(false, TrUserData),
					    id(false, TrUserData), TrUserData).

dfp_read_field_def_ReplacePolicyRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ReplacePolicyRequest_policy(Rest, Z1, Z2, F1,
					F2, F3, TrUserData);
dfp_read_field_def_ReplacePolicyRequest(<<16,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ReplacePolicyRequest_refer_existing_statements(Rest,
							   Z1, Z2, F1, F2, F3,
							   TrUserData);
dfp_read_field_def_ReplacePolicyRequest(<<24,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ReplacePolicyRequest_preserve_statements(Rest,
						     Z1, Z2, F1, F2, F3,
						     TrUserData);
dfp_read_field_def_ReplacePolicyRequest(<<>>, 0, 0, F1,
					F2, F3, _) ->
    #{policy => F1, refer_existing_statements => F2,
      preserve_statements => F3};
dfp_read_field_def_ReplacePolicyRequest(Other, Z1, Z2,
					F1, F2, F3, TrUserData) ->
    dg_read_field_def_ReplacePolicyRequest(Other, Z1, Z2,
					   F1, F2, F3, TrUserData).

dg_read_field_def_ReplacePolicyRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplacePolicyRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
dg_read_field_def_ReplacePolicyRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReplacePolicyRequest_policy(Rest, 0, 0, F1, F2,
					      F3, TrUserData);
      16 ->
	  d_field_ReplacePolicyRequest_refer_existing_statements(Rest,
								 0, 0, F1, F2,
								 F3,
								 TrUserData);
      24 ->
	  d_field_ReplacePolicyRequest_preserve_statements(Rest,
							   0, 0, F1, F2, F3,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReplacePolicyRequest(Rest, 0, 0, F1, F2, F3,
						 TrUserData);
	    1 ->
		skip_64_ReplacePolicyRequest(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    2 ->
		skip_length_delimited_ReplacePolicyRequest(Rest, 0, 0,
							   F1, F2, F3,
							   TrUserData);
	    3 ->
		skip_group_ReplacePolicyRequest(Rest, Key bsr 3, 0, F1,
						F2, F3, TrUserData);
	    5 ->
		skip_32_ReplacePolicyRequest(Rest, 0, 0, F1, F2, F3,
					     TrUserData)
	  end
    end;
dg_read_field_def_ReplacePolicyRequest(<<>>, 0, 0, F1,
				       F2, F3, _) ->
    #{policy => F1, refer_existing_statements => F2,
      preserve_statements => F3}.

d_field_ReplacePolicyRequest_policy(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ReplacePolicyRequest_policy(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ReplacePolicyRequest_policy(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Policy(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ReplacePolicyRequest(Rest2, 0, 0,
					    if F1 == undefined -> NewFValue;
					       true ->
						   merge_msg_Policy(F1,
								    NewFValue,
								    TrUserData)
					    end,
					    F2, F3, TrUserData).


d_field_ReplacePolicyRequest_refer_existing_statements(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3,
						       TrUserData)
    when N < 57 ->
    d_field_ReplacePolicyRequest_refer_existing_statements(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3,
							   TrUserData);
d_field_ReplacePolicyRequest_refer_existing_statements(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, _, F3,
						       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_ReplacePolicyRequest(Rest, 0, 0, F1,
					    NewFValue, F3, TrUserData).


d_field_ReplacePolicyRequest_preserve_statements(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ReplacePolicyRequest_preserve_statements(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, TrUserData);
d_field_ReplacePolicyRequest_preserve_statements(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, _,
						 TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_ReplacePolicyRequest(Rest, 0, 0, F1,
					    F2, NewFValue, TrUserData).


skip_varint_ReplacePolicyRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ReplacePolicyRequest(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
skip_varint_ReplacePolicyRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ReplacePolicyRequest(Rest, Z1, Z2,
					    F1, F2, F3, TrUserData).


skip_length_delimited_ReplacePolicyRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplacePolicyRequest(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3,
					       TrUserData);
skip_length_delimited_ReplacePolicyRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplacePolicyRequest(Rest2, 0, 0, F1,
					    F2, F3, TrUserData).


skip_group_ReplacePolicyRequest(Bin, FNum, Z2, F1, F2,
				F3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplacePolicyRequest(Rest, 0, Z2, F1,
					    F2, F3, TrUserData).


skip_32_ReplacePolicyRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ReplacePolicyRequest(Rest, Z1, Z2,
					    F1, F2, F3, TrUserData).


skip_64_ReplacePolicyRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ReplacePolicyRequest(Rest, Z1, Z2,
					    F1, F2, F3, TrUserData).


d_msg_Arguments(Bin, TrUserData) ->
    dfp_read_field_def_Arguments(Bin, 0, 0,
				 id('GLOBAL', TrUserData), id(0, TrUserData),
				 id([], TrUserData), TrUserData).

dfp_read_field_def_Arguments(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, TrUserData) ->
    d_field_Arguments_resource(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_Arguments(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Arguments_family(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_Arguments(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Arguments_name(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
dfp_read_field_def_Arguments(<<>>, 0, 0, F1, F2, F3,
			     _) ->
    #{resource => F1, family => F2, name => F3};
dfp_read_field_def_Arguments(Other, Z1, Z2, F1, F2, F3,
			     TrUserData) ->
    dg_read_field_def_Arguments(Other, Z1, Z2, F1, F2, F3,
				TrUserData).

dg_read_field_def_Arguments(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Arguments(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
dg_read_field_def_Arguments(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Arguments_resource(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      16 ->
	  d_field_Arguments_family(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      26 ->
	  d_field_Arguments_name(Rest, 0, 0, F1, F2, F3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Arguments(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    1 ->
		skip_64_Arguments(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_Arguments(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    3 ->
		skip_group_Arguments(Rest, Key bsr 3, 0, F1, F2, F3,
				     TrUserData);
	    5 ->
		skip_32_Arguments(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_Arguments(<<>>, 0, 0, F1, F2, F3,
			    _) ->
    #{resource => F1, family => F2, name => F3}.

d_field_Arguments_resource(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Arguments_resource(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_Arguments_resource(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_Arguments(Rest, 0, 0, NewFValue, F2,
				 F3, TrUserData).


d_field_Arguments_family(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Arguments_family(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_Arguments_family(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Arguments(Rest, 0, 0, F1, NewFValue,
				 F3, TrUserData).


d_field_Arguments_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Arguments_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, TrUserData);
d_field_Arguments_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Arguments(Rest2, 0, 0, F1, F2,
				 NewFValue, TrUserData).


skip_varint_Arguments(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    skip_varint_Arguments(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
skip_varint_Arguments(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    dfp_read_field_def_Arguments(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_length_delimited_Arguments(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Arguments(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_Arguments(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Arguments(Rest2, 0, 0, F1, F2, F3,
				 TrUserData).


skip_group_Arguments(Bin, FNum, Z2, F1, F2, F3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Arguments(Rest, 0, Z2, F1, F2, F3,
				 TrUserData).


skip_32_Arguments(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_Arguments(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_64_Arguments(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_Arguments(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


d_msg_GetRoaRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRoaRequest(Bin, 0, 0,
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_GetRoaRequest(<<8, Rest/binary>>, Z1,
				 Z2, F1, TrUserData) ->
    d_field_GetRoaRequest_family(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_GetRoaRequest(<<>>, 0, 0, F1, _) ->
    #{family => F1};
dfp_read_field_def_GetRoaRequest(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_GetRoaRequest(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_GetRoaRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRoaRequest(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetRoaRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetRoaRequest_family(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRoaRequest(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetRoaRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetRoaRequest(Rest, 0, 0, F1,
						    TrUserData);
	    3 ->
		skip_group_GetRoaRequest(Rest, Key bsr 3, 0, F1,
					 TrUserData);
	    5 -> skip_32_GetRoaRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetRoaRequest(<<>>, 0, 0, F1, _) ->
    #{family => F1}.

d_field_GetRoaRequest_family(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetRoaRequest_family(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_GetRoaRequest_family(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_GetRoaRequest(Rest, 0, 0, NewFValue,
				     TrUserData).


skip_varint_GetRoaRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_GetRoaRequest(Rest, Z1, Z2, F1, TrUserData);
skip_varint_GetRoaRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_GetRoaRequest(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_GetRoaRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRoaRequest(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetRoaRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRoaRequest(Rest2, 0, 0, F1,
				     TrUserData).


skip_group_GetRoaRequest(Bin, FNum, Z2, F1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRoaRequest(Rest, 0, Z2, F1,
				     TrUserData).


skip_32_GetRoaRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_GetRoaRequest(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_GetRoaRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_GetRoaRequest(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_DeleteDefinedSetRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetRequest(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(false, TrUserData),
					       TrUserData).

dfp_read_field_def_DeleteDefinedSetRequest(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteDefinedSetRequest_set(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_DeleteDefinedSetRequest(<<16,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteDefinedSetRequest_all(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_DeleteDefinedSetRequest(<<>>, 0, 0,
					   F1, F2, _) ->
    #{set => F1, all => F2};
dfp_read_field_def_DeleteDefinedSetRequest(Other, Z1,
					   Z2, F1, F2, TrUserData) ->
    dg_read_field_def_DeleteDefinedSetRequest(Other, Z1, Z2,
					      F1, F2, TrUserData).

dg_read_field_def_DeleteDefinedSetRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteDefinedSetRequest(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
dg_read_field_def_DeleteDefinedSetRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteDefinedSetRequest_set(Rest, 0, 0, F1, F2,
					      TrUserData);
      16 ->
	  d_field_DeleteDefinedSetRequest_all(Rest, 0, 0, F1, F2,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteDefinedSetRequest(Rest, 0, 0, F1, F2,
						    TrUserData);
	    1 ->
		skip_64_DeleteDefinedSetRequest(Rest, 0, 0, F1, F2,
						TrUserData);
	    2 ->
		skip_length_delimited_DeleteDefinedSetRequest(Rest, 0,
							      0, F1, F2,
							      TrUserData);
	    3 ->
		skip_group_DeleteDefinedSetRequest(Rest, Key bsr 3, 0,
						   F1, F2, TrUserData);
	    5 ->
		skip_32_DeleteDefinedSetRequest(Rest, 0, 0, F1, F2,
						TrUserData)
	  end
    end;
dg_read_field_def_DeleteDefinedSetRequest(<<>>, 0, 0,
					  F1, F2, _) ->
    #{set => F1, all => F2}.

d_field_DeleteDefinedSetRequest_set(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteDefinedSetRequest_set(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteDefinedSetRequest_set(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_DefinedSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeleteDefinedSetRequest(Rest2, 0, 0,
					       if F1 == undefined -> NewFValue;
						  true ->
						      merge_msg_DefinedSet(F1,
									   NewFValue,
									   TrUserData)
					       end,
					       F2, TrUserData).


d_field_DeleteDefinedSetRequest_all(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteDefinedSetRequest_all(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteDefinedSetRequest_all(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_DeleteDefinedSetRequest(Rest, 0, 0,
					       F1, NewFValue, TrUserData).


skip_varint_DeleteDefinedSetRequest(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DeleteDefinedSetRequest(Rest, Z1, Z2, F1,
					F2, TrUserData);
skip_varint_DeleteDefinedSetRequest(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetRequest(Rest, Z1, Z2,
					       F1, F2, TrUserData).


skip_length_delimited_DeleteDefinedSetRequest(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteDefinedSetRequest(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
skip_length_delimited_DeleteDefinedSetRequest(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteDefinedSetRequest(Rest2, 0, 0,
					       F1, F2, TrUserData).


skip_group_DeleteDefinedSetRequest(Bin, FNum, Z2, F1,
				   F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteDefinedSetRequest(Rest, 0, Z2,
					       F1, F2, TrUserData).


skip_32_DeleteDefinedSetRequest(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetRequest(Rest, Z1, Z2,
					       F1, F2, TrUserData).


skip_64_DeleteDefinedSetRequest(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteDefinedSetRequest(Rest, Z1, Z2,
					       F1, F2, TrUserData).


d_msg_DeleteRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRpkiResponse(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_DeleteRpkiResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DeleteRpkiResponse(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_DeleteRpkiResponse(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_DeleteRpkiResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRpkiResponse(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteRpkiResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteRpkiResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_DeleteRpkiResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeleteRpkiResponse(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_DeleteRpkiResponse(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_DeleteRpkiResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteRpkiResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DeleteRpkiResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_DeleteRpkiResponse(Rest, Z1, Z2,
				   TrUserData);
skip_varint_DeleteRpkiResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteRpkiResponse(Rest, Z1, Z2,
					  TrUserData).


skip_length_delimited_DeleteRpkiResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRpkiResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_DeleteRpkiResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRpkiResponse(Rest2, 0, 0,
					  TrUserData).


skip_group_DeleteRpkiResponse(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteRpkiResponse(Rest, 0, Z2,
					  TrUserData).


skip_32_DeleteRpkiResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_DeleteRpkiResponse(Rest, Z1, Z2,
					  TrUserData).


skip_64_DeleteRpkiResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_DeleteRpkiResponse(Rest, Z1, Z2,
					  TrUserData).


d_msg_EnableZebraResponse(Bin, TrUserData) ->
    dfp_read_field_def_EnableZebraResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_EnableZebraResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_EnableZebraResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_EnableZebraResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_EnableZebraResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableZebraResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_EnableZebraResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_EnableZebraResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_EnableZebraResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_EnableZebraResponse(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_EnableZebraResponse(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_EnableZebraResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_EnableZebraResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_EnableZebraResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_EnableZebraResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_EnableZebraResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_EnableZebraResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_EnableZebraResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableZebraResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_EnableZebraResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableZebraResponse(Rest2, 0, 0,
					   TrUserData).


skip_group_EnableZebraResponse(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableZebraResponse(Rest, 0, Z2,
					   TrUserData).


skip_32_EnableZebraResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_EnableZebraResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_EnableZebraResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_EnableZebraResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_StartServerResponse(Bin, TrUserData) ->
    dfp_read_field_def_StartServerResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_StartServerResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_StartServerResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_StartServerResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_StartServerResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StartServerResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_StartServerResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_StartServerResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_StartServerResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_StartServerResponse(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_StartServerResponse(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_StartServerResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_StartServerResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_StartServerResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_StartServerResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_StartServerResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_StartServerResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_StartServerResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_StartServerResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_StartServerResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartServerResponse(Rest2, 0, 0,
					   TrUserData).


skip_group_StartServerResponse(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartServerResponse(Rest, 0, Z2,
					   TrUserData).


skip_32_StartServerResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_StartServerResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_StartServerResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_StartServerResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_ReplaceDefinedSetResponse(Bin, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetResponse(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_ReplaceDefinedSetResponse(<<>>, 0, 0,
					     _) ->
    #{};
dfp_read_field_def_ReplaceDefinedSetResponse(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_ReplaceDefinedSetResponse(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_ReplaceDefinedSetResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplaceDefinedSetResponse(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_ReplaceDefinedSetResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ReplaceDefinedSetResponse(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_ReplaceDefinedSetResponse(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_ReplaceDefinedSetResponse(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_ReplaceDefinedSetResponse(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_ReplaceDefinedSetResponse(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_ReplaceDefinedSetResponse(<<>>, 0, 0,
					    _) ->
    #{}.

skip_varint_ReplaceDefinedSetResponse(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_ReplaceDefinedSetResponse(Rest, Z1, Z2,
					  TrUserData);
skip_varint_ReplaceDefinedSetResponse(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetResponse(Rest, Z1,
						 Z2, TrUserData).


skip_length_delimited_ReplaceDefinedSetResponse(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplaceDefinedSetResponse(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_ReplaceDefinedSetResponse(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplaceDefinedSetResponse(Rest2, 0,
						 0, TrUserData).


skip_group_ReplaceDefinedSetResponse(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplaceDefinedSetResponse(Rest, 0,
						 Z2, TrUserData).


skip_32_ReplaceDefinedSetResponse(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetResponse(Rest, Z1,
						 Z2, TrUserData).


skip_64_ReplaceDefinedSetResponse(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplaceDefinedSetResponse(Rest, Z1,
						 Z2, TrUserData).


d_msg_GetDefinedSetResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetDefinedSetResponse(Bin, 0, 0,
					     id([], TrUserData), TrUserData).

dfp_read_field_def_GetDefinedSetResponse(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, TrUserData) ->
    d_field_GetDefinedSetResponse_sets(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_GetDefinedSetResponse(<<>>, 0, 0, F1,
					 TrUserData) ->
    #{sets => lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetDefinedSetResponse(Other, Z1, Z2,
					 F1, TrUserData) ->
    dg_read_field_def_GetDefinedSetResponse(Other, Z1, Z2,
					    F1, TrUserData).

dg_read_field_def_GetDefinedSetResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetDefinedSetResponse(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetDefinedSetResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetDefinedSetResponse_sets(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetDefinedSetResponse(Rest, 0, 0, F1,
						  TrUserData);
	    1 ->
		skip_64_GetDefinedSetResponse(Rest, 0, 0, F1,
					      TrUserData);
	    2 ->
		skip_length_delimited_GetDefinedSetResponse(Rest, 0, 0,
							    F1, TrUserData);
	    3 ->
		skip_group_GetDefinedSetResponse(Rest, Key bsr 3, 0, F1,
						 TrUserData);
	    5 ->
		skip_32_GetDefinedSetResponse(Rest, 0, 0, F1,
					      TrUserData)
	  end
    end;
dg_read_field_def_GetDefinedSetResponse(<<>>, 0, 0, F1,
					TrUserData) ->
    #{sets => lists_reverse(F1, TrUserData)}.

d_field_GetDefinedSetResponse_sets(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetDefinedSetResponse_sets(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_GetDefinedSetResponse_sets(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_DefinedSet(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetDefinedSetResponse(Rest2, 0, 0,
					     cons(NewFValue, F1, TrUserData),
					     TrUserData).


skip_varint_GetDefinedSetResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    skip_varint_GetDefinedSetResponse(Rest, Z1, Z2, F1,
				      TrUserData);
skip_varint_GetDefinedSetResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetDefinedSetResponse(Rest, Z1, Z2,
					     F1, TrUserData).


skip_length_delimited_GetDefinedSetResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetDefinedSetResponse(Rest, N + 7,
						X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetDefinedSetResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetDefinedSetResponse(Rest2, 0, 0,
					     F1, TrUserData).


skip_group_GetDefinedSetResponse(Bin, FNum, Z2, F1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetDefinedSetResponse(Rest, 0, Z2,
					     F1, TrUserData).


skip_32_GetDefinedSetResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_GetDefinedSetResponse(Rest, Z1, Z2,
					     F1, TrUserData).


skip_64_GetDefinedSetResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_GetDefinedSetResponse(Rest, Z1, Z2,
					     F1, TrUserData).


d_msg_ShutdownNeighborRequest(Bin, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborRequest(Bin, 0, 0,
					       id([], TrUserData),
					       id([], TrUserData), TrUserData).

dfp_read_field_def_ShutdownNeighborRequest(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    d_field_ShutdownNeighborRequest_address(Rest, Z1, Z2,
					    F1, F2, TrUserData);
dfp_read_field_def_ShutdownNeighborRequest(<<18,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    d_field_ShutdownNeighborRequest_communication(Rest, Z1,
						  Z2, F1, F2, TrUserData);
dfp_read_field_def_ShutdownNeighborRequest(<<>>, 0, 0,
					   F1, F2, _) ->
    #{address => F1, communication => F2};
dfp_read_field_def_ShutdownNeighborRequest(Other, Z1,
					   Z2, F1, F2, TrUserData) ->
    dg_read_field_def_ShutdownNeighborRequest(Other, Z1, Z2,
					      F1, F2, TrUserData).

dg_read_field_def_ShutdownNeighborRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShutdownNeighborRequest(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
dg_read_field_def_ShutdownNeighborRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ShutdownNeighborRequest_address(Rest, 0, 0, F1,
						  F2, TrUserData);
      18 ->
	  d_field_ShutdownNeighborRequest_communication(Rest, 0,
							0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ShutdownNeighborRequest(Rest, 0, 0, F1, F2,
						    TrUserData);
	    1 ->
		skip_64_ShutdownNeighborRequest(Rest, 0, 0, F1, F2,
						TrUserData);
	    2 ->
		skip_length_delimited_ShutdownNeighborRequest(Rest, 0,
							      0, F1, F2,
							      TrUserData);
	    3 ->
		skip_group_ShutdownNeighborRequest(Rest, Key bsr 3, 0,
						   F1, F2, TrUserData);
	    5 ->
		skip_32_ShutdownNeighborRequest(Rest, 0, 0, F1, F2,
						TrUserData)
	  end
    end;
dg_read_field_def_ShutdownNeighborRequest(<<>>, 0, 0,
					  F1, F2, _) ->
    #{address => F1, communication => F2}.

d_field_ShutdownNeighborRequest_address(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ShutdownNeighborRequest_address(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
d_field_ShutdownNeighborRequest_address(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ShutdownNeighborRequest(Rest2, 0, 0,
					       NewFValue, F2, TrUserData).


d_field_ShutdownNeighborRequest_communication(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ShutdownNeighborRequest_communication(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
d_field_ShutdownNeighborRequest_communication(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ShutdownNeighborRequest(Rest2, 0, 0,
					       F1, NewFValue, TrUserData).


skip_varint_ShutdownNeighborRequest(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ShutdownNeighborRequest(Rest, Z1, Z2, F1,
					F2, TrUserData);
skip_varint_ShutdownNeighborRequest(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborRequest(Rest, Z1, Z2,
					       F1, F2, TrUserData).


skip_length_delimited_ShutdownNeighborRequest(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShutdownNeighborRequest(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
skip_length_delimited_ShutdownNeighborRequest(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShutdownNeighborRequest(Rest2, 0, 0,
					       F1, F2, TrUserData).


skip_group_ShutdownNeighborRequest(Bin, FNum, Z2, F1,
				   F2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShutdownNeighborRequest(Rest, 0, Z2,
					       F1, F2, TrUserData).


skip_32_ShutdownNeighborRequest(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborRequest(Rest, Z1, Z2,
					       F1, F2, TrUserData).


skip_64_ShutdownNeighborRequest(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ShutdownNeighborRequest(Rest, Z1, Z2,
					       F1, F2, TrUserData).


d_msg_ValidateRibResponse(Bin, TrUserData) ->
    dfp_read_field_def_ValidateRibResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_ValidateRibResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_ValidateRibResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_ValidateRibResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_ValidateRibResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ValidateRibResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_ValidateRibResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ValidateRibResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_ValidateRibResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ValidateRibResponse(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_ValidateRibResponse(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_ValidateRibResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ValidateRibResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_ValidateRibResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_ValidateRibResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_ValidateRibResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_ValidateRibResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_ValidateRibResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ValidateRibResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_ValidateRibResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ValidateRibResponse(Rest2, 0, 0,
					   TrUserData).


skip_group_ValidateRibResponse(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ValidateRibResponse(Rest, 0, Z2,
					   TrUserData).


skip_32_ValidateRibResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_ValidateRibResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_ValidateRibResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_ValidateRibResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_DeletePolicyAssignmentResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentResponse(Bin,
						      0, 0, TrUserData).

dfp_read_field_def_DeletePolicyAssignmentResponse(<<>>,
						  0, 0, _) ->
    #{};
dfp_read_field_def_DeletePolicyAssignmentResponse(Other,
						  Z1, Z2, TrUserData) ->
    dg_read_field_def_DeletePolicyAssignmentResponse(Other,
						     Z1, Z2, TrUserData).

dg_read_field_def_DeletePolicyAssignmentResponse(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeletePolicyAssignmentResponse(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
dg_read_field_def_DeletePolicyAssignmentResponse(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeletePolicyAssignmentResponse(Rest, 0, 0,
						     TrUserData);
      1 ->
	  skip_64_DeletePolicyAssignmentResponse(Rest, 0, 0,
						 TrUserData);
      2 ->
	  skip_length_delimited_DeletePolicyAssignmentResponse(Rest,
							       0, 0,
							       TrUserData);
      3 ->
	  skip_group_DeletePolicyAssignmentResponse(Rest,
						    Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_DeletePolicyAssignmentResponse(Rest, 0, 0,
						 TrUserData)
    end;
dg_read_field_def_DeletePolicyAssignmentResponse(<<>>,
						 0, 0, _) ->
    #{}.

skip_varint_DeletePolicyAssignmentResponse(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    skip_varint_DeletePolicyAssignmentResponse(Rest, Z1, Z2,
					       TrUserData);
skip_varint_DeletePolicyAssignmentResponse(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentResponse(Rest,
						      Z1, Z2, TrUserData).


skip_length_delimited_DeletePolicyAssignmentResponse(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeletePolicyAssignmentResponse(Rest,
							 N + 7, X bsl N + Acc,
							 TrUserData);
skip_length_delimited_DeletePolicyAssignmentResponse(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeletePolicyAssignmentResponse(Rest2,
						      0, 0, TrUserData).


skip_group_DeletePolicyAssignmentResponse(Bin, FNum, Z2,
					  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeletePolicyAssignmentResponse(Rest,
						      0, Z2, TrUserData).


skip_32_DeletePolicyAssignmentResponse(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentResponse(Rest,
						      Z1, Z2, TrUserData).


skip_64_DeletePolicyAssignmentResponse(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeletePolicyAssignmentResponse(Rest,
						      Z1, Z2, TrUserData).


d_msg_InjectMrtResponse(Bin, TrUserData) ->
    dfp_read_field_def_InjectMrtResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_InjectMrtResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_InjectMrtResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_InjectMrtResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_InjectMrtResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InjectMrtResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_InjectMrtResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_InjectMrtResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_InjectMrtResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_InjectMrtResponse(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_InjectMrtResponse(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_InjectMrtResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_InjectMrtResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_InjectMrtResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_InjectMrtResponse(Rest, Z1, Z2, TrUserData);
skip_varint_InjectMrtResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_InjectMrtResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_InjectMrtResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_InjectMrtResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_InjectMrtResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InjectMrtResponse(Rest2, 0, 0,
					 TrUserData).


skip_group_InjectMrtResponse(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InjectMrtResponse(Rest, 0, Z2,
					 TrUserData).


skip_32_InjectMrtResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_InjectMrtResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_InjectMrtResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_InjectMrtResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_DisableRpkiResponse(Bin, TrUserData) ->
    dfp_read_field_def_DisableRpkiResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_DisableRpkiResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DisableRpkiResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_DisableRpkiResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_DisableRpkiResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisableRpkiResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_DisableRpkiResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DisableRpkiResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_DisableRpkiResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DisableRpkiResponse(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_DisableRpkiResponse(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_DisableRpkiResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DisableRpkiResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DisableRpkiResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_DisableRpkiResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_DisableRpkiResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_DisableRpkiResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_DisableRpkiResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisableRpkiResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_DisableRpkiResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisableRpkiResponse(Rest2, 0, 0,
					   TrUserData).


skip_group_DisableRpkiResponse(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisableRpkiResponse(Rest, 0, Z2,
					   TrUserData).


skip_32_DisableRpkiResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_DisableRpkiResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_DisableRpkiResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_DisableRpkiResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_EnableZebraRequest(Bin, TrUserData) ->
    dfp_read_field_def_EnableZebraRequest(Bin, 0, 0,
					  id([], TrUserData),
					  id([], TrUserData), id(0, TrUserData),
					  id(false, TrUserData),
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_EnableZebraRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_EnableZebraRequest_url(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_EnableZebraRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_EnableZebraRequest_route_types(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
dfp_read_field_def_EnableZebraRequest(<<24,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_EnableZebraRequest_version(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData);
dfp_read_field_def_EnableZebraRequest(<<32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_EnableZebraRequest_nexthop_trigger_enable(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, TrUserData);
dfp_read_field_def_EnableZebraRequest(<<40,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_EnableZebraRequest_nexthop_trigger_delay(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     TrUserData);
dfp_read_field_def_EnableZebraRequest(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, TrUserData) ->
    #{url => F1,
      route_types => lists_reverse(F2, TrUserData),
      version => F3, nexthop_trigger_enable => F4,
      nexthop_trigger_delay => F5};
dfp_read_field_def_EnableZebraRequest(Other, Z1, Z2, F1,
				      F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_EnableZebraRequest(Other, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData).

dg_read_field_def_EnableZebraRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableZebraRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
dg_read_field_def_EnableZebraRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnableZebraRequest_url(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      18 ->
	  d_field_EnableZebraRequest_route_types(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      24 ->
	  d_field_EnableZebraRequest_version(Rest, 0, 0, F1, F2,
					     F3, F4, F5, TrUserData);
      32 ->
	  d_field_EnableZebraRequest_nexthop_trigger_enable(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, TrUserData);
      40 ->
	  d_field_EnableZebraRequest_nexthop_trigger_delay(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnableZebraRequest(Rest, 0, 0, F1, F2, F3,
					       F4, F5, TrUserData);
	    1 ->
		skip_64_EnableZebraRequest(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData);
	    2 ->
		skip_length_delimited_EnableZebraRequest(Rest, 0, 0, F1,
							 F2, F3, F4, F5,
							 TrUserData);
	    3 ->
		skip_group_EnableZebraRequest(Rest, Key bsr 3, 0, F1,
					      F2, F3, F4, F5, TrUserData);
	    5 ->
		skip_32_EnableZebraRequest(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData)
	  end
    end;
dg_read_field_def_EnableZebraRequest(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, TrUserData) ->
    #{url => F1,
      route_types => lists_reverse(F2, TrUserData),
      version => F3, nexthop_trigger_enable => F4,
      nexthop_trigger_delay => F5}.

d_field_EnableZebraRequest_url(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_EnableZebraRequest_url(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_EnableZebraRequest_url(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnableZebraRequest(Rest2, 0, 0,
					  NewFValue, F2, F3, F4, F5,
					  TrUserData).


d_field_EnableZebraRequest_route_types(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_EnableZebraRequest_route_types(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
d_field_EnableZebraRequest_route_types(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5,
				       TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnableZebraRequest(Rest2, 0, 0, F1,
					  cons(NewFValue, F2, TrUserData), F3,
					  F4, F5, TrUserData).


d_field_EnableZebraRequest_version(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_EnableZebraRequest_version(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
d_field_EnableZebraRequest_version(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_EnableZebraRequest(Rest, 0, 0, F1,
					  F2, NewFValue, F4, F5, TrUserData).


d_field_EnableZebraRequest_nexthop_trigger_enable(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  TrUserData)
    when N < 57 ->
    d_field_EnableZebraRequest_nexthop_trigger_enable(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5,
						      TrUserData);
d_field_EnableZebraRequest_nexthop_trigger_enable(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, _, F5,
						  TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EnableZebraRequest(Rest, 0, 0, F1,
					  F2, F3, NewFValue, F5, TrUserData).


d_field_EnableZebraRequest_nexthop_trigger_delay(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5,
						 TrUserData)
    when N < 57 ->
    d_field_EnableZebraRequest_nexthop_trigger_delay(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5,
						     TrUserData);
d_field_EnableZebraRequest_nexthop_trigger_delay(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, _,
						 TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_EnableZebraRequest(Rest, 0, 0, F1,
					  F2, F3, F4, NewFValue, TrUserData).


skip_varint_EnableZebraRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_EnableZebraRequest(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
skip_varint_EnableZebraRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_EnableZebraRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


skip_length_delimited_EnableZebraRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableZebraRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     TrUserData);
skip_length_delimited_EnableZebraRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableZebraRequest(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, TrUserData).


skip_group_EnableZebraRequest(Bin, FNum, Z2, F1, F2, F3,
			      F4, F5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableZebraRequest(Rest, 0, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


skip_32_EnableZebraRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_EnableZebraRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


skip_64_EnableZebraRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_EnableZebraRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


d_msg_AddVrfRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddVrfRequest(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AddVrfRequest(<<10, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    d_field_AddVrfRequest_vrf(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_AddVrfRequest(<<>>, 0, 0, F1, _) ->
    #{vrf => F1};
dfp_read_field_def_AddVrfRequest(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_AddVrfRequest(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_AddVrfRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddVrfRequest(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_AddVrfRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddVrfRequest_vrf(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddVrfRequest(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_AddVrfRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_AddVrfRequest(Rest, 0, 0, F1,
						    TrUserData);
	    3 ->
		skip_group_AddVrfRequest(Rest, Key bsr 3, 0, F1,
					 TrUserData);
	    5 -> skip_32_AddVrfRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_AddVrfRequest(<<>>, 0, 0, F1, _) ->
    #{vrf => F1}.

d_field_AddVrfRequest_vrf(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_AddVrfRequest_vrf(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_AddVrfRequest_vrf(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Vrf(Bs, TrUserData), TrUserData),
    dfp_read_field_def_AddVrfRequest(Rest2, 0, 0,
				     if F1 == undefined -> NewFValue;
					true ->
					    merge_msg_Vrf(F1, NewFValue,
							  TrUserData)
				     end,
				     TrUserData).


skip_varint_AddVrfRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_AddVrfRequest(Rest, Z1, Z2, F1, TrUserData);
skip_varint_AddVrfRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_AddVrfRequest(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_AddVrfRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddVrfRequest(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_AddVrfRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddVrfRequest(Rest2, 0, 0, F1,
				     TrUserData).


skip_group_AddVrfRequest(Bin, FNum, Z2, F1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddVrfRequest(Rest, 0, Z2, F1,
				     TrUserData).


skip_32_AddVrfRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_AddVrfRequest(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_AddVrfRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_AddVrfRequest(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_DeletePathRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeletePathRequest(Bin, 0, 0,
					 id('GLOBAL', TrUserData),
					 id([], TrUserData), id(0, TrUserData),
					 id(undefined, TrUserData),
					 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_DeletePathRequest(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_DeletePathRequest_resource(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData);
dfp_read_field_def_DeletePathRequest(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_DeletePathRequest_vrf_id(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_DeletePathRequest(<<24,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_DeletePathRequest_family(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_DeletePathRequest(<<34,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_DeletePathRequest_path(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_DeletePathRequest(<<42,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_DeletePathRequest_uuid(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_DeletePathRequest(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, _) ->
    #{resource => F1, vrf_id => F2, family => F3,
      path => F4, uuid => F5};
dfp_read_field_def_DeletePathRequest(Other, Z1, Z2, F1,
				     F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_DeletePathRequest(Other, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).

dg_read_field_def_DeletePathRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeletePathRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
dg_read_field_def_DeletePathRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DeletePathRequest_resource(Rest, 0, 0, F1, F2,
					     F3, F4, F5, TrUserData);
      18 ->
	  d_field_DeletePathRequest_vrf_id(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      24 ->
	  d_field_DeletePathRequest_family(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      34 ->
	  d_field_DeletePathRequest_path(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      42 ->
	  d_field_DeletePathRequest_uuid(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeletePathRequest(Rest, 0, 0, F1, F2, F3,
					      F4, F5, TrUserData);
	    1 ->
		skip_64_DeletePathRequest(Rest, 0, 0, F1, F2, F3, F4,
					  F5, TrUserData);
	    2 ->
		skip_length_delimited_DeletePathRequest(Rest, 0, 0, F1,
							F2, F3, F4, F5,
							TrUserData);
	    3 ->
		skip_group_DeletePathRequest(Rest, Key bsr 3, 0, F1, F2,
					     F3, F4, F5, TrUserData);
	    5 ->
		skip_32_DeletePathRequest(Rest, 0, 0, F1, F2, F3, F4,
					  F5, TrUserData)
	  end
    end;
dg_read_field_def_DeletePathRequest(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, _) ->
    #{resource => F1, vrf_id => F2, family => F3,
      path => F4, uuid => F5}.

d_field_DeletePathRequest_resource(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_DeletePathRequest_resource(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
d_field_DeletePathRequest_resource(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_DeletePathRequest(Rest, 0, 0,
					 NewFValue, F2, F3, F4, F5, TrUserData).


d_field_DeletePathRequest_vrf_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_DeletePathRequest_vrf_id(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_DeletePathRequest_vrf_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DeletePathRequest(Rest2, 0, 0, F1,
					 NewFValue, F3, F4, F5, TrUserData).


d_field_DeletePathRequest_family(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_DeletePathRequest_family(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_DeletePathRequest_family(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_DeletePathRequest(Rest, 0, 0, F1, F2,
					 NewFValue, F4, F5, TrUserData).


d_field_DeletePathRequest_path(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_DeletePathRequest_path(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_DeletePathRequest_path(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Path(Bs, TrUserData), TrUserData),
    dfp_read_field_def_DeletePathRequest(Rest2, 0, 0, F1,
					 F2, F3,
					 if F4 == undefined -> NewFValue;
					    true ->
						merge_msg_Path(F4, NewFValue,
							       TrUserData)
					 end,
					 F5, TrUserData).


d_field_DeletePathRequest_uuid(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_DeletePathRequest_uuid(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_DeletePathRequest_uuid(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_DeletePathRequest(Rest2, 0, 0, F1,
					 F2, F3, F4, NewFValue, TrUserData).


skip_varint_DeletePathRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_DeletePathRequest(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
skip_varint_DeletePathRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_DeletePathRequest(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData).


skip_length_delimited_DeletePathRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeletePathRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    TrUserData);
skip_length_delimited_DeletePathRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeletePathRequest(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, TrUserData).


skip_group_DeletePathRequest(Bin, FNum, Z2, F1, F2, F3,
			     F4, F5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeletePathRequest(Rest, 0, Z2, F1,
					 F2, F3, F4, F5, TrUserData).


skip_32_DeletePathRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_DeletePathRequest(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData).


skip_64_DeletePathRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_DeletePathRequest(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData).


d_msg_EnableNeighborResponse(Bin, TrUserData) ->
    dfp_read_field_def_EnableNeighborResponse(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_EnableNeighborResponse(<<>>, 0, 0,
					  _) ->
    #{};
dfp_read_field_def_EnableNeighborResponse(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_EnableNeighborResponse(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_EnableNeighborResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableNeighborResponse(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_EnableNeighborResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_EnableNeighborResponse(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_EnableNeighborResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_EnableNeighborResponse(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_EnableNeighborResponse(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_EnableNeighborResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_EnableNeighborResponse(<<>>, 0, 0,
					 _) ->
    #{}.

skip_varint_EnableNeighborResponse(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_EnableNeighborResponse(Rest, Z1, Z2,
				       TrUserData);
skip_varint_EnableNeighborResponse(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_EnableNeighborResponse(Rest, Z1, Z2,
					      TrUserData).


skip_length_delimited_EnableNeighborResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableNeighborResponse(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_EnableNeighborResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableNeighborResponse(Rest2, 0, 0,
					      TrUserData).


skip_group_EnableNeighborResponse(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableNeighborResponse(Rest, 0, Z2,
					      TrUserData).


skip_32_EnableNeighborResponse(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_EnableNeighborResponse(Rest, Z1, Z2,
					      TrUserData).


skip_64_EnableNeighborResponse(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_EnableNeighborResponse(Rest, Z1, Z2,
					      TrUserData).


d_msg_EnableRpkiRequest(Bin, TrUserData) ->
    dfp_read_field_def_EnableRpkiRequest(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_EnableRpkiRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_EnableRpkiRequest_address(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_EnableRpkiRequest(<<>>, 0, 0, F1,
				     _) ->
    #{address => F1};
dfp_read_field_def_EnableRpkiRequest(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_EnableRpkiRequest(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_EnableRpkiRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnableRpkiRequest(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_EnableRpkiRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnableRpkiRequest_address(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnableRpkiRequest(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_EnableRpkiRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_EnableRpkiRequest(Rest, 0, 0, F1,
							TrUserData);
	    3 ->
		skip_group_EnableRpkiRequest(Rest, Key bsr 3, 0, F1,
					     TrUserData);
	    5 ->
		skip_32_EnableRpkiRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_EnableRpkiRequest(<<>>, 0, 0, F1,
				    _) ->
    #{address => F1}.

d_field_EnableRpkiRequest_address(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_EnableRpkiRequest_address(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_EnableRpkiRequest_address(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnableRpkiRequest(Rest2, 0, 0,
					 NewFValue, TrUserData).


skip_varint_EnableRpkiRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_EnableRpkiRequest(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_EnableRpkiRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_EnableRpkiRequest(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_EnableRpkiRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnableRpkiRequest(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_EnableRpkiRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnableRpkiRequest(Rest2, 0, 0, F1,
					 TrUserData).


skip_group_EnableRpkiRequest(Bin, FNum, Z2, F1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnableRpkiRequest(Rest, 0, Z2, F1,
					 TrUserData).


skip_32_EnableRpkiRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_EnableRpkiRequest(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_EnableRpkiRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_EnableRpkiRequest(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_GetPathRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetPathRequest(Bin, 0, 0,
				      id('GLOBAL', TrUserData),
				      id([], TrUserData), id(0, TrUserData),
				      id([], TrUserData), TrUserData).

dfp_read_field_def_GetPathRequest(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetPathRequest_type(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_GetPathRequest(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetPathRequest_name(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_GetPathRequest(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetPathRequest_family(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData);
dfp_read_field_def_GetPathRequest(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetPathRequest_prefixes(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData);
dfp_read_field_def_GetPathRequest(<<>>, 0, 0, F1, F2,
				  F3, F4, TrUserData) ->
    #{type => F1, name => F2, family => F3,
      prefixes => lists_reverse(F4, TrUserData)};
dfp_read_field_def_GetPathRequest(Other, Z1, Z2, F1, F2,
				  F3, F4, TrUserData) ->
    dg_read_field_def_GetPathRequest(Other, Z1, Z2, F1, F2,
				     F3, F4, TrUserData).

dg_read_field_def_GetPathRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetPathRequest(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_GetPathRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetPathRequest_type(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      18 ->
	  d_field_GetPathRequest_name(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      24 ->
	  d_field_GetPathRequest_family(Rest, 0, 0, F1, F2, F3,
					F4, TrUserData);
      34 ->
	  d_field_GetPathRequest_prefixes(Rest, 0, 0, F1, F2, F3,
					  F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetPathRequest(Rest, 0, 0, F1, F2, F3, F4,
					   TrUserData);
	    1 ->
		skip_64_GetPathRequest(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
	    2 ->
		skip_length_delimited_GetPathRequest(Rest, 0, 0, F1, F2,
						     F3, F4, TrUserData);
	    3 ->
		skip_group_GetPathRequest(Rest, Key bsr 3, 0, F1, F2,
					  F3, F4, TrUserData);
	    5 ->
		skip_32_GetPathRequest(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData)
	  end
    end;
dg_read_field_def_GetPathRequest(<<>>, 0, 0, F1, F2, F3,
				 F4, TrUserData) ->
    #{type => F1, name => F2, family => F3,
      prefixes => lists_reverse(F4, TrUserData)}.

d_field_GetPathRequest_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetPathRequest_type(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_GetPathRequest_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Resource(Tmp),
    dfp_read_field_def_GetPathRequest(Rest, 0, 0, NewFValue,
				      F2, F3, F4, TrUserData).


d_field_GetPathRequest_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetPathRequest_name(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_GetPathRequest_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetPathRequest(Rest2, 0, 0, F1,
				      NewFValue, F3, F4, TrUserData).


d_field_GetPathRequest_family(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetPathRequest_family(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_GetPathRequest_family(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_GetPathRequest(Rest, 0, 0, F1, F2,
				      NewFValue, F4, TrUserData).


d_field_GetPathRequest_prefixes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetPathRequest_prefixes(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_GetPathRequest_prefixes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableLookupPrefix(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetPathRequest(Rest2, 0, 0, F1, F2,
				      F3, cons(NewFValue, F4, TrUserData),
				      TrUserData).


skip_varint_GetPathRequest(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_GetPathRequest(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData);
skip_varint_GetPathRequest(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_GetPathRequest(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_length_delimited_GetPathRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetPathRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
skip_length_delimited_GetPathRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetPathRequest(Rest2, 0, 0, F1, F2,
				      F3, F4, TrUserData).


skip_group_GetPathRequest(Bin, FNum, Z2, F1, F2, F3, F4,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetPathRequest(Rest, 0, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_32_GetPathRequest(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_GetPathRequest(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_64_GetPathRequest(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_GetPathRequest(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


d_msg_ReplaceStatementResponse(Bin, TrUserData) ->
    dfp_read_field_def_ReplaceStatementResponse(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_ReplaceStatementResponse(<<>>, 0, 0,
					    _) ->
    #{};
dfp_read_field_def_ReplaceStatementResponse(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_ReplaceStatementResponse(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_ReplaceStatementResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReplaceStatementResponse(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_ReplaceStatementResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ReplaceStatementResponse(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_ReplaceStatementResponse(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_ReplaceStatementResponse(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_ReplaceStatementResponse(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_ReplaceStatementResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ReplaceStatementResponse(<<>>, 0, 0,
					   _) ->
    #{}.

skip_varint_ReplaceStatementResponse(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_ReplaceStatementResponse(Rest, Z1, Z2,
					 TrUserData);
skip_varint_ReplaceStatementResponse(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplaceStatementResponse(Rest, Z1,
						Z2, TrUserData).


skip_length_delimited_ReplaceStatementResponse(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReplaceStatementResponse(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_ReplaceStatementResponse(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReplaceStatementResponse(Rest2, 0, 0,
						TrUserData).


skip_group_ReplaceStatementResponse(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReplaceStatementResponse(Rest, 0, Z2,
						TrUserData).


skip_32_ReplaceStatementResponse(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplaceStatementResponse(Rest, Z1,
						Z2, TrUserData).


skip_64_ReplaceStatementResponse(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_ReplaceStatementResponse(Rest, Z1,
						Z2, TrUserData).


d_msg_DeleteBmpRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteBmpRequest(Bin, 0, 0,
					id([], TrUserData), id(0, TrUserData),
					TrUserData).

dfp_read_field_def_DeleteBmpRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteBmpRequest_address(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_DeleteBmpRequest(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteBmpRequest_port(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_DeleteBmpRequest(<<>>, 0, 0, F1, F2,
				    _) ->
    #{address => F1, port => F2};
dfp_read_field_def_DeleteBmpRequest(Other, Z1, Z2, F1,
				    F2, TrUserData) ->
    dg_read_field_def_DeleteBmpRequest(Other, Z1, Z2, F1,
				       F2, TrUserData).

dg_read_field_def_DeleteBmpRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteBmpRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_DeleteBmpRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteBmpRequest_address(Rest, 0, 0, F1, F2,
					   TrUserData);
      16 ->
	  d_field_DeleteBmpRequest_port(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteBmpRequest(Rest, 0, 0, F1, F2,
					     TrUserData);
	    1 ->
		skip_64_DeleteBmpRequest(Rest, 0, 0, F1, F2,
					 TrUserData);
	    2 ->
		skip_length_delimited_DeleteBmpRequest(Rest, 0, 0, F1,
						       F2, TrUserData);
	    3 ->
		skip_group_DeleteBmpRequest(Rest, Key bsr 3, 0, F1, F2,
					    TrUserData);
	    5 ->
		skip_32_DeleteBmpRequest(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_DeleteBmpRequest(<<>>, 0, 0, F1, F2,
				   _) ->
    #{address => F1, port => F2}.

d_field_DeleteBmpRequest_address(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteBmpRequest_address(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteBmpRequest_address(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DeleteBmpRequest(Rest2, 0, 0,
					NewFValue, F2, TrUserData).


d_field_DeleteBmpRequest_port(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteBmpRequest_port(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteBmpRequest_port(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_DeleteBmpRequest(Rest, 0, 0, F1,
					NewFValue, TrUserData).


skip_varint_DeleteBmpRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DeleteBmpRequest(Rest, Z1, Z2, F1, F2,
				 TrUserData);
skip_varint_DeleteBmpRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteBmpRequest(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_length_delimited_DeleteBmpRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteBmpRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_DeleteBmpRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteBmpRequest(Rest2, 0, 0, F1, F2,
					TrUserData).


skip_group_DeleteBmpRequest(Bin, FNum, Z2, F1, F2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteBmpRequest(Rest, 0, Z2, F1, F2,
					TrUserData).


skip_32_DeleteBmpRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteBmpRequest(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_64_DeleteBmpRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteBmpRequest(Rest, Z1, Z2, F1,
					F2, TrUserData).


d_msg_DeleteBmpResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteBmpResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_DeleteBmpResponse(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_DeleteBmpResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_DeleteBmpResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_DeleteBmpResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteBmpResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteBmpResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteBmpResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_DeleteBmpResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeleteBmpResponse(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_DeleteBmpResponse(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_DeleteBmpResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteBmpResponse(<<>>, 0, 0, _) ->
    #{}.

skip_varint_DeleteBmpResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_DeleteBmpResponse(Rest, Z1, Z2, TrUserData);
skip_varint_DeleteBmpResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteBmpResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_DeleteBmpResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteBmpResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_DeleteBmpResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteBmpResponse(Rest2, 0, 0,
					 TrUserData).


skip_group_DeleteBmpResponse(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteBmpResponse(Rest, 0, Z2,
					 TrUserData).


skip_32_DeleteBmpResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DeleteBmpResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_DeleteBmpResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_DeleteBmpResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_GetPolicyAssignmentRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentRequest(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_GetPolicyAssignmentRequest(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, TrUserData) ->
    d_field_GetPolicyAssignmentRequest_assignment(Rest, Z1,
						  Z2, F1, TrUserData);
dfp_read_field_def_GetPolicyAssignmentRequest(<<>>, 0,
					      0, F1, _) ->
    #{assignment => F1};
dfp_read_field_def_GetPolicyAssignmentRequest(Other, Z1,
					      Z2, F1, TrUserData) ->
    dg_read_field_def_GetPolicyAssignmentRequest(Other, Z1,
						 Z2, F1, TrUserData).

dg_read_field_def_GetPolicyAssignmentRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetPolicyAssignmentRequest(Rest,
						 N + 7, X bsl N + Acc, F1,
						 TrUserData);
dg_read_field_def_GetPolicyAssignmentRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetPolicyAssignmentRequest_assignment(Rest, 0,
							0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetPolicyAssignmentRequest(Rest, 0, 0, F1,
						       TrUserData);
	    1 ->
		skip_64_GetPolicyAssignmentRequest(Rest, 0, 0, F1,
						   TrUserData);
	    2 ->
		skip_length_delimited_GetPolicyAssignmentRequest(Rest,
								 0, 0, F1,
								 TrUserData);
	    3 ->
		skip_group_GetPolicyAssignmentRequest(Rest, Key bsr 3,
						      0, F1, TrUserData);
	    5 ->
		skip_32_GetPolicyAssignmentRequest(Rest, 0, 0, F1,
						   TrUserData)
	  end
    end;
dg_read_field_def_GetPolicyAssignmentRequest(<<>>, 0, 0,
					     F1, _) ->
    #{assignment => F1}.

d_field_GetPolicyAssignmentRequest_assignment(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetPolicyAssignmentRequest_assignment(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
d_field_GetPolicyAssignmentRequest_assignment(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PolicyAssignment(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetPolicyAssignmentRequest(Rest2, 0,
						  0,
						  if F1 == undefined ->
							 NewFValue;
						     true ->
							 merge_msg_PolicyAssignment(F1,
										    NewFValue,
										    TrUserData)
						  end,
						  TrUserData).


skip_varint_GetPolicyAssignmentRequest(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    skip_varint_GetPolicyAssignmentRequest(Rest, Z1, Z2, F1,
					   TrUserData);
skip_varint_GetPolicyAssignmentRequest(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentRequest(Rest, Z1,
						  Z2, F1, TrUserData).


skip_length_delimited_GetPolicyAssignmentRequest(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetPolicyAssignmentRequest(Rest,
						     N + 7, X bsl N + Acc, F1,
						     TrUserData);
skip_length_delimited_GetPolicyAssignmentRequest(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetPolicyAssignmentRequest(Rest2, 0,
						  0, F1, TrUserData).


skip_group_GetPolicyAssignmentRequest(Bin, FNum, Z2, F1,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetPolicyAssignmentRequest(Rest, 0,
						  Z2, F1, TrUserData).


skip_32_GetPolicyAssignmentRequest(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentRequest(Rest, Z1,
						  Z2, F1, TrUserData).


skip_64_GetPolicyAssignmentRequest(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetPolicyAssignmentRequest(Rest, Z1,
						  Z2, F1, TrUserData).


d_msg_DeleteStatementResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteStatementResponse(Bin, 0, 0,
					       TrUserData).

dfp_read_field_def_DeleteStatementResponse(<<>>, 0, 0,
					   _) ->
    #{};
dfp_read_field_def_DeleteStatementResponse(Other, Z1,
					   Z2, TrUserData) ->
    dg_read_field_def_DeleteStatementResponse(Other, Z1, Z2,
					      TrUserData).

dg_read_field_def_DeleteStatementResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteStatementResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteStatementResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteStatementResponse(Rest, 0, 0,
					      TrUserData);
      1 ->
	  skip_64_DeleteStatementResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeleteStatementResponse(Rest, 0,
							0, TrUserData);
      3 ->
	  skip_group_DeleteStatementResponse(Rest, Key bsr 3, 0,
					     TrUserData);
      5 ->
	  skip_32_DeleteStatementResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteStatementResponse(<<>>, 0, 0,
					  _) ->
    #{}.

skip_varint_DeleteStatementResponse(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    skip_varint_DeleteStatementResponse(Rest, Z1, Z2,
					TrUserData);
skip_varint_DeleteStatementResponse(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteStatementResponse(Rest, Z1, Z2,
					       TrUserData).


skip_length_delimited_DeleteStatementResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteStatementResponse(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
skip_length_delimited_DeleteStatementResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteStatementResponse(Rest2, 0, 0,
					       TrUserData).


skip_group_DeleteStatementResponse(Bin, FNum, Z2,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteStatementResponse(Rest, 0, Z2,
					       TrUserData).


skip_32_DeleteStatementResponse(<<_:32, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteStatementResponse(Rest, Z1, Z2,
					       TrUserData).


skip_64_DeleteStatementResponse(<<_:64, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteStatementResponse(Rest, Z1, Z2,
					       TrUserData).




'd_enum_SoftResetNeighborRequest.SoftResetDirection'(0) ->
    'IN';
'd_enum_SoftResetNeighborRequest.SoftResetDirection'(1) ->
    'OUT';
'd_enum_SoftResetNeighborRequest.SoftResetDirection'(2) ->
    'BOTH';
'd_enum_SoftResetNeighborRequest.SoftResetDirection'(V) ->
    V.

'd_enum_AddBmpRequest.MonitoringPolicy'(0) -> 'PRE';
'd_enum_AddBmpRequest.MonitoringPolicy'(1) -> 'POST';
'd_enum_AddBmpRequest.MonitoringPolicy'(2) -> 'BOTH';
'd_enum_AddBmpRequest.MonitoringPolicy'(3) -> 'LOCAL';
'd_enum_AddBmpRequest.MonitoringPolicy'(4) -> 'ALL';
'd_enum_AddBmpRequest.MonitoringPolicy'(V) -> V.

d_enum_Resource(0) -> 'GLOBAL';
d_enum_Resource(1) -> 'LOCAL';
d_enum_Resource(2) -> 'ADJ_IN';
d_enum_Resource(3) -> 'ADJ_OUT';
d_enum_Resource(4) -> 'VRF';
d_enum_Resource(V) -> V.

'd_enum_RPKIValidation.State'(0) -> 'STATE_NONE';
'd_enum_RPKIValidation.State'(1) -> 'STATE_NOT_FOUND';
'd_enum_RPKIValidation.State'(2) -> 'STATE_VALID';
'd_enum_RPKIValidation.State'(3) -> 'STATE_INVALID';
'd_enum_RPKIValidation.State'(V) -> V.

'd_enum_RPKIValidation.Reason'(0) -> 'REASOT_NONE';
'd_enum_RPKIValidation.Reason'(1) -> 'REASON_AS';
'd_enum_RPKIValidation.Reason'(2) -> 'REASON_LENGTH';
'd_enum_RPKIValidation.Reason'(V) -> V.

d_enum_TableLookupOption(0) -> 'LOOKUP_EXACT';
d_enum_TableLookupOption(1) -> 'LOOKUP_LONGER';
d_enum_TableLookupOption(2) -> 'LOOKUP_SHORTER';
d_enum_TableLookupOption(V) -> V.

'd_enum_PeerConf.RemovePrivateAs'(0) -> 'NONE';
'd_enum_PeerConf.RemovePrivateAs'(1) -> 'ALL';
'd_enum_PeerConf.RemovePrivateAs'(2) -> 'REPLACE';
'd_enum_PeerConf.RemovePrivateAs'(V) -> V.

'd_enum_PeerState.AdminState'(0) -> 'UP';
'd_enum_PeerState.AdminState'(1) -> 'DOWN';
'd_enum_PeerState.AdminState'(2) -> 'PFX_CT';
'd_enum_PeerState.AdminState'(V) -> V.

d_enum_DefinedType(0) -> 'PREFIX';
d_enum_DefinedType(1) -> 'NEIGHBOR';
d_enum_DefinedType(2) -> 'TAG';
d_enum_DefinedType(3) -> 'AS_PATH';
d_enum_DefinedType(4) -> 'COMMUNITY';
d_enum_DefinedType(5) -> 'EXT_COMMUNITY';
d_enum_DefinedType(6) -> 'LARGE_COMMUNITY';
d_enum_DefinedType(V) -> V.

d_enum_MatchType(0) -> 'ANY';
d_enum_MatchType(1) -> 'ALL';
d_enum_MatchType(2) -> 'INVERT';
d_enum_MatchType(V) -> V.

d_enum_AsPathLengthType(0) -> 'EQ';
d_enum_AsPathLengthType(1) -> 'GE';
d_enum_AsPathLengthType(2) -> 'LE';
d_enum_AsPathLengthType(V) -> V.

'd_enum_Conditions.RouteType'(0) -> 'ROUTE_TYPE_NONE';
'd_enum_Conditions.RouteType'(1) ->
    'ROUTE_TYPE_INTERNAL';
'd_enum_Conditions.RouteType'(2) ->
    'ROUTE_TYPE_EXTERNAL';
'd_enum_Conditions.RouteType'(3) -> 'ROUTE_TYPE_LOCAL';
'd_enum_Conditions.RouteType'(V) -> V.

d_enum_RouteAction(0) -> 'NONE';
d_enum_RouteAction(1) -> 'ACCEPT';
d_enum_RouteAction(2) -> 'REJECT';
d_enum_RouteAction(V) -> V.

d_enum_CommunityActionType(0) -> 'COMMUNITY_ADD';
d_enum_CommunityActionType(1) -> 'COMMUNITY_REMOVE';
d_enum_CommunityActionType(2) -> 'COMMUNITY_REPLACE';
d_enum_CommunityActionType(V) -> V.

d_enum_MedActionType(0) -> 'MED_MOD';
d_enum_MedActionType(1) -> 'MED_REPLACE';
d_enum_MedActionType(V) -> V.

d_enum_PolicyType(0) -> 'IN';
d_enum_PolicyType(1) -> 'IMPORT';
d_enum_PolicyType(2) -> 'EXPORT';
d_enum_PolicyType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).


merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MedAction' ->
	  merge_msg_MedAction(Prev, New, TrUserData);
      'DisableNeighborResponse' ->
	  merge_msg_DisableNeighborResponse(Prev, New,
					    TrUserData);
      'DeleteNeighborResponse' ->
	  merge_msg_DeleteNeighborResponse(Prev, New, TrUserData);
      'Global' -> merge_msg_Global(Prev, New, TrUserData);
      'StartServerRequest' ->
	  merge_msg_StartServerRequest(Prev, New, TrUserData);
      'DeleteRpkiRequest' ->
	  merge_msg_DeleteRpkiRequest(Prev, New, TrUserData);
      'GetPolicyRequest' ->
	  merge_msg_GetPolicyRequest(Prev, New, TrUserData);
      'RPKIConf' -> merge_msg_RPKIConf(Prev, New, TrUserData);
      'Roa' -> merge_msg_Roa(Prev, New, TrUserData);
      'GetRoaResponse' ->
	  merge_msg_GetRoaResponse(Prev, New, TrUserData);
      'GetDefinedSetRequest' ->
	  merge_msg_GetDefinedSetRequest(Prev, New, TrUserData);
      'DeleteVrfResponse' ->
	  merge_msg_DeleteVrfResponse(Prev, New, TrUserData);
      'TableLookupPrefix' ->
	  merge_msg_TableLookupPrefix(Prev, New, TrUserData);
      'AfiSafiConfig' ->
	  merge_msg_AfiSafiConfig(Prev, New, TrUserData);
      'DisableMrtResponse' ->
	  merge_msg_DisableMrtResponse(Prev, New, TrUserData);
      'AddStatementResponse' ->
	  merge_msg_AddStatementResponse(Prev, New, TrUserData);
      'TableInfo' ->
	  merge_msg_TableInfo(Prev, New, TrUserData);
      'GetRibInfoResponse' ->
	  merge_msg_GetRibInfoResponse(Prev, New, TrUserData);
      'CommunityAction' ->
	  merge_msg_CommunityAction(Prev, New, TrUserData);
      'LocalPrefAction' ->
	  merge_msg_LocalPrefAction(Prev, New, TrUserData);
      'NexthopAction' ->
	  merge_msg_NexthopAction(Prev, New, TrUserData);
      'AsPrependAction' ->
	  merge_msg_AsPrependAction(Prev, New, TrUserData);
      'Actions' -> merge_msg_Actions(Prev, New, TrUserData);
      'MatchSet' -> merge_msg_MatchSet(Prev, New, TrUserData);
      'AsPathLength' ->
	  merge_msg_AsPathLength(Prev, New, TrUserData);
      'Conditions' ->
	  merge_msg_Conditions(Prev, New, TrUserData);
      'Statement' ->
	  merge_msg_Statement(Prev, New, TrUserData);
      'GetStatementResponse' ->
	  merge_msg_GetStatementResponse(Prev, New, TrUserData);
      'UseMultiplePathsConfig' ->
	  merge_msg_UseMultiplePathsConfig(Prev, New, TrUserData);
      'AddVrfResponse' ->
	  merge_msg_AddVrfResponse(Prev, New, TrUserData);
      'PrefixLimit' ->
	  merge_msg_PrefixLimit(Prev, New, TrUserData);
      'PeerConf' -> merge_msg_PeerConf(Prev, New, TrUserData);
      'Policy' -> merge_msg_Policy(Prev, New, TrUserData);
      'PolicyAssignment' ->
	  merge_msg_PolicyAssignment(Prev, New, TrUserData);
      'AddPolicyAssignmentRequest' ->
	  merge_msg_AddPolicyAssignmentRequest(Prev, New,
					       TrUserData);
      'GetPolicyResponse' ->
	  merge_msg_GetPolicyResponse(Prev, New, TrUserData);
      'RouteSelectionOptionsConfig' ->
	  merge_msg_RouteSelectionOptionsConfig(Prev, New,
						TrUserData);
      'ApplyPolicy' ->
	  merge_msg_ApplyPolicy(Prev, New, TrUserData);
      'AddPolicyAssignmentResponse' ->
	  merge_msg_AddPolicyAssignmentResponse(Prev, New,
						TrUserData);
      'Transport' ->
	  merge_msg_Transport(Prev, New, TrUserData);
      'AddNeighborResponse' ->
	  merge_msg_AddNeighborResponse(Prev, New, TrUserData);
      'GetVrfRequest' ->
	  merge_msg_GetVrfRequest(Prev, New, TrUserData);
      'AddStatementRequest' ->
	  merge_msg_AddStatementRequest(Prev, New, TrUserData);
      'IbgpState' ->
	  merge_msg_IbgpState(Prev, New, TrUserData);
      'IbgpConfig' ->
	  merge_msg_IbgpConfig(Prev, New, TrUserData);
      'Ibgp' -> merge_msg_Ibgp(Prev, New, TrUserData);
      'EbgpState' ->
	  merge_msg_EbgpState(Prev, New, TrUserData);
      'EbgpConfig' ->
	  merge_msg_EbgpConfig(Prev, New, TrUserData);
      'Ebgp' -> merge_msg_Ebgp(Prev, New, TrUserData);
      'UseMultiplePathsState' ->
	  merge_msg_UseMultiplePathsState(Prev, New, TrUserData);
      'UseMultiplePaths' ->
	  merge_msg_UseMultiplePaths(Prev, New, TrUserData);
      'LongLivedGracefulRestartState' ->
	  merge_msg_LongLivedGracefulRestartState(Prev, New,
						  TrUserData);
      'LongLivedGracefulRestartConfig' ->
	  merge_msg_LongLivedGracefulRestartConfig(Prev, New,
						   TrUserData);
      'LongLivedGracefulRestart' ->
	  merge_msg_LongLivedGracefulRestart(Prev, New,
					     TrUserData);
      'ResetNeighborResponse' ->
	  merge_msg_ResetNeighborResponse(Prev, New, TrUserData);
      'AddPathsState' ->
	  merge_msg_AddPathsState(Prev, New, TrUserData);
      'AddPathsConfig' ->
	  merge_msg_AddPathsConfig(Prev, New, TrUserData);
      'AddPaths' -> merge_msg_AddPaths(Prev, New, TrUserData);
      'RouteTargetMembershipState' ->
	  merge_msg_RouteTargetMembershipState(Prev, New,
					       TrUserData);
      'RouteTargetMembershipConfig' ->
	  merge_msg_RouteTargetMembershipConfig(Prev, New,
						TrUserData);
      'RouteTargetMembership' ->
	  merge_msg_RouteTargetMembership(Prev, New, TrUserData);
      'RouteSelectionOptionsState' ->
	  merge_msg_RouteSelectionOptionsState(Prev, New,
					       TrUserData);
      'RouteSelectionOptions' ->
	  merge_msg_RouteSelectionOptions(Prev, New, TrUserData);
      'MpGracefulRestartState' ->
	  merge_msg_MpGracefulRestartState(Prev, New, TrUserData);
      'MpGracefulRestartConfig' ->
	  merge_msg_MpGracefulRestartConfig(Prev, New,
					    TrUserData);
      'MpGracefulRestart' ->
	  merge_msg_MpGracefulRestart(Prev, New, TrUserData);
      'AfiSafi' -> merge_msg_AfiSafi(Prev, New, TrUserData);
      'GracefulRestart' ->
	  merge_msg_GracefulRestart(Prev, New, TrUserData);
      'RouteServer' ->
	  merge_msg_RouteServer(Prev, New, TrUserData);
      'TimersState' ->
	  merge_msg_TimersState(Prev, New, TrUserData);
      'TimersConfig' ->
	  merge_msg_TimersConfig(Prev, New, TrUserData);
      'Timers' -> merge_msg_Timers(Prev, New, TrUserData);
      'Queues' -> merge_msg_Queues(Prev, New, TrUserData);
      'Message' -> merge_msg_Message(Prev, New, TrUserData);
      'Messages' -> merge_msg_Messages(Prev, New, TrUserData);
      'PeerState' ->
	  merge_msg_PeerState(Prev, New, TrUserData);
      'RouteReflector' ->
	  merge_msg_RouteReflector(Prev, New, TrUserData);
      'EbgpMultihop' ->
	  merge_msg_EbgpMultihop(Prev, New, TrUserData);
      'Peer' -> merge_msg_Peer(Prev, New, TrUserData);
      'AddNeighborRequest' ->
	  merge_msg_AddNeighborRequest(Prev, New, TrUserData);
      'ValidateRibRequest' ->
	  merge_msg_ValidateRibRequest(Prev, New, TrUserData);
      'DeletePolicyAssignmentRequest' ->
	  merge_msg_DeletePolicyAssignmentRequest(Prev, New,
						  TrUserData);
      'RPKIValidation' ->
	  merge_msg_RPKIValidation(Prev, New, TrUserData);
      'Path' -> merge_msg_Path(Prev, New, TrUserData);
      'Destination' ->
	  merge_msg_Destination(Prev, New, TrUserData);
      'Table' -> merge_msg_Table(Prev, New, TrUserData);
      'MonitorRibRequest' ->
	  merge_msg_MonitorRibRequest(Prev, New, TrUserData);
      'ShutdownNeighborResponse' ->
	  merge_msg_ShutdownNeighborResponse(Prev, New,
					     TrUserData);
      'AddRpkiResponse' ->
	  merge_msg_AddRpkiResponse(Prev, New, TrUserData);
      'AddPolicyRequest' ->
	  merge_msg_AddPolicyRequest(Prev, New, TrUserData);
      'RPKIState' ->
	  merge_msg_RPKIState(Prev, New, TrUserData);
      'Rpki' -> merge_msg_Rpki(Prev, New, TrUserData);
      'AddPathRequest' ->
	  merge_msg_AddPathRequest(Prev, New, TrUserData);
      'ResetRpkiResponse' ->
	  merge_msg_ResetRpkiResponse(Prev, New, TrUserData);
      'ResetRpkiRequest' ->
	  merge_msg_ResetRpkiRequest(Prev, New, TrUserData);
      'SoftResetNeighborRequest' ->
	  merge_msg_SoftResetNeighborRequest(Prev, New,
					     TrUserData);
      'AddPolicyResponse' ->
	  merge_msg_AddPolicyResponse(Prev, New, TrUserData);
      'EnableNeighborRequest' ->
	  merge_msg_EnableNeighborRequest(Prev, New, TrUserData);
      'AddPathResponse' ->
	  merge_msg_AddPathResponse(Prev, New, TrUserData);
      'Vrf' -> merge_msg_Vrf(Prev, New, TrUserData);
      'GetVrfResponse' ->
	  merge_msg_GetVrfResponse(Prev, New, TrUserData);
      'SoftResetRpkiRequest' ->
	  merge_msg_SoftResetRpkiRequest(Prev, New, TrUserData);
      'StopServerRequest' ->
	  merge_msg_StopServerRequest(Prev, New, TrUserData);
      'AddBmpResponse' ->
	  merge_msg_AddBmpResponse(Prev, New, TrUserData);
      'GetRpkiRequest' ->
	  merge_msg_GetRpkiRequest(Prev, New, TrUserData);
      'DeleteNeighborRequest' ->
	  merge_msg_DeleteNeighborRequest(Prev, New, TrUserData);
      'AfiSafiState' ->
	  merge_msg_AfiSafiState(Prev, New, TrUserData);
      'GetServerResponse' ->
	  merge_msg_GetServerResponse(Prev, New, TrUserData);
      'EnableMrtResponse' ->
	  merge_msg_EnableMrtResponse(Prev, New, TrUserData);
      'InjectMrtRequest' ->
	  merge_msg_InjectMrtRequest(Prev, New, TrUserData);
      'Prefix' -> merge_msg_Prefix(Prev, New, TrUserData);
      'DefinedSet' ->
	  merge_msg_DefinedSet(Prev, New, TrUserData);
      'AddDefinedSetRequest' ->
	  merge_msg_AddDefinedSetRequest(Prev, New, TrUserData);
      'ReplacePolicyAssignmentRequest' ->
	  merge_msg_ReplacePolicyAssignmentRequest(Prev, New,
						   TrUserData);
      'DeletePathResponse' ->
	  merge_msg_DeletePathResponse(Prev, New, TrUserData);
      'DeletePolicyRequest' ->
	  merge_msg_DeletePolicyRequest(Prev, New, TrUserData);
      'DeleteVrfRequest' ->
	  merge_msg_DeleteVrfRequest(Prev, New, TrUserData);
      'GetPolicyAssignmentResponse' ->
	  merge_msg_GetPolicyAssignmentResponse(Prev, New,
						TrUserData);
      'DeleteDefinedSetResponse' ->
	  merge_msg_DeleteDefinedSetResponse(Prev, New,
					     TrUserData);
      'ReplacePolicyAssignmentResponse' ->
	  merge_msg_ReplacePolicyAssignmentResponse(Prev, New,
						    TrUserData);
      'GetServerRequest' ->
	  merge_msg_GetServerRequest(Prev, New, TrUserData);
      'AddBmpRequest' ->
	  merge_msg_AddBmpRequest(Prev, New, TrUserData);
      'ResetNeighborRequest' ->
	  merge_msg_ResetNeighborRequest(Prev, New, TrUserData);
      'GetRibInfoRequest' ->
	  merge_msg_GetRibInfoRequest(Prev, New, TrUserData);
      'GetRibRequest' ->
	  merge_msg_GetRibRequest(Prev, New, TrUserData);
      'GetStatementRequest' ->
	  merge_msg_GetStatementRequest(Prev, New, TrUserData);
      'ReplaceStatementRequest' ->
	  merge_msg_ReplaceStatementRequest(Prev, New,
					    TrUserData);
      'StopServerResponse' ->
	  merge_msg_StopServerResponse(Prev, New, TrUserData);
      'DeleteStatementRequest' ->
	  merge_msg_DeleteStatementRequest(Prev, New, TrUserData);
      'AddRpkiRequest' ->
	  merge_msg_AddRpkiRequest(Prev, New, TrUserData);
      'GetRibResponse' ->
	  merge_msg_GetRibResponse(Prev, New, TrUserData);
      'DisableMrtRequest' ->
	  merge_msg_DisableMrtRequest(Prev, New, TrUserData);
      'DisableRpkiRequest' ->
	  merge_msg_DisableRpkiRequest(Prev, New, TrUserData);
      'EnableRpkiResponse' ->
	  merge_msg_EnableRpkiResponse(Prev, New, TrUserData);
      'ReplaceDefinedSetRequest' ->
	  merge_msg_ReplaceDefinedSetRequest(Prev, New,
					     TrUserData);
      'DisableNeighborRequest' ->
	  merge_msg_DisableNeighborRequest(Prev, New, TrUserData);
      'DeletePolicyResponse' ->
	  merge_msg_DeletePolicyResponse(Prev, New, TrUserData);
      'SoftResetRpkiResponse' ->
	  merge_msg_SoftResetRpkiResponse(Prev, New, TrUserData);
      'GetNeighborResponse' ->
	  merge_msg_GetNeighborResponse(Prev, New, TrUserData);
      'ReplacePolicyResponse' ->
	  merge_msg_ReplacePolicyResponse(Prev, New, TrUserData);
      'GetRpkiResponse' ->
	  merge_msg_GetRpkiResponse(Prev, New, TrUserData);
      'SoftResetNeighborResponse' ->
	  merge_msg_SoftResetNeighborResponse(Prev, New,
					      TrUserData);
      'AddDefinedSetResponse' ->
	  merge_msg_AddDefinedSetResponse(Prev, New, TrUserData);
      'GetNeighborRequest' ->
	  merge_msg_GetNeighborRequest(Prev, New, TrUserData);
      'EnableMrtRequest' ->
	  merge_msg_EnableMrtRequest(Prev, New, TrUserData);
      'ReplacePolicyRequest' ->
	  merge_msg_ReplacePolicyRequest(Prev, New, TrUserData);
      'Arguments' ->
	  merge_msg_Arguments(Prev, New, TrUserData);
      'GetRoaRequest' ->
	  merge_msg_GetRoaRequest(Prev, New, TrUserData);
      'DeleteDefinedSetRequest' ->
	  merge_msg_DeleteDefinedSetRequest(Prev, New,
					    TrUserData);
      'DeleteRpkiResponse' ->
	  merge_msg_DeleteRpkiResponse(Prev, New, TrUserData);
      'EnableZebraResponse' ->
	  merge_msg_EnableZebraResponse(Prev, New, TrUserData);
      'StartServerResponse' ->
	  merge_msg_StartServerResponse(Prev, New, TrUserData);
      'ReplaceDefinedSetResponse' ->
	  merge_msg_ReplaceDefinedSetResponse(Prev, New,
					      TrUserData);
      'GetDefinedSetResponse' ->
	  merge_msg_GetDefinedSetResponse(Prev, New, TrUserData);
      'ShutdownNeighborRequest' ->
	  merge_msg_ShutdownNeighborRequest(Prev, New,
					    TrUserData);
      'ValidateRibResponse' ->
	  merge_msg_ValidateRibResponse(Prev, New, TrUserData);
      'DeletePolicyAssignmentResponse' ->
	  merge_msg_DeletePolicyAssignmentResponse(Prev, New,
						   TrUserData);
      'InjectMrtResponse' ->
	  merge_msg_InjectMrtResponse(Prev, New, TrUserData);
      'DisableRpkiResponse' ->
	  merge_msg_DisableRpkiResponse(Prev, New, TrUserData);
      'EnableZebraRequest' ->
	  merge_msg_EnableZebraRequest(Prev, New, TrUserData);
      'AddVrfRequest' ->
	  merge_msg_AddVrfRequest(Prev, New, TrUserData);
      'DeletePathRequest' ->
	  merge_msg_DeletePathRequest(Prev, New, TrUserData);
      'EnableNeighborResponse' ->
	  merge_msg_EnableNeighborResponse(Prev, New, TrUserData);
      'EnableRpkiRequest' ->
	  merge_msg_EnableRpkiRequest(Prev, New, TrUserData);
      'GetPathRequest' ->
	  merge_msg_GetPathRequest(Prev, New, TrUserData);
      'ReplaceStatementResponse' ->
	  merge_msg_ReplaceStatementResponse(Prev, New,
					     TrUserData);
      'DeleteBmpRequest' ->
	  merge_msg_DeleteBmpRequest(Prev, New, TrUserData);
      'DeleteBmpResponse' ->
	  merge_msg_DeleteBmpResponse(Prev, New, TrUserData);
      'GetPolicyAssignmentRequest' ->
	  merge_msg_GetPolicyAssignmentRequest(Prev, New,
					       TrUserData);
      'DeleteStatementResponse' ->
	  merge_msg_DeleteStatementResponse(Prev, New, TrUserData)
    end.

merge_msg_MedAction(#{type := PFtype, value := PFvalue},
		    #{type := NFtype, value := NFvalue}, _) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      value =>
	  if NFvalue =:= undefined -> PFvalue;
	     true -> NFvalue
	  end}.

merge_msg_DisableNeighborResponse(_Prev, New,
				  _TrUserData) ->
    New.

merge_msg_DeleteNeighborResponse(_Prev, New,
				 _TrUserData) ->
    New.

merge_msg_Global(#{as := PFas, router_id := PFrouter_id,
		   listen_port := PFlisten_port,
		   listen_addresses := PFlisten_addresses,
		   families := PFfamilies,
		   use_multiple_paths := PFuse_multiple_paths},
		 #{as := NFas, router_id := NFrouter_id,
		   listen_port := NFlisten_port,
		   listen_addresses := NFlisten_addresses,
		   families := NFfamilies,
		   use_multiple_paths := NFuse_multiple_paths},
		 TrUserData) ->
    #{as =>
	  if NFas =:= undefined -> PFas;
	     true -> NFas
	  end,
      router_id =>
	  if NFrouter_id =:= undefined -> PFrouter_id;
	     true -> NFrouter_id
	  end,
      listen_port =>
	  if NFlisten_port =:= undefined -> PFlisten_port;
	     true -> NFlisten_port
	  end,
      listen_addresses =>
	  if PFlisten_addresses /= undefined,
	     NFlisten_addresses /= undefined ->
		 'erlang_++'(PFlisten_addresses, NFlisten_addresses,
			     TrUserData);
	     PFlisten_addresses == undefined -> NFlisten_addresses;
	     NFlisten_addresses == undefined -> PFlisten_addresses
	  end,
      families =>
	  if PFfamilies /= undefined, NFfamilies /= undefined ->
		 'erlang_++'(PFfamilies, NFfamilies, TrUserData);
	     PFfamilies == undefined -> NFfamilies;
	     NFfamilies == undefined -> PFfamilies
	  end,
      use_multiple_paths =>
	  if NFuse_multiple_paths =:= undefined ->
		 PFuse_multiple_paths;
	     true -> NFuse_multiple_paths
	  end}.

merge_msg_StartServerRequest(#{global := PFglobal},
			     #{global := NFglobal}, TrUserData) ->
    #{global =>
	  if PFglobal /= undefined, NFglobal /= undefined ->
		 merge_msg_Global(PFglobal, NFglobal, TrUserData);
	     PFglobal == undefined -> NFglobal;
	     NFglobal == undefined -> PFglobal
	  end}.

merge_msg_DeleteRpkiRequest(#{address := PFaddress,
			      port := PFport},
			    #{address := NFaddress, port := NFport}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      port =>
	  if NFport =:= undefined -> PFport;
	     true -> NFport
	  end}.

merge_msg_GetPolicyRequest(_Prev, New, _TrUserData) ->
    New.

merge_msg_RPKIConf(#{address := PFaddress,
		     remote_port := PFremote_port},
		   #{address := NFaddress, remote_port := NFremote_port},
		   _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      remote_port =>
	  if NFremote_port =:= undefined -> PFremote_port;
	     true -> NFremote_port
	  end}.

merge_msg_Roa(#{as := PFas, prefixlen := PFprefixlen,
		maxlen := PFmaxlen, prefix := PFprefix, conf := PFconf},
	      #{as := NFas, prefixlen := NFprefixlen,
		maxlen := NFmaxlen, prefix := NFprefix, conf := NFconf},
	      TrUserData) ->
    #{as =>
	  if NFas =:= undefined -> PFas;
	     true -> NFas
	  end,
      prefixlen =>
	  if NFprefixlen =:= undefined -> PFprefixlen;
	     true -> NFprefixlen
	  end,
      maxlen =>
	  if NFmaxlen =:= undefined -> PFmaxlen;
	     true -> NFmaxlen
	  end,
      prefix =>
	  if NFprefix =:= undefined -> PFprefix;
	     true -> NFprefix
	  end,
      conf =>
	  if PFconf /= undefined, NFconf /= undefined ->
		 merge_msg_RPKIConf(PFconf, NFconf, TrUserData);
	     PFconf == undefined -> NFconf;
	     NFconf == undefined -> PFconf
	  end}.

merge_msg_GetRoaResponse(#{roas := PFroas},
			 #{roas := NFroas}, TrUserData) ->
    #{roas =>
	  if PFroas /= undefined, NFroas /= undefined ->
		 'erlang_++'(PFroas, NFroas, TrUserData);
	     PFroas == undefined -> NFroas;
	     NFroas == undefined -> PFroas
	  end}.

merge_msg_GetDefinedSetRequest(#{type := PFtype,
				 name := PFname},
			       #{type := NFtype, name := NFname}, _) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end}.

merge_msg_DeleteVrfResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_TableLookupPrefix(#{prefix := PFprefix,
			      lookup_option := PFlookup_option},
			    #{prefix := NFprefix,
			      lookup_option := NFlookup_option},
			    _) ->
    #{prefix =>
	  if NFprefix =:= undefined -> PFprefix;
	     true -> NFprefix
	  end,
      lookup_option =>
	  if NFlookup_option =:= undefined -> PFlookup_option;
	     true -> NFlookup_option
	  end}.

merge_msg_AfiSafiConfig(#{family := PFfamily,
			  enabled := PFenabled},
			#{family := NFfamily, enabled := NFenabled}, _) ->
    #{family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end}.

merge_msg_DisableMrtResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_AddStatementResponse(_Prev, New,
			       _TrUserData) ->
    New.

merge_msg_TableInfo(#{type := PFtype, name := PFname,
		      family := PFfamily,
		      num_destination := PFnum_destination,
		      num_path := PFnum_path, num_accepted := PFnum_accepted},
		    #{type := NFtype, name := NFname, family := NFfamily,
		      num_destination := NFnum_destination,
		      num_path := NFnum_path, num_accepted := NFnum_accepted},
		    _) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      num_destination =>
	  if NFnum_destination =:= undefined -> PFnum_destination;
	     true -> NFnum_destination
	  end,
      num_path =>
	  if NFnum_path =:= undefined -> PFnum_path;
	     true -> NFnum_path
	  end,
      num_accepted =>
	  if NFnum_accepted =:= undefined -> PFnum_accepted;
	     true -> NFnum_accepted
	  end}.

merge_msg_GetRibInfoResponse(#{info := PFinfo},
			     #{info := NFinfo}, TrUserData) ->
    #{info =>
	  if PFinfo /= undefined, NFinfo /= undefined ->
		 merge_msg_TableInfo(PFinfo, NFinfo, TrUserData);
	     PFinfo == undefined -> NFinfo;
	     NFinfo == undefined -> PFinfo
	  end}.

merge_msg_CommunityAction(#{type := PFtype,
			    communities := PFcommunities},
			  #{type := NFtype, communities := NFcommunities},
			  TrUserData) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      communities =>
	  if PFcommunities /= undefined,
	     NFcommunities /= undefined ->
		 'erlang_++'(PFcommunities, NFcommunities, TrUserData);
	     PFcommunities == undefined -> NFcommunities;
	     NFcommunities == undefined -> PFcommunities
	  end}.

merge_msg_LocalPrefAction(#{value := PFvalue},
			  #{value := NFvalue}, _) ->
    #{value =>
	  if NFvalue =:= undefined -> PFvalue;
	     true -> NFvalue
	  end}.

merge_msg_NexthopAction(#{address := PFaddress,
			  self := PFself},
			#{address := NFaddress, self := NFself}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      self =>
	  if NFself =:= undefined -> PFself;
	     true -> NFself
	  end}.

merge_msg_AsPrependAction(#{asn := PFasn,
			    repeat := PFrepeat,
			    use_left_most := PFuse_left_most},
			  #{asn := NFasn, repeat := NFrepeat,
			    use_left_most := NFuse_left_most},
			  _) ->
    #{asn =>
	  if NFasn =:= undefined -> PFasn;
	     true -> NFasn
	  end,
      repeat =>
	  if NFrepeat =:= undefined -> PFrepeat;
	     true -> NFrepeat
	  end,
      use_left_most =>
	  if NFuse_left_most =:= undefined -> PFuse_left_most;
	     true -> NFuse_left_most
	  end}.

merge_msg_Actions(#{route_action := PFroute_action,
		    community := PFcommunity, med := PFmed,
		    as_prepend := PFas_prepend,
		    ext_community := PFext_community, nexthop := PFnexthop,
		    local_pref := PFlocal_pref,
		    large_community := PFlarge_community},
		  #{route_action := NFroute_action,
		    community := NFcommunity, med := NFmed,
		    as_prepend := NFas_prepend,
		    ext_community := NFext_community, nexthop := NFnexthop,
		    local_pref := NFlocal_pref,
		    large_community := NFlarge_community},
		  TrUserData) ->
    #{route_action =>
	  if NFroute_action =:= undefined -> PFroute_action;
	     true -> NFroute_action
	  end,
      community =>
	  if PFcommunity /= undefined, NFcommunity /= undefined ->
		 merge_msg_CommunityAction(PFcommunity, NFcommunity,
					   TrUserData);
	     PFcommunity == undefined -> NFcommunity;
	     NFcommunity == undefined -> PFcommunity
	  end,
      med =>
	  if PFmed /= undefined, NFmed /= undefined ->
		 merge_msg_MedAction(PFmed, NFmed, TrUserData);
	     PFmed == undefined -> NFmed;
	     NFmed == undefined -> PFmed
	  end,
      as_prepend =>
	  if PFas_prepend /= undefined,
	     NFas_prepend /= undefined ->
		 merge_msg_AsPrependAction(PFas_prepend, NFas_prepend,
					   TrUserData);
	     PFas_prepend == undefined -> NFas_prepend;
	     NFas_prepend == undefined -> PFas_prepend
	  end,
      ext_community =>
	  if PFext_community /= undefined,
	     NFext_community /= undefined ->
		 merge_msg_CommunityAction(PFext_community,
					   NFext_community, TrUserData);
	     PFext_community == undefined -> NFext_community;
	     NFext_community == undefined -> PFext_community
	  end,
      nexthop =>
	  if PFnexthop /= undefined, NFnexthop /= undefined ->
		 merge_msg_NexthopAction(PFnexthop, NFnexthop,
					 TrUserData);
	     PFnexthop == undefined -> NFnexthop;
	     NFnexthop == undefined -> PFnexthop
	  end,
      local_pref =>
	  if PFlocal_pref /= undefined,
	     NFlocal_pref /= undefined ->
		 merge_msg_LocalPrefAction(PFlocal_pref, NFlocal_pref,
					   TrUserData);
	     PFlocal_pref == undefined -> NFlocal_pref;
	     NFlocal_pref == undefined -> PFlocal_pref
	  end,
      large_community =>
	  if PFlarge_community /= undefined,
	     NFlarge_community /= undefined ->
		 merge_msg_CommunityAction(PFlarge_community,
					   NFlarge_community, TrUserData);
	     PFlarge_community == undefined -> NFlarge_community;
	     NFlarge_community == undefined -> PFlarge_community
	  end}.

merge_msg_MatchSet(#{type := PFtype, name := PFname},
		   #{type := NFtype, name := NFname}, _) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end}.

merge_msg_AsPathLength(#{type := PFtype,
			 length := PFlength},
		       #{type := NFtype, length := NFlength}, _) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      length =>
	  if NFlength =:= undefined -> PFlength;
	     true -> NFlength
	  end}.

merge_msg_Conditions(#{prefix_set := PFprefix_set,
		       neighbor_set := PFneighbor_set,
		       as_path_length := PFas_path_length,
		       as_path_set := PFas_path_set,
		       community_set := PFcommunity_set,
		       ext_community_set := PFext_community_set,
		       rpki_result := PFrpki_result,
		       route_type := PFroute_type,
		       large_community_set := PFlarge_community_set},
		     #{prefix_set := NFprefix_set,
		       neighbor_set := NFneighbor_set,
		       as_path_length := NFas_path_length,
		       as_path_set := NFas_path_set,
		       community_set := NFcommunity_set,
		       ext_community_set := NFext_community_set,
		       rpki_result := NFrpki_result,
		       route_type := NFroute_type,
		       large_community_set := NFlarge_community_set},
		     TrUserData) ->
    #{prefix_set =>
	  if PFprefix_set /= undefined,
	     NFprefix_set /= undefined ->
		 merge_msg_MatchSet(PFprefix_set, NFprefix_set,
				    TrUserData);
	     PFprefix_set == undefined -> NFprefix_set;
	     NFprefix_set == undefined -> PFprefix_set
	  end,
      neighbor_set =>
	  if PFneighbor_set /= undefined,
	     NFneighbor_set /= undefined ->
		 merge_msg_MatchSet(PFneighbor_set, NFneighbor_set,
				    TrUserData);
	     PFneighbor_set == undefined -> NFneighbor_set;
	     NFneighbor_set == undefined -> PFneighbor_set
	  end,
      as_path_length =>
	  if PFas_path_length /= undefined,
	     NFas_path_length /= undefined ->
		 merge_msg_AsPathLength(PFas_path_length,
					NFas_path_length, TrUserData);
	     PFas_path_length == undefined -> NFas_path_length;
	     NFas_path_length == undefined -> PFas_path_length
	  end,
      as_path_set =>
	  if PFas_path_set /= undefined,
	     NFas_path_set /= undefined ->
		 merge_msg_MatchSet(PFas_path_set, NFas_path_set,
				    TrUserData);
	     PFas_path_set == undefined -> NFas_path_set;
	     NFas_path_set == undefined -> PFas_path_set
	  end,
      community_set =>
	  if PFcommunity_set /= undefined,
	     NFcommunity_set /= undefined ->
		 merge_msg_MatchSet(PFcommunity_set, NFcommunity_set,
				    TrUserData);
	     PFcommunity_set == undefined -> NFcommunity_set;
	     NFcommunity_set == undefined -> PFcommunity_set
	  end,
      ext_community_set =>
	  if PFext_community_set /= undefined,
	     NFext_community_set /= undefined ->
		 merge_msg_MatchSet(PFext_community_set,
				    NFext_community_set, TrUserData);
	     PFext_community_set == undefined -> NFext_community_set;
	     NFext_community_set == undefined -> PFext_community_set
	  end,
      rpki_result =>
	  if NFrpki_result =:= undefined -> PFrpki_result;
	     true -> NFrpki_result
	  end,
      route_type =>
	  if NFroute_type =:= undefined -> PFroute_type;
	     true -> NFroute_type
	  end,
      large_community_set =>
	  if PFlarge_community_set /= undefined,
	     NFlarge_community_set /= undefined ->
		 merge_msg_MatchSet(PFlarge_community_set,
				    NFlarge_community_set, TrUserData);
	     PFlarge_community_set == undefined ->
		 NFlarge_community_set;
	     NFlarge_community_set == undefined ->
		 PFlarge_community_set
	  end}.

merge_msg_Statement(#{name := PFname,
		      conditions := PFconditions, actions := PFactions},
		    #{name := NFname, conditions := NFconditions,
		      actions := NFactions},
		    TrUserData) ->
    #{name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      conditions =>
	  if PFconditions /= undefined,
	     NFconditions /= undefined ->
		 merge_msg_Conditions(PFconditions, NFconditions,
				      TrUserData);
	     PFconditions == undefined -> NFconditions;
	     NFconditions == undefined -> PFconditions
	  end,
      actions =>
	  if PFactions /= undefined, NFactions /= undefined ->
		 merge_msg_Actions(PFactions, NFactions, TrUserData);
	     PFactions == undefined -> NFactions;
	     NFactions == undefined -> PFactions
	  end}.

merge_msg_GetStatementResponse(#{statements :=
				     PFstatements},
			       #{statements := NFstatements}, TrUserData) ->
    #{statements =>
	  if PFstatements /= undefined,
	     NFstatements /= undefined ->
		 'erlang_++'(PFstatements, NFstatements, TrUserData);
	     PFstatements == undefined -> NFstatements;
	     NFstatements == undefined -> PFstatements
	  end}.

merge_msg_UseMultiplePathsConfig(#{enabled :=
				       PFenabled},
				 #{enabled := NFenabled}, _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end}.

merge_msg_AddVrfResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_PrefixLimit(#{family := PFfamily,
			max_prefixes := PFmax_prefixes,
			shutdown_threshold_pct := PFshutdown_threshold_pct},
		      #{family := NFfamily, max_prefixes := NFmax_prefixes,
			shutdown_threshold_pct := NFshutdown_threshold_pct},
		      _) ->
    #{family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      max_prefixes =>
	  if NFmax_prefixes =:= undefined -> PFmax_prefixes;
	     true -> NFmax_prefixes
	  end,
      shutdown_threshold_pct =>
	  if NFshutdown_threshold_pct =:= undefined ->
		 PFshutdown_threshold_pct;
	     true -> NFshutdown_threshold_pct
	  end}.

merge_msg_PeerConf(#{auth_password := PFauth_password,
		     description := PFdescription, local_as := PFlocal_as,
		     neighbor_address := PFneighbor_address,
		     peer_as := PFpeer_as, peer_group := PFpeer_group,
		     peer_type := PFpeer_type,
		     remove_private_as := PFremove_private_as,
		     route_flap_damping := PFroute_flap_damping,
		     send_community := PFsend_community,
		     remote_cap := PFremote_cap, local_cap := PFlocal_cap,
		     id := PFid, prefix_limits := PFprefix_limits,
		     local_address := PFlocal_address,
		     neighbor_interface := PFneighbor_interface,
		     vrf := PFvrf, allow_own_as := PFallow_own_as,
		     replace_peer_as := PFreplace_peer_as},
		   #{auth_password := NFauth_password,
		     description := NFdescription, local_as := NFlocal_as,
		     neighbor_address := NFneighbor_address,
		     peer_as := NFpeer_as, peer_group := NFpeer_group,
		     peer_type := NFpeer_type,
		     remove_private_as := NFremove_private_as,
		     route_flap_damping := NFroute_flap_damping,
		     send_community := NFsend_community,
		     remote_cap := NFremote_cap, local_cap := NFlocal_cap,
		     id := NFid, prefix_limits := NFprefix_limits,
		     local_address := NFlocal_address,
		     neighbor_interface := NFneighbor_interface,
		     vrf := NFvrf, allow_own_as := NFallow_own_as,
		     replace_peer_as := NFreplace_peer_as},
		   TrUserData) ->
    #{auth_password =>
	  if NFauth_password =:= undefined -> PFauth_password;
	     true -> NFauth_password
	  end,
      description =>
	  if NFdescription =:= undefined -> PFdescription;
	     true -> NFdescription
	  end,
      local_as =>
	  if NFlocal_as =:= undefined -> PFlocal_as;
	     true -> NFlocal_as
	  end,
      neighbor_address =>
	  if NFneighbor_address =:= undefined ->
		 PFneighbor_address;
	     true -> NFneighbor_address
	  end,
      peer_as =>
	  if NFpeer_as =:= undefined -> PFpeer_as;
	     true -> NFpeer_as
	  end,
      peer_group =>
	  if NFpeer_group =:= undefined -> PFpeer_group;
	     true -> NFpeer_group
	  end,
      peer_type =>
	  if NFpeer_type =:= undefined -> PFpeer_type;
	     true -> NFpeer_type
	  end,
      remove_private_as =>
	  if NFremove_private_as =:= undefined ->
		 PFremove_private_as;
	     true -> NFremove_private_as
	  end,
      route_flap_damping =>
	  if NFroute_flap_damping =:= undefined ->
		 PFroute_flap_damping;
	     true -> NFroute_flap_damping
	  end,
      send_community =>
	  if NFsend_community =:= undefined -> PFsend_community;
	     true -> NFsend_community
	  end,
      remote_cap =>
	  if PFremote_cap /= undefined,
	     NFremote_cap /= undefined ->
		 'erlang_++'(PFremote_cap, NFremote_cap, TrUserData);
	     PFremote_cap == undefined -> NFremote_cap;
	     NFremote_cap == undefined -> PFremote_cap
	  end,
      local_cap =>
	  if PFlocal_cap /= undefined, NFlocal_cap /= undefined ->
		 'erlang_++'(PFlocal_cap, NFlocal_cap, TrUserData);
	     PFlocal_cap == undefined -> NFlocal_cap;
	     NFlocal_cap == undefined -> PFlocal_cap
	  end,
      id =>
	  if NFid =:= undefined -> PFid;
	     true -> NFid
	  end,
      prefix_limits =>
	  if PFprefix_limits /= undefined,
	     NFprefix_limits /= undefined ->
		 'erlang_++'(PFprefix_limits, NFprefix_limits,
			     TrUserData);
	     PFprefix_limits == undefined -> NFprefix_limits;
	     NFprefix_limits == undefined -> PFprefix_limits
	  end,
      local_address =>
	  if NFlocal_address =:= undefined -> PFlocal_address;
	     true -> NFlocal_address
	  end,
      neighbor_interface =>
	  if NFneighbor_interface =:= undefined ->
		 PFneighbor_interface;
	     true -> NFneighbor_interface
	  end,
      vrf =>
	  if NFvrf =:= undefined -> PFvrf;
	     true -> NFvrf
	  end,
      allow_own_as =>
	  if NFallow_own_as =:= undefined -> PFallow_own_as;
	     true -> NFallow_own_as
	  end,
      replace_peer_as =>
	  if NFreplace_peer_as =:= undefined -> PFreplace_peer_as;
	     true -> NFreplace_peer_as
	  end}.

merge_msg_Policy(#{name := PFname,
		   statements := PFstatements},
		 #{name := NFname, statements := NFstatements},
		 TrUserData) ->
    #{name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      statements =>
	  if PFstatements /= undefined,
	     NFstatements /= undefined ->
		 'erlang_++'(PFstatements, NFstatements, TrUserData);
	     PFstatements == undefined -> NFstatements;
	     NFstatements == undefined -> PFstatements
	  end}.

merge_msg_PolicyAssignment(#{type := PFtype,
			     resource := PFresource, name := PFname,
			     policies := PFpolicies, default := PFdefault},
			   #{type := NFtype, resource := NFresource,
			     name := NFname, policies := NFpolicies,
			     default := NFdefault},
			   TrUserData) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      resource =>
	  if NFresource =:= undefined -> PFresource;
	     true -> NFresource
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      policies =>
	  if PFpolicies /= undefined, NFpolicies /= undefined ->
		 'erlang_++'(PFpolicies, NFpolicies, TrUserData);
	     PFpolicies == undefined -> NFpolicies;
	     NFpolicies == undefined -> PFpolicies
	  end,
      default =>
	  if NFdefault =:= undefined -> PFdefault;
	     true -> NFdefault
	  end}.

merge_msg_AddPolicyAssignmentRequest(#{assignment :=
					   PFassignment},
				     #{assignment := NFassignment},
				     TrUserData) ->
    #{assignment =>
	  if PFassignment /= undefined,
	     NFassignment /= undefined ->
		 merge_msg_PolicyAssignment(PFassignment, NFassignment,
					    TrUserData);
	     PFassignment == undefined -> NFassignment;
	     NFassignment == undefined -> PFassignment
	  end}.

merge_msg_GetPolicyResponse(#{policies := PFpolicies},
			    #{policies := NFpolicies}, TrUserData) ->
    #{policies =>
	  if PFpolicies /= undefined, NFpolicies /= undefined ->
		 'erlang_++'(PFpolicies, NFpolicies, TrUserData);
	     PFpolicies == undefined -> NFpolicies;
	     NFpolicies == undefined -> PFpolicies
	  end}.

merge_msg_RouteSelectionOptionsConfig(#{always_compare_med
					    := PFalways_compare_med,
					ignore_as_path_length :=
					    PFignore_as_path_length,
					external_compare_router_id :=
					    PFexternal_compare_router_id,
					advertise_inactive_routes :=
					    PFadvertise_inactive_routes,
					enable_aigp := PFenable_aigp,
					ignore_next_hop_igp_metric :=
					    PFignore_next_hop_igp_metric},
				      #{always_compare_med :=
					    NFalways_compare_med,
					ignore_as_path_length :=
					    NFignore_as_path_length,
					external_compare_router_id :=
					    NFexternal_compare_router_id,
					advertise_inactive_routes :=
					    NFadvertise_inactive_routes,
					enable_aigp := NFenable_aigp,
					ignore_next_hop_igp_metric :=
					    NFignore_next_hop_igp_metric},
				      _) ->
    #{always_compare_med =>
	  if NFalways_compare_med =:= undefined ->
		 PFalways_compare_med;
	     true -> NFalways_compare_med
	  end,
      ignore_as_path_length =>
	  if NFignore_as_path_length =:= undefined ->
		 PFignore_as_path_length;
	     true -> NFignore_as_path_length
	  end,
      external_compare_router_id =>
	  if NFexternal_compare_router_id =:= undefined ->
		 PFexternal_compare_router_id;
	     true -> NFexternal_compare_router_id
	  end,
      advertise_inactive_routes =>
	  if NFadvertise_inactive_routes =:= undefined ->
		 PFadvertise_inactive_routes;
	     true -> NFadvertise_inactive_routes
	  end,
      enable_aigp =>
	  if NFenable_aigp =:= undefined -> PFenable_aigp;
	     true -> NFenable_aigp
	  end,
      ignore_next_hop_igp_metric =>
	  if NFignore_next_hop_igp_metric =:= undefined ->
		 PFignore_next_hop_igp_metric;
	     true -> NFignore_next_hop_igp_metric
	  end}.

merge_msg_ApplyPolicy(#{in_policy := PFin_policy,
			export_policy := PFexport_policy,
			import_policy := PFimport_policy},
		      #{in_policy := NFin_policy,
			export_policy := NFexport_policy,
			import_policy := NFimport_policy},
		      TrUserData) ->
    #{in_policy =>
	  if PFin_policy /= undefined, NFin_policy /= undefined ->
		 merge_msg_PolicyAssignment(PFin_policy, NFin_policy,
					    TrUserData);
	     PFin_policy == undefined -> NFin_policy;
	     NFin_policy == undefined -> PFin_policy
	  end,
      export_policy =>
	  if PFexport_policy /= undefined,
	     NFexport_policy /= undefined ->
		 merge_msg_PolicyAssignment(PFexport_policy,
					    NFexport_policy, TrUserData);
	     PFexport_policy == undefined -> NFexport_policy;
	     NFexport_policy == undefined -> PFexport_policy
	  end,
      import_policy =>
	  if PFimport_policy /= undefined,
	     NFimport_policy /= undefined ->
		 merge_msg_PolicyAssignment(PFimport_policy,
					    NFimport_policy, TrUserData);
	     PFimport_policy == undefined -> NFimport_policy;
	     NFimport_policy == undefined -> PFimport_policy
	  end}.

merge_msg_AddPolicyAssignmentResponse(_Prev, New,
				      _TrUserData) ->
    New.

merge_msg_Transport(#{local_address := PFlocal_address,
		      local_port := PFlocal_port,
		      mtu_discovery := PFmtu_discovery,
		      passive_mode := PFpassive_mode,
		      remote_address := PFremote_address,
		      remote_port := PFremote_port, tcp_mss := PFtcp_mss},
		    #{local_address := NFlocal_address,
		      local_port := NFlocal_port,
		      mtu_discovery := NFmtu_discovery,
		      passive_mode := NFpassive_mode,
		      remote_address := NFremote_address,
		      remote_port := NFremote_port, tcp_mss := NFtcp_mss},
		    _) ->
    #{local_address =>
	  if NFlocal_address =:= undefined -> PFlocal_address;
	     true -> NFlocal_address
	  end,
      local_port =>
	  if NFlocal_port =:= undefined -> PFlocal_port;
	     true -> NFlocal_port
	  end,
      mtu_discovery =>
	  if NFmtu_discovery =:= undefined -> PFmtu_discovery;
	     true -> NFmtu_discovery
	  end,
      passive_mode =>
	  if NFpassive_mode =:= undefined -> PFpassive_mode;
	     true -> NFpassive_mode
	  end,
      remote_address =>
	  if NFremote_address =:= undefined -> PFremote_address;
	     true -> NFremote_address
	  end,
      remote_port =>
	  if NFremote_port =:= undefined -> PFremote_port;
	     true -> NFremote_port
	  end,
      tcp_mss =>
	  if NFtcp_mss =:= undefined -> PFtcp_mss;
	     true -> NFtcp_mss
	  end}.

merge_msg_AddNeighborResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_GetVrfRequest(_Prev, New, _TrUserData) -> New.

merge_msg_AddStatementRequest(#{statement :=
				    PFstatement},
			      #{statement := NFstatement}, TrUserData) ->
    #{statement =>
	  if PFstatement /= undefined, NFstatement /= undefined ->
		 merge_msg_Statement(PFstatement, NFstatement,
				     TrUserData);
	     PFstatement == undefined -> NFstatement;
	     NFstatement == undefined -> PFstatement
	  end}.

merge_msg_IbgpState(#{maximum_paths := PFmaximum_paths},
		    #{maximum_paths := NFmaximum_paths}, _) ->
    #{maximum_paths =>
	  if NFmaximum_paths =:= undefined -> PFmaximum_paths;
	     true -> NFmaximum_paths
	  end}.

merge_msg_IbgpConfig(#{maximum_paths :=
			   PFmaximum_paths},
		     #{maximum_paths := NFmaximum_paths}, _) ->
    #{maximum_paths =>
	  if NFmaximum_paths =:= undefined -> PFmaximum_paths;
	     true -> NFmaximum_paths
	  end}.

merge_msg_Ibgp(#{config := PFconfig, state := PFstate},
	       #{config := NFconfig, state := NFstate}, TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_IbgpConfig(PFconfig, NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_IbgpState(PFstate, NFstate, TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_EbgpState(#{allow_multiple_as :=
			  PFallow_multiple_as,
		      maximum_paths := PFmaximum_paths},
		    #{allow_multiple_as := NFallow_multiple_as,
		      maximum_paths := NFmaximum_paths},
		    _) ->
    #{allow_multiple_as =>
	  if NFallow_multiple_as =:= undefined ->
		 PFallow_multiple_as;
	     true -> NFallow_multiple_as
	  end,
      maximum_paths =>
	  if NFmaximum_paths =:= undefined -> PFmaximum_paths;
	     true -> NFmaximum_paths
	  end}.

merge_msg_EbgpConfig(#{allow_multiple_as :=
			   PFallow_multiple_as,
		       maximum_paths := PFmaximum_paths},
		     #{allow_multiple_as := NFallow_multiple_as,
		       maximum_paths := NFmaximum_paths},
		     _) ->
    #{allow_multiple_as =>
	  if NFallow_multiple_as =:= undefined ->
		 PFallow_multiple_as;
	     true -> NFallow_multiple_as
	  end,
      maximum_paths =>
	  if NFmaximum_paths =:= undefined -> PFmaximum_paths;
	     true -> NFmaximum_paths
	  end}.

merge_msg_Ebgp(#{config := PFconfig, state := PFstate},
	       #{config := NFconfig, state := NFstate}, TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_EbgpConfig(PFconfig, NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_EbgpState(PFstate, NFstate, TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_UseMultiplePathsState(#{enabled := PFenabled},
				#{enabled := NFenabled}, _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end}.

merge_msg_UseMultiplePaths(#{config := PFconfig,
			     state := PFstate, ebgp := PFebgp, ibgp := PFibgp},
			   #{config := NFconfig, state := NFstate,
			     ebgp := NFebgp, ibgp := NFibgp},
			   TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_UseMultiplePathsConfig(PFconfig, NFconfig,
						  TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_UseMultiplePathsState(PFstate, NFstate,
						 TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end,
      ebgp =>
	  if PFebgp /= undefined, NFebgp /= undefined ->
		 merge_msg_Ebgp(PFebgp, NFebgp, TrUserData);
	     PFebgp == undefined -> NFebgp;
	     NFebgp == undefined -> PFebgp
	  end,
      ibgp =>
	  if PFibgp /= undefined, NFibgp /= undefined ->
		 merge_msg_Ibgp(PFibgp, NFibgp, TrUserData);
	     PFibgp == undefined -> NFibgp;
	     NFibgp == undefined -> PFibgp
	  end}.

merge_msg_LongLivedGracefulRestartState(#{enabled :=
					      PFenabled,
					  received := PFreceived,
					  advertised := PFadvertised,
					  peer_restart_time :=
					      PFpeer_restart_time,
					  peer_restart_timer_expired :=
					      PFpeer_restart_timer_expired},
					#{enabled := NFenabled,
					  received := NFreceived,
					  advertised := NFadvertised,
					  peer_restart_time :=
					      NFpeer_restart_time,
					  peer_restart_timer_expired :=
					      NFpeer_restart_timer_expired},
					_) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end,
      received =>
	  if NFreceived =:= undefined -> PFreceived;
	     true -> NFreceived
	  end,
      advertised =>
	  if NFadvertised =:= undefined -> PFadvertised;
	     true -> NFadvertised
	  end,
      peer_restart_time =>
	  if NFpeer_restart_time =:= undefined ->
		 PFpeer_restart_time;
	     true -> NFpeer_restart_time
	  end,
      peer_restart_timer_expired =>
	  if NFpeer_restart_timer_expired =:= undefined ->
		 PFpeer_restart_timer_expired;
	     true -> NFpeer_restart_timer_expired
	  end}.

merge_msg_LongLivedGracefulRestartConfig(#{enabled :=
					       PFenabled,
					   restart_time := PFrestart_time},
					 #{enabled := NFenabled,
					   restart_time := NFrestart_time},
					 _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end,
      restart_time =>
	  if NFrestart_time =:= undefined -> PFrestart_time;
	     true -> NFrestart_time
	  end}.

merge_msg_LongLivedGracefulRestart(#{config := PFconfig,
				     state := PFstate},
				   #{config := NFconfig, state := NFstate},
				   TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_LongLivedGracefulRestartConfig(PFconfig,
							  NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_LongLivedGracefulRestartState(PFstate,
							 NFstate, TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_ResetNeighborResponse(_Prev, New,
				_TrUserData) ->
    New.

merge_msg_AddPathsState(#{'receive' := PFreceive,
			  send_max := PFsend_max},
			#{'receive' := NFreceive, send_max := NFsend_max}, _) ->
    #{'receive' =>
	  if NFreceive =:= undefined -> PFreceive;
	     true -> NFreceive
	  end,
      send_max =>
	  if NFsend_max =:= undefined -> PFsend_max;
	     true -> NFsend_max
	  end}.

merge_msg_AddPathsConfig(#{'receive' := PFreceive,
			   send_max := PFsend_max},
			 #{'receive' := NFreceive, send_max := NFsend_max},
			 _) ->
    #{'receive' =>
	  if NFreceive =:= undefined -> PFreceive;
	     true -> NFreceive
	  end,
      send_max =>
	  if NFsend_max =:= undefined -> PFsend_max;
	     true -> NFsend_max
	  end}.

merge_msg_AddPaths(#{config := PFconfig,
		     state := PFstate},
		   #{config := NFconfig, state := NFstate}, TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_AddPathsConfig(PFconfig, NFconfig,
					  TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_AddPathsState(PFstate, NFstate, TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_RouteTargetMembershipState(#{deferral_time :=
					   PFdeferral_time},
				     #{deferral_time := NFdeferral_time}, _) ->
    #{deferral_time =>
	  if NFdeferral_time =:= undefined -> PFdeferral_time;
	     true -> NFdeferral_time
	  end}.

merge_msg_RouteTargetMembershipConfig(#{deferral_time :=
					    PFdeferral_time},
				      #{deferral_time := NFdeferral_time}, _) ->
    #{deferral_time =>
	  if NFdeferral_time =:= undefined -> PFdeferral_time;
	     true -> NFdeferral_time
	  end}.

merge_msg_RouteTargetMembership(#{config := PFconfig,
				  state := PFstate},
				#{config := NFconfig, state := NFstate},
				TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_RouteTargetMembershipConfig(PFconfig,
						       NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_RouteTargetMembershipState(PFstate, NFstate,
						      TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_RouteSelectionOptionsState(#{always_compare_med
					   := PFalways_compare_med,
				       ignore_as_path_length :=
					   PFignore_as_path_length,
				       external_compare_router_id :=
					   PFexternal_compare_router_id,
				       advertise_inactive_routes :=
					   PFadvertise_inactive_routes,
				       enable_aigp := PFenable_aigp,
				       ignore_next_hop_igp_metric :=
					   PFignore_next_hop_igp_metric},
				     #{always_compare_med :=
					   NFalways_compare_med,
				       ignore_as_path_length :=
					   NFignore_as_path_length,
				       external_compare_router_id :=
					   NFexternal_compare_router_id,
				       advertise_inactive_routes :=
					   NFadvertise_inactive_routes,
				       enable_aigp := NFenable_aigp,
				       ignore_next_hop_igp_metric :=
					   NFignore_next_hop_igp_metric},
				     _) ->
    #{always_compare_med =>
	  if NFalways_compare_med =:= undefined ->
		 PFalways_compare_med;
	     true -> NFalways_compare_med
	  end,
      ignore_as_path_length =>
	  if NFignore_as_path_length =:= undefined ->
		 PFignore_as_path_length;
	     true -> NFignore_as_path_length
	  end,
      external_compare_router_id =>
	  if NFexternal_compare_router_id =:= undefined ->
		 PFexternal_compare_router_id;
	     true -> NFexternal_compare_router_id
	  end,
      advertise_inactive_routes =>
	  if NFadvertise_inactive_routes =:= undefined ->
		 PFadvertise_inactive_routes;
	     true -> NFadvertise_inactive_routes
	  end,
      enable_aigp =>
	  if NFenable_aigp =:= undefined -> PFenable_aigp;
	     true -> NFenable_aigp
	  end,
      ignore_next_hop_igp_metric =>
	  if NFignore_next_hop_igp_metric =:= undefined ->
		 PFignore_next_hop_igp_metric;
	     true -> NFignore_next_hop_igp_metric
	  end}.

merge_msg_RouteSelectionOptions(#{config := PFconfig,
				  state := PFstate},
				#{config := NFconfig, state := NFstate},
				TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_RouteSelectionOptionsConfig(PFconfig,
						       NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_RouteSelectionOptionsState(PFstate, NFstate,
						      TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_MpGracefulRestartState(#{enabled := PFenabled,
				   received := PFreceived,
				   advertised := PFadvertised,
				   end_of_rib_received := PFend_of_rib_received,
				   end_of_rib_sent := PFend_of_rib_sent},
				 #{enabled := NFenabled, received := NFreceived,
				   advertised := NFadvertised,
				   end_of_rib_received := NFend_of_rib_received,
				   end_of_rib_sent := NFend_of_rib_sent},
				 _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end,
      received =>
	  if NFreceived =:= undefined -> PFreceived;
	     true -> NFreceived
	  end,
      advertised =>
	  if NFadvertised =:= undefined -> PFadvertised;
	     true -> NFadvertised
	  end,
      end_of_rib_received =>
	  if NFend_of_rib_received =:= undefined ->
		 PFend_of_rib_received;
	     true -> NFend_of_rib_received
	  end,
      end_of_rib_sent =>
	  if NFend_of_rib_sent =:= undefined -> PFend_of_rib_sent;
	     true -> NFend_of_rib_sent
	  end}.

merge_msg_MpGracefulRestartConfig(#{enabled :=
					PFenabled},
				  #{enabled := NFenabled}, _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end}.

merge_msg_MpGracefulRestart(#{config := PFconfig,
			      state := PFstate},
			    #{config := NFconfig, state := NFstate},
			    TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_MpGracefulRestartConfig(PFconfig, NFconfig,
						   TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_MpGracefulRestartState(PFstate, NFstate,
						  TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_AfiSafi(#{mp_graceful_restart :=
			PFmp_graceful_restart,
		    config := PFconfig, apply_policy := PFapply_policy,
		    route_selection_options := PFroute_selection_options,
		    use_multiple_paths := PFuse_multiple_paths,
		    prefix_limits := PFprefix_limits,
		    route_target_membership := PFroute_target_membership,
		    long_lived_graceful_restart :=
			PFlong_lived_graceful_restart,
		    add_paths := PFadd_paths},
		  #{mp_graceful_restart := NFmp_graceful_restart,
		    config := NFconfig, apply_policy := NFapply_policy,
		    route_selection_options := NFroute_selection_options,
		    use_multiple_paths := NFuse_multiple_paths,
		    prefix_limits := NFprefix_limits,
		    route_target_membership := NFroute_target_membership,
		    long_lived_graceful_restart :=
			NFlong_lived_graceful_restart,
		    add_paths := NFadd_paths},
		  TrUserData) ->
    #{mp_graceful_restart =>
	  if PFmp_graceful_restart /= undefined,
	     NFmp_graceful_restart /= undefined ->
		 merge_msg_MpGracefulRestart(PFmp_graceful_restart,
					     NFmp_graceful_restart, TrUserData);
	     PFmp_graceful_restart == undefined ->
		 NFmp_graceful_restart;
	     NFmp_graceful_restart == undefined ->
		 PFmp_graceful_restart
	  end,
      config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_AfiSafiConfig(PFconfig, NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      apply_policy =>
	  if PFapply_policy /= undefined,
	     NFapply_policy /= undefined ->
		 merge_msg_ApplyPolicy(PFapply_policy, NFapply_policy,
				       TrUserData);
	     PFapply_policy == undefined -> NFapply_policy;
	     NFapply_policy == undefined -> PFapply_policy
	  end,
      route_selection_options =>
	  if PFroute_selection_options /= undefined,
	     NFroute_selection_options /= undefined ->
		 merge_msg_RouteSelectionOptions(PFroute_selection_options,
						 NFroute_selection_options,
						 TrUserData);
	     PFroute_selection_options == undefined ->
		 NFroute_selection_options;
	     NFroute_selection_options == undefined ->
		 PFroute_selection_options
	  end,
      use_multiple_paths =>
	  if PFuse_multiple_paths /= undefined,
	     NFuse_multiple_paths /= undefined ->
		 merge_msg_UseMultiplePaths(PFuse_multiple_paths,
					    NFuse_multiple_paths, TrUserData);
	     PFuse_multiple_paths == undefined ->
		 NFuse_multiple_paths;
	     NFuse_multiple_paths == undefined ->
		 PFuse_multiple_paths
	  end,
      prefix_limits =>
	  if PFprefix_limits /= undefined,
	     NFprefix_limits /= undefined ->
		 merge_msg_PrefixLimit(PFprefix_limits, NFprefix_limits,
				       TrUserData);
	     PFprefix_limits == undefined -> NFprefix_limits;
	     NFprefix_limits == undefined -> PFprefix_limits
	  end,
      route_target_membership =>
	  if PFroute_target_membership /= undefined,
	     NFroute_target_membership /= undefined ->
		 merge_msg_RouteTargetMembership(PFroute_target_membership,
						 NFroute_target_membership,
						 TrUserData);
	     PFroute_target_membership == undefined ->
		 NFroute_target_membership;
	     NFroute_target_membership == undefined ->
		 PFroute_target_membership
	  end,
      long_lived_graceful_restart =>
	  if PFlong_lived_graceful_restart /= undefined,
	     NFlong_lived_graceful_restart /= undefined ->
		 merge_msg_LongLivedGracefulRestart(PFlong_lived_graceful_restart,
						    NFlong_lived_graceful_restart,
						    TrUserData);
	     PFlong_lived_graceful_restart == undefined ->
		 NFlong_lived_graceful_restart;
	     NFlong_lived_graceful_restart == undefined ->
		 PFlong_lived_graceful_restart
	  end,
      add_paths =>
	  if PFadd_paths /= undefined, NFadd_paths /= undefined ->
		 merge_msg_AddPaths(PFadd_paths, NFadd_paths,
				    TrUserData);
	     PFadd_paths == undefined -> NFadd_paths;
	     NFadd_paths == undefined -> PFadd_paths
	  end}.

merge_msg_GracefulRestart(#{enabled := PFenabled,
			    restart_time := PFrestart_time,
			    helper_only := PFhelper_only,
			    deferral_time := PFdeferral_time,
			    notification_enabled := PFnotification_enabled,
			    longlived_enabled := PFlonglived_enabled},
			  #{enabled := NFenabled,
			    restart_time := NFrestart_time,
			    helper_only := NFhelper_only,
			    deferral_time := NFdeferral_time,
			    notification_enabled := NFnotification_enabled,
			    longlived_enabled := NFlonglived_enabled},
			  _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end,
      restart_time =>
	  if NFrestart_time =:= undefined -> PFrestart_time;
	     true -> NFrestart_time
	  end,
      helper_only =>
	  if NFhelper_only =:= undefined -> PFhelper_only;
	     true -> NFhelper_only
	  end,
      deferral_time =>
	  if NFdeferral_time =:= undefined -> PFdeferral_time;
	     true -> NFdeferral_time
	  end,
      notification_enabled =>
	  if NFnotification_enabled =:= undefined ->
		 PFnotification_enabled;
	     true -> NFnotification_enabled
	  end,
      longlived_enabled =>
	  if NFlonglived_enabled =:= undefined ->
		 PFlonglived_enabled;
	     true -> NFlonglived_enabled
	  end}.

merge_msg_RouteServer(#{route_server_client :=
			    PFroute_server_client},
		      #{route_server_client := NFroute_server_client}, _) ->
    #{route_server_client =>
	  if NFroute_server_client =:= undefined ->
		 PFroute_server_client;
	     true -> NFroute_server_client
	  end}.

merge_msg_TimersState(#{connect_retry :=
			    PFconnect_retry,
			hold_time := PFhold_time,
			keepalive_interval := PFkeepalive_interval,
			minimum_advertisement_interval :=
			    PFminimum_advertisement_interval,
			negotiated_hold_time := PFnegotiated_hold_time,
			uptime := PFuptime, downtime := PFdowntime},
		      #{connect_retry := NFconnect_retry,
			hold_time := NFhold_time,
			keepalive_interval := NFkeepalive_interval,
			minimum_advertisement_interval :=
			    NFminimum_advertisement_interval,
			negotiated_hold_time := NFnegotiated_hold_time,
			uptime := NFuptime, downtime := NFdowntime},
		      _) ->
    #{connect_retry =>
	  if NFconnect_retry =:= undefined -> PFconnect_retry;
	     true -> NFconnect_retry
	  end,
      hold_time =>
	  if NFhold_time =:= undefined -> PFhold_time;
	     true -> NFhold_time
	  end,
      keepalive_interval =>
	  if NFkeepalive_interval =:= undefined ->
		 PFkeepalive_interval;
	     true -> NFkeepalive_interval
	  end,
      minimum_advertisement_interval =>
	  if NFminimum_advertisement_interval =:= undefined ->
		 PFminimum_advertisement_interval;
	     true -> NFminimum_advertisement_interval
	  end,
      negotiated_hold_time =>
	  if NFnegotiated_hold_time =:= undefined ->
		 PFnegotiated_hold_time;
	     true -> NFnegotiated_hold_time
	  end,
      uptime =>
	  if NFuptime =:= undefined -> PFuptime;
	     true -> NFuptime
	  end,
      downtime =>
	  if NFdowntime =:= undefined -> PFdowntime;
	     true -> NFdowntime
	  end}.

merge_msg_TimersConfig(#{connect_retry :=
			     PFconnect_retry,
			 hold_time := PFhold_time,
			 keepalive_interval := PFkeepalive_interval,
			 minimum_advertisement_interval :=
			     PFminimum_advertisement_interval},
		       #{connect_retry := NFconnect_retry,
			 hold_time := NFhold_time,
			 keepalive_interval := NFkeepalive_interval,
			 minimum_advertisement_interval :=
			     NFminimum_advertisement_interval},
		       _) ->
    #{connect_retry =>
	  if NFconnect_retry =:= undefined -> PFconnect_retry;
	     true -> NFconnect_retry
	  end,
      hold_time =>
	  if NFhold_time =:= undefined -> PFhold_time;
	     true -> NFhold_time
	  end,
      keepalive_interval =>
	  if NFkeepalive_interval =:= undefined ->
		 PFkeepalive_interval;
	     true -> NFkeepalive_interval
	  end,
      minimum_advertisement_interval =>
	  if NFminimum_advertisement_interval =:= undefined ->
		 PFminimum_advertisement_interval;
	     true -> NFminimum_advertisement_interval
	  end}.

merge_msg_Timers(#{config := PFconfig,
		   state := PFstate},
		 #{config := NFconfig, state := NFstate}, TrUserData) ->
    #{config =>
	  if PFconfig /= undefined, NFconfig /= undefined ->
		 merge_msg_TimersConfig(PFconfig, NFconfig, TrUserData);
	     PFconfig == undefined -> NFconfig;
	     NFconfig == undefined -> PFconfig
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_TimersState(PFstate, NFstate, TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_Queues(#{input := PFinput,
		   output := PFoutput},
		 #{input := NFinput, output := NFoutput}, _) ->
    #{input =>
	  if NFinput =:= undefined -> PFinput;
	     true -> NFinput
	  end,
      output =>
	  if NFoutput =:= undefined -> PFoutput;
	     true -> NFoutput
	  end}.

merge_msg_Message(#{'NOTIFICATION' := PFNOTIFICATION,
		    'UPDATE' := PFUPDATE, 'OPEN' := PFOPEN,
		    'KEEPALIVE' := PFKEEPALIVE, 'REFRESH' := PFREFRESH,
		    'DISCARDED' := PFDISCARDED, 'TOTAL' := PFTOTAL},
		  #{'NOTIFICATION' := NFNOTIFICATION,
		    'UPDATE' := NFUPDATE, 'OPEN' := NFOPEN,
		    'KEEPALIVE' := NFKEEPALIVE, 'REFRESH' := NFREFRESH,
		    'DISCARDED' := NFDISCARDED, 'TOTAL' := NFTOTAL},
		  _) ->
    #{'NOTIFICATION' =>
	  if NFNOTIFICATION =:= undefined -> PFNOTIFICATION;
	     true -> NFNOTIFICATION
	  end,
      'UPDATE' =>
	  if NFUPDATE =:= undefined -> PFUPDATE;
	     true -> NFUPDATE
	  end,
      'OPEN' =>
	  if NFOPEN =:= undefined -> PFOPEN;
	     true -> NFOPEN
	  end,
      'KEEPALIVE' =>
	  if NFKEEPALIVE =:= undefined -> PFKEEPALIVE;
	     true -> NFKEEPALIVE
	  end,
      'REFRESH' =>
	  if NFREFRESH =:= undefined -> PFREFRESH;
	     true -> NFREFRESH
	  end,
      'DISCARDED' =>
	  if NFDISCARDED =:= undefined -> PFDISCARDED;
	     true -> NFDISCARDED
	  end,
      'TOTAL' =>
	  if NFTOTAL =:= undefined -> PFTOTAL;
	     true -> NFTOTAL
	  end}.

merge_msg_Messages(#{received := PFreceived,
		     sent := PFsent},
		   #{received := NFreceived, sent := NFsent},
		   TrUserData) ->
    #{received =>
	  if PFreceived /= undefined, NFreceived /= undefined ->
		 merge_msg_Message(PFreceived, NFreceived, TrUserData);
	     PFreceived == undefined -> NFreceived;
	     NFreceived == undefined -> PFreceived
	  end,
      sent =>
	  if PFsent /= undefined, NFsent /= undefined ->
		 merge_msg_Message(PFsent, NFsent, TrUserData);
	     PFsent == undefined -> NFsent;
	     NFsent == undefined -> PFsent
	  end}.

merge_msg_PeerState(#{auth_password := PFauth_password,
		      description := PFdescription, local_as := PFlocal_as,
		      messages := PFmessages,
		      neighbor_address := PFneighbor_address,
		      peer_as := PFpeer_as, peer_group := PFpeer_group,
		      peer_type := PFpeer_type, queues := PFqueues,
		      remove_private_as := PFremove_private_as,
		      route_flap_damping := PFroute_flap_damping,
		      send_community := PFsend_community,
		      session_state := PFsession_state,
		      supported_capabilities := PFsupported_capabilities,
		      bgp_state := PFbgp_state, admin_state := PFadmin_state,
		      received := PFreceived, accepted := PFaccepted,
		      advertised := PFadvertised, out_q := PFout_q,
		      flops := PFflops},
		    #{auth_password := NFauth_password,
		      description := NFdescription, local_as := NFlocal_as,
		      messages := NFmessages,
		      neighbor_address := NFneighbor_address,
		      peer_as := NFpeer_as, peer_group := NFpeer_group,
		      peer_type := NFpeer_type, queues := NFqueues,
		      remove_private_as := NFremove_private_as,
		      route_flap_damping := NFroute_flap_damping,
		      send_community := NFsend_community,
		      session_state := NFsession_state,
		      supported_capabilities := NFsupported_capabilities,
		      bgp_state := NFbgp_state, admin_state := NFadmin_state,
		      received := NFreceived, accepted := NFaccepted,
		      advertised := NFadvertised, out_q := NFout_q,
		      flops := NFflops},
		    TrUserData) ->
    #{auth_password =>
	  if NFauth_password =:= undefined -> PFauth_password;
	     true -> NFauth_password
	  end,
      description =>
	  if NFdescription =:= undefined -> PFdescription;
	     true -> NFdescription
	  end,
      local_as =>
	  if NFlocal_as =:= undefined -> PFlocal_as;
	     true -> NFlocal_as
	  end,
      messages =>
	  if PFmessages /= undefined, NFmessages /= undefined ->
		 merge_msg_Messages(PFmessages, NFmessages, TrUserData);
	     PFmessages == undefined -> NFmessages;
	     NFmessages == undefined -> PFmessages
	  end,
      neighbor_address =>
	  if NFneighbor_address =:= undefined ->
		 PFneighbor_address;
	     true -> NFneighbor_address
	  end,
      peer_as =>
	  if NFpeer_as =:= undefined -> PFpeer_as;
	     true -> NFpeer_as
	  end,
      peer_group =>
	  if NFpeer_group =:= undefined -> PFpeer_group;
	     true -> NFpeer_group
	  end,
      peer_type =>
	  if NFpeer_type =:= undefined -> PFpeer_type;
	     true -> NFpeer_type
	  end,
      queues =>
	  if PFqueues /= undefined, NFqueues /= undefined ->
		 merge_msg_Queues(PFqueues, NFqueues, TrUserData);
	     PFqueues == undefined -> NFqueues;
	     NFqueues == undefined -> PFqueues
	  end,
      remove_private_as =>
	  if NFremove_private_as =:= undefined ->
		 PFremove_private_as;
	     true -> NFremove_private_as
	  end,
      route_flap_damping =>
	  if NFroute_flap_damping =:= undefined ->
		 PFroute_flap_damping;
	     true -> NFroute_flap_damping
	  end,
      send_community =>
	  if NFsend_community =:= undefined -> PFsend_community;
	     true -> NFsend_community
	  end,
      session_state =>
	  if NFsession_state =:= undefined -> PFsession_state;
	     true -> NFsession_state
	  end,
      supported_capabilities =>
	  if PFsupported_capabilities /= undefined,
	     NFsupported_capabilities /= undefined ->
		 'erlang_++'(PFsupported_capabilities,
			     NFsupported_capabilities, TrUserData);
	     PFsupported_capabilities == undefined ->
		 NFsupported_capabilities;
	     NFsupported_capabilities == undefined ->
		 PFsupported_capabilities
	  end,
      bgp_state =>
	  if NFbgp_state =:= undefined -> PFbgp_state;
	     true -> NFbgp_state
	  end,
      admin_state =>
	  if NFadmin_state =:= undefined -> PFadmin_state;
	     true -> NFadmin_state
	  end,
      received =>
	  if NFreceived =:= undefined -> PFreceived;
	     true -> NFreceived
	  end,
      accepted =>
	  if NFaccepted =:= undefined -> PFaccepted;
	     true -> NFaccepted
	  end,
      advertised =>
	  if NFadvertised =:= undefined -> PFadvertised;
	     true -> NFadvertised
	  end,
      out_q =>
	  if NFout_q =:= undefined -> PFout_q;
	     true -> NFout_q
	  end,
      flops =>
	  if NFflops =:= undefined -> PFflops;
	     true -> NFflops
	  end}.

merge_msg_RouteReflector(#{route_reflector_client :=
			       PFroute_reflector_client,
			   route_reflector_cluster_id :=
			       PFroute_reflector_cluster_id},
			 #{route_reflector_client := NFroute_reflector_client,
			   route_reflector_cluster_id :=
			       NFroute_reflector_cluster_id},
			 _) ->
    #{route_reflector_client =>
	  if NFroute_reflector_client =:= undefined ->
		 PFroute_reflector_client;
	     true -> NFroute_reflector_client
	  end,
      route_reflector_cluster_id =>
	  if NFroute_reflector_cluster_id =:= undefined ->
		 PFroute_reflector_cluster_id;
	     true -> NFroute_reflector_cluster_id
	  end}.

merge_msg_EbgpMultihop(#{enabled := PFenabled,
			 multihop_ttl := PFmultihop_ttl},
		       #{enabled := NFenabled, multihop_ttl := NFmultihop_ttl},
		       _) ->
    #{enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end,
      multihop_ttl =>
	  if NFmultihop_ttl =:= undefined -> PFmultihop_ttl;
	     true -> NFmultihop_ttl
	  end}.

merge_msg_Peer(#{families := PFfamilies,
		 apply_policy := PFapply_policy, conf := PFconf,
		 ebgp_multihop := PFebgp_multihop,
		 route_reflector := PFroute_reflector, info := PFinfo,
		 timers := PFtimers, transport := PFtransport,
		 route_server := PFroute_server,
		 graceful_restart := PFgraceful_restart,
		 afi_safis := PFafi_safis, add_paths := PFadd_paths},
	       #{families := NFfamilies,
		 apply_policy := NFapply_policy, conf := NFconf,
		 ebgp_multihop := NFebgp_multihop,
		 route_reflector := NFroute_reflector, info := NFinfo,
		 timers := NFtimers, transport := NFtransport,
		 route_server := NFroute_server,
		 graceful_restart := NFgraceful_restart,
		 afi_safis := NFafi_safis, add_paths := NFadd_paths},
	       TrUserData) ->
    #{families =>
	  if PFfamilies /= undefined, NFfamilies /= undefined ->
		 'erlang_++'(PFfamilies, NFfamilies, TrUserData);
	     PFfamilies == undefined -> NFfamilies;
	     NFfamilies == undefined -> PFfamilies
	  end,
      apply_policy =>
	  if PFapply_policy /= undefined,
	     NFapply_policy /= undefined ->
		 merge_msg_ApplyPolicy(PFapply_policy, NFapply_policy,
				       TrUserData);
	     PFapply_policy == undefined -> NFapply_policy;
	     NFapply_policy == undefined -> PFapply_policy
	  end,
      conf =>
	  if PFconf /= undefined, NFconf /= undefined ->
		 merge_msg_PeerConf(PFconf, NFconf, TrUserData);
	     PFconf == undefined -> NFconf;
	     NFconf == undefined -> PFconf
	  end,
      ebgp_multihop =>
	  if PFebgp_multihop /= undefined,
	     NFebgp_multihop /= undefined ->
		 merge_msg_EbgpMultihop(PFebgp_multihop, NFebgp_multihop,
					TrUserData);
	     PFebgp_multihop == undefined -> NFebgp_multihop;
	     NFebgp_multihop == undefined -> PFebgp_multihop
	  end,
      route_reflector =>
	  if PFroute_reflector /= undefined,
	     NFroute_reflector /= undefined ->
		 merge_msg_RouteReflector(PFroute_reflector,
					  NFroute_reflector, TrUserData);
	     PFroute_reflector == undefined -> NFroute_reflector;
	     NFroute_reflector == undefined -> PFroute_reflector
	  end,
      info =>
	  if PFinfo /= undefined, NFinfo /= undefined ->
		 merge_msg_PeerState(PFinfo, NFinfo, TrUserData);
	     PFinfo == undefined -> NFinfo;
	     NFinfo == undefined -> PFinfo
	  end,
      timers =>
	  if PFtimers /= undefined, NFtimers /= undefined ->
		 merge_msg_Timers(PFtimers, NFtimers, TrUserData);
	     PFtimers == undefined -> NFtimers;
	     NFtimers == undefined -> PFtimers
	  end,
      transport =>
	  if PFtransport /= undefined, NFtransport /= undefined ->
		 merge_msg_Transport(PFtransport, NFtransport,
				     TrUserData);
	     PFtransport == undefined -> NFtransport;
	     NFtransport == undefined -> PFtransport
	  end,
      route_server =>
	  if PFroute_server /= undefined,
	     NFroute_server /= undefined ->
		 merge_msg_RouteServer(PFroute_server, NFroute_server,
				       TrUserData);
	     PFroute_server == undefined -> NFroute_server;
	     NFroute_server == undefined -> PFroute_server
	  end,
      graceful_restart =>
	  if PFgraceful_restart /= undefined,
	     NFgraceful_restart /= undefined ->
		 merge_msg_GracefulRestart(PFgraceful_restart,
					   NFgraceful_restart, TrUserData);
	     PFgraceful_restart == undefined -> NFgraceful_restart;
	     NFgraceful_restart == undefined -> PFgraceful_restart
	  end,
      afi_safis =>
	  if PFafi_safis /= undefined, NFafi_safis /= undefined ->
		 'erlang_++'(PFafi_safis, NFafi_safis, TrUserData);
	     PFafi_safis == undefined -> NFafi_safis;
	     NFafi_safis == undefined -> PFafi_safis
	  end,
      add_paths =>
	  if PFadd_paths /= undefined, NFadd_paths /= undefined ->
		 merge_msg_AddPaths(PFadd_paths, NFadd_paths,
				    TrUserData);
	     PFadd_paths == undefined -> NFadd_paths;
	     NFadd_paths == undefined -> PFadd_paths
	  end}.

merge_msg_AddNeighborRequest(#{peer := PFpeer},
			     #{peer := NFpeer}, TrUserData) ->
    #{peer =>
	  if PFpeer /= undefined, NFpeer /= undefined ->
		 merge_msg_Peer(PFpeer, NFpeer, TrUserData);
	     PFpeer == undefined -> NFpeer;
	     NFpeer == undefined -> PFpeer
	  end}.

merge_msg_ValidateRibRequest(#{type := PFtype,
			       family := PFfamily, prefix := PFprefix},
			     #{type := NFtype, family := NFfamily,
			       prefix := NFprefix},
			     _) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      prefix =>
	  if NFprefix =:= undefined -> PFprefix;
	     true -> NFprefix
	  end}.

merge_msg_DeletePolicyAssignmentRequest(#{assignment :=
					      PFassignment,
					  all := PFall},
					#{assignment := NFassignment,
					  all := NFall},
					TrUserData) ->
    #{assignment =>
	  if PFassignment /= undefined,
	     NFassignment /= undefined ->
		 merge_msg_PolicyAssignment(PFassignment, NFassignment,
					    TrUserData);
	     PFassignment == undefined -> NFassignment;
	     NFassignment == undefined -> PFassignment
	  end,
      all =>
	  if NFall =:= undefined -> PFall;
	     true -> NFall
	  end}.

merge_msg_RPKIValidation(#{state := PFstate,
			   reason := PFreason, matched := PFmatched,
			   unmatched_as := PFunmatched_as,
			   unmatched_length := PFunmatched_length},
			 #{state := NFstate, reason := NFreason,
			   matched := NFmatched, unmatched_as := NFunmatched_as,
			   unmatched_length := NFunmatched_length},
			 TrUserData) ->
    #{state =>
	  if NFstate =:= undefined -> PFstate;
	     true -> NFstate
	  end,
      reason =>
	  if NFreason =:= undefined -> PFreason;
	     true -> NFreason
	  end,
      matched =>
	  if PFmatched /= undefined, NFmatched /= undefined ->
		 'erlang_++'(PFmatched, NFmatched, TrUserData);
	     PFmatched == undefined -> NFmatched;
	     NFmatched == undefined -> PFmatched
	  end,
      unmatched_as =>
	  if PFunmatched_as /= undefined,
	     NFunmatched_as /= undefined ->
		 'erlang_++'(PFunmatched_as, NFunmatched_as, TrUserData);
	     PFunmatched_as == undefined -> NFunmatched_as;
	     NFunmatched_as == undefined -> PFunmatched_as
	  end,
      unmatched_length =>
	  if PFunmatched_length /= undefined,
	     NFunmatched_length /= undefined ->
		 'erlang_++'(PFunmatched_length, NFunmatched_length,
			     TrUserData);
	     PFunmatched_length == undefined -> NFunmatched_length;
	     NFunmatched_length == undefined -> PFunmatched_length
	  end}.

merge_msg_Path(#{nlri := PFnlri, pattrs := PFpattrs,
		 age := PFage, best := PFbest,
		 is_withdraw := PFis_withdraw,
		 validation := PFvalidation,
		 validation_detail := PFvalidation_detail,
		 no_implicit_withdraw := PFno_implicit_withdraw,
		 family := PFfamily, source_asn := PFsource_asn,
		 source_id := PFsource_id, filtered := PFfiltered,
		 stale := PFstale,
		 is_from_external := PFis_from_external,
		 neighbor_ip := PFneighbor_ip, uuid := PFuuid,
		 is_nexthop_invalid := PFis_nexthop_invalid,
		 identifier := PFidentifier,
		 local_identifier := PFlocal_identifier},
	       #{nlri := NFnlri, pattrs := NFpattrs, age := NFage,
		 best := NFbest, is_withdraw := NFis_withdraw,
		 validation := NFvalidation,
		 validation_detail := NFvalidation_detail,
		 no_implicit_withdraw := NFno_implicit_withdraw,
		 family := NFfamily, source_asn := NFsource_asn,
		 source_id := NFsource_id, filtered := NFfiltered,
		 stale := NFstale,
		 is_from_external := NFis_from_external,
		 neighbor_ip := NFneighbor_ip, uuid := NFuuid,
		 is_nexthop_invalid := NFis_nexthop_invalid,
		 identifier := NFidentifier,
		 local_identifier := NFlocal_identifier},
	       TrUserData) ->
    #{nlri =>
	  if NFnlri =:= undefined -> PFnlri;
	     true -> NFnlri
	  end,
      pattrs =>
	  if PFpattrs /= undefined, NFpattrs /= undefined ->
		 'erlang_++'(PFpattrs, NFpattrs, TrUserData);
	     PFpattrs == undefined -> NFpattrs;
	     NFpattrs == undefined -> PFpattrs
	  end,
      age =>
	  if NFage =:= undefined -> PFage;
	     true -> NFage
	  end,
      best =>
	  if NFbest =:= undefined -> PFbest;
	     true -> NFbest
	  end,
      is_withdraw =>
	  if NFis_withdraw =:= undefined -> PFis_withdraw;
	     true -> NFis_withdraw
	  end,
      validation =>
	  if NFvalidation =:= undefined -> PFvalidation;
	     true -> NFvalidation
	  end,
      validation_detail =>
	  if PFvalidation_detail /= undefined,
	     NFvalidation_detail /= undefined ->
		 merge_msg_RPKIValidation(PFvalidation_detail,
					  NFvalidation_detail, TrUserData);
	     PFvalidation_detail == undefined -> NFvalidation_detail;
	     NFvalidation_detail == undefined -> PFvalidation_detail
	  end,
      no_implicit_withdraw =>
	  if NFno_implicit_withdraw =:= undefined ->
		 PFno_implicit_withdraw;
	     true -> NFno_implicit_withdraw
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      source_asn =>
	  if NFsource_asn =:= undefined -> PFsource_asn;
	     true -> NFsource_asn
	  end,
      source_id =>
	  if NFsource_id =:= undefined -> PFsource_id;
	     true -> NFsource_id
	  end,
      filtered =>
	  if NFfiltered =:= undefined -> PFfiltered;
	     true -> NFfiltered
	  end,
      stale =>
	  if NFstale =:= undefined -> PFstale;
	     true -> NFstale
	  end,
      is_from_external =>
	  if NFis_from_external =:= undefined ->
		 PFis_from_external;
	     true -> NFis_from_external
	  end,
      neighbor_ip =>
	  if NFneighbor_ip =:= undefined -> PFneighbor_ip;
	     true -> NFneighbor_ip
	  end,
      uuid =>
	  if NFuuid =:= undefined -> PFuuid;
	     true -> NFuuid
	  end,
      is_nexthop_invalid =>
	  if NFis_nexthop_invalid =:= undefined ->
		 PFis_nexthop_invalid;
	     true -> NFis_nexthop_invalid
	  end,
      identifier =>
	  if NFidentifier =:= undefined -> PFidentifier;
	     true -> NFidentifier
	  end,
      local_identifier =>
	  if NFlocal_identifier =:= undefined ->
		 PFlocal_identifier;
	     true -> NFlocal_identifier
	  end}.

merge_msg_Destination(#{prefix := PFprefix,
			paths := PFpaths, longer_prefixes := PFlonger_prefixes,
			shorter_prefixes := PFshorter_prefixes},
		      #{prefix := NFprefix, paths := NFpaths,
			longer_prefixes := NFlonger_prefixes,
			shorter_prefixes := NFshorter_prefixes},
		      TrUserData) ->
    #{prefix =>
	  if NFprefix =:= undefined -> PFprefix;
	     true -> NFprefix
	  end,
      paths =>
	  if PFpaths /= undefined, NFpaths /= undefined ->
		 'erlang_++'(PFpaths, NFpaths, TrUserData);
	     PFpaths == undefined -> NFpaths;
	     NFpaths == undefined -> PFpaths
	  end,
      longer_prefixes =>
	  if NFlonger_prefixes =:= undefined -> PFlonger_prefixes;
	     true -> NFlonger_prefixes
	  end,
      shorter_prefixes =>
	  if NFshorter_prefixes =:= undefined ->
		 PFshorter_prefixes;
	     true -> NFshorter_prefixes
	  end}.

merge_msg_Table(#{type := PFtype, name := PFname,
		  family := PFfamily, destinations := PFdestinations,
		  post_policy := PFpost_policy},
		#{type := NFtype, name := NFname, family := NFfamily,
		  destinations := NFdestinations,
		  post_policy := NFpost_policy},
		TrUserData) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      destinations =>
	  if PFdestinations /= undefined,
	     NFdestinations /= undefined ->
		 'erlang_++'(PFdestinations, NFdestinations, TrUserData);
	     PFdestinations == undefined -> NFdestinations;
	     NFdestinations == undefined -> PFdestinations
	  end,
      post_policy =>
	  if NFpost_policy =:= undefined -> PFpost_policy;
	     true -> NFpost_policy
	  end}.

merge_msg_MonitorRibRequest(#{table := PFtable,
			      current := PFcurrent},
			    #{table := NFtable, current := NFcurrent},
			    TrUserData) ->
    #{table =>
	  if PFtable /= undefined, NFtable /= undefined ->
		 merge_msg_Table(PFtable, NFtable, TrUserData);
	     PFtable == undefined -> NFtable;
	     NFtable == undefined -> PFtable
	  end,
      current =>
	  if NFcurrent =:= undefined -> PFcurrent;
	     true -> NFcurrent
	  end}.

merge_msg_ShutdownNeighborResponse(_Prev, New,
				   _TrUserData) ->
    New.

merge_msg_AddRpkiResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_AddPolicyRequest(#{policy := PFpolicy,
			     refer_existing_statements :=
				 PFrefer_existing_statements},
			   #{policy := NFpolicy,
			     refer_existing_statements :=
				 NFrefer_existing_statements},
			   TrUserData) ->
    #{policy =>
	  if PFpolicy /= undefined, NFpolicy /= undefined ->
		 merge_msg_Policy(PFpolicy, NFpolicy, TrUserData);
	     PFpolicy == undefined -> NFpolicy;
	     NFpolicy == undefined -> PFpolicy
	  end,
      refer_existing_statements =>
	  if NFrefer_existing_statements =:= undefined ->
		 PFrefer_existing_statements;
	     true -> NFrefer_existing_statements
	  end}.

merge_msg_RPKIState(#{uptime := PFuptime,
		      downtime := PFdowntime, up := PFup,
		      record_ipv4 := PFrecord_ipv4,
		      record_ipv6 := PFrecord_ipv6,
		      prefix_ipv4 := PFprefix_ipv4,
		      prefix_ipv6 := PFprefix_ipv6, serial := PFserial,
		      received_ipv4 := PFreceived_ipv4,
		      received_ipv6 := PFreceived_ipv6,
		      serial_notify := PFserial_notify,
		      cache_reset := PFcache_reset,
		      cache_response := PFcache_response,
		      end_of_data := PFend_of_data, error := PFerror,
		      serial_query := PFserial_query,
		      reset_query := PFreset_query},
		    #{uptime := NFuptime, downtime := NFdowntime,
		      up := NFup, record_ipv4 := NFrecord_ipv4,
		      record_ipv6 := NFrecord_ipv6,
		      prefix_ipv4 := NFprefix_ipv4,
		      prefix_ipv6 := NFprefix_ipv6, serial := NFserial,
		      received_ipv4 := NFreceived_ipv4,
		      received_ipv6 := NFreceived_ipv6,
		      serial_notify := NFserial_notify,
		      cache_reset := NFcache_reset,
		      cache_response := NFcache_response,
		      end_of_data := NFend_of_data, error := NFerror,
		      serial_query := NFserial_query,
		      reset_query := NFreset_query},
		    _) ->
    #{uptime =>
	  if NFuptime =:= undefined -> PFuptime;
	     true -> NFuptime
	  end,
      downtime =>
	  if NFdowntime =:= undefined -> PFdowntime;
	     true -> NFdowntime
	  end,
      up =>
	  if NFup =:= undefined -> PFup;
	     true -> NFup
	  end,
      record_ipv4 =>
	  if NFrecord_ipv4 =:= undefined -> PFrecord_ipv4;
	     true -> NFrecord_ipv4
	  end,
      record_ipv6 =>
	  if NFrecord_ipv6 =:= undefined -> PFrecord_ipv6;
	     true -> NFrecord_ipv6
	  end,
      prefix_ipv4 =>
	  if NFprefix_ipv4 =:= undefined -> PFprefix_ipv4;
	     true -> NFprefix_ipv4
	  end,
      prefix_ipv6 =>
	  if NFprefix_ipv6 =:= undefined -> PFprefix_ipv6;
	     true -> NFprefix_ipv6
	  end,
      serial =>
	  if NFserial =:= undefined -> PFserial;
	     true -> NFserial
	  end,
      received_ipv4 =>
	  if NFreceived_ipv4 =:= undefined -> PFreceived_ipv4;
	     true -> NFreceived_ipv4
	  end,
      received_ipv6 =>
	  if NFreceived_ipv6 =:= undefined -> PFreceived_ipv6;
	     true -> NFreceived_ipv6
	  end,
      serial_notify =>
	  if NFserial_notify =:= undefined -> PFserial_notify;
	     true -> NFserial_notify
	  end,
      cache_reset =>
	  if NFcache_reset =:= undefined -> PFcache_reset;
	     true -> NFcache_reset
	  end,
      cache_response =>
	  if NFcache_response =:= undefined -> PFcache_response;
	     true -> NFcache_response
	  end,
      end_of_data =>
	  if NFend_of_data =:= undefined -> PFend_of_data;
	     true -> NFend_of_data
	  end,
      error =>
	  if NFerror =:= undefined -> PFerror;
	     true -> NFerror
	  end,
      serial_query =>
	  if NFserial_query =:= undefined -> PFserial_query;
	     true -> NFserial_query
	  end,
      reset_query =>
	  if NFreset_query =:= undefined -> PFreset_query;
	     true -> NFreset_query
	  end}.

merge_msg_Rpki(#{conf := PFconf, state := PFstate},
	       #{conf := NFconf, state := NFstate}, TrUserData) ->
    #{conf =>
	  if PFconf /= undefined, NFconf /= undefined ->
		 merge_msg_RPKIConf(PFconf, NFconf, TrUserData);
	     PFconf == undefined -> NFconf;
	     NFconf == undefined -> PFconf
	  end,
      state =>
	  if PFstate /= undefined, NFstate /= undefined ->
		 merge_msg_RPKIState(PFstate, NFstate, TrUserData);
	     PFstate == undefined -> NFstate;
	     NFstate == undefined -> PFstate
	  end}.

merge_msg_AddPathRequest(#{resource := PFresource,
			   vrf_id := PFvrf_id, path := PFpath},
			 #{resource := NFresource, vrf_id := NFvrf_id,
			   path := NFpath},
			 TrUserData) ->
    #{resource =>
	  if NFresource =:= undefined -> PFresource;
	     true -> NFresource
	  end,
      vrf_id =>
	  if NFvrf_id =:= undefined -> PFvrf_id;
	     true -> NFvrf_id
	  end,
      path =>
	  if PFpath /= undefined, NFpath /= undefined ->
		 merge_msg_Path(PFpath, NFpath, TrUserData);
	     PFpath == undefined -> NFpath;
	     NFpath == undefined -> PFpath
	  end}.

merge_msg_ResetRpkiResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_ResetRpkiRequest(#{address := PFaddress},
			   #{address := NFaddress}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end}.

merge_msg_SoftResetNeighborRequest(#{address :=
					 PFaddress,
				     direction := PFdirection},
				   #{address := NFaddress,
				     direction := NFdirection},
				   _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      direction =>
	  if NFdirection =:= undefined -> PFdirection;
	     true -> NFdirection
	  end}.

merge_msg_AddPolicyResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_EnableNeighborRequest(#{address := PFaddress},
				#{address := NFaddress}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end}.

merge_msg_AddPathResponse(#{uuid := PFuuid},
			  #{uuid := NFuuid}, _) ->
    #{uuid =>
	  if NFuuid =:= undefined -> PFuuid;
	     true -> NFuuid
	  end}.

merge_msg_Vrf(#{name := PFname, rd := PFrd,
		import_rt := PFimport_rt, export_rt := PFexport_rt,
		id := PFid},
	      #{name := NFname, rd := NFrd, import_rt := NFimport_rt,
		export_rt := NFexport_rt, id := NFid},
	      TrUserData) ->
    #{name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      rd =>
	  if NFrd =:= undefined -> PFrd;
	     true -> NFrd
	  end,
      import_rt =>
	  if PFimport_rt /= undefined, NFimport_rt /= undefined ->
		 'erlang_++'(PFimport_rt, NFimport_rt, TrUserData);
	     PFimport_rt == undefined -> NFimport_rt;
	     NFimport_rt == undefined -> PFimport_rt
	  end,
      export_rt =>
	  if PFexport_rt /= undefined, NFexport_rt /= undefined ->
		 'erlang_++'(PFexport_rt, NFexport_rt, TrUserData);
	     PFexport_rt == undefined -> NFexport_rt;
	     NFexport_rt == undefined -> PFexport_rt
	  end,
      id =>
	  if NFid =:= undefined -> PFid;
	     true -> NFid
	  end}.

merge_msg_GetVrfResponse(#{vrfs := PFvrfs},
			 #{vrfs := NFvrfs}, TrUserData) ->
    #{vrfs =>
	  if PFvrfs /= undefined, NFvrfs /= undefined ->
		 'erlang_++'(PFvrfs, NFvrfs, TrUserData);
	     PFvrfs == undefined -> NFvrfs;
	     NFvrfs == undefined -> PFvrfs
	  end}.

merge_msg_SoftResetRpkiRequest(#{address := PFaddress},
			       #{address := NFaddress}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end}.

merge_msg_StopServerRequest(_Prev, New, _TrUserData) ->
    New.

merge_msg_AddBmpResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_GetRpkiRequest(#{family := PFfamily},
			 #{family := NFfamily}, _) ->
    #{family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end}.

merge_msg_DeleteNeighborRequest(#{peer := PFpeer},
				#{peer := NFpeer}, TrUserData) ->
    #{peer =>
	  if PFpeer /= undefined, NFpeer /= undefined ->
		 merge_msg_Peer(PFpeer, NFpeer, TrUserData);
	     PFpeer == undefined -> NFpeer;
	     NFpeer == undefined -> PFpeer
	  end}.

merge_msg_AfiSafiState(#{family := PFfamily,
			 enabled := PFenabled, total_paths := PFtotal_paths,
			 total_prefixes := PFtotal_prefixes},
		       #{family := NFfamily, enabled := NFenabled,
			 total_paths := NFtotal_paths,
			 total_prefixes := NFtotal_prefixes},
		       _) ->
    #{family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      enabled =>
	  if NFenabled =:= undefined -> PFenabled;
	     true -> NFenabled
	  end,
      total_paths =>
	  if NFtotal_paths =:= undefined -> PFtotal_paths;
	     true -> NFtotal_paths
	  end,
      total_prefixes =>
	  if NFtotal_prefixes =:= undefined -> PFtotal_prefixes;
	     true -> NFtotal_prefixes
	  end}.

merge_msg_GetServerResponse(#{global := PFglobal},
			    #{global := NFglobal}, TrUserData) ->
    #{global =>
	  if PFglobal /= undefined, NFglobal /= undefined ->
		 merge_msg_Global(PFglobal, NFglobal, TrUserData);
	     PFglobal == undefined -> NFglobal;
	     NFglobal == undefined -> PFglobal
	  end}.

merge_msg_EnableMrtResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_InjectMrtRequest(#{resource := PFresource,
			     vrf_id := PFvrf_id, paths := PFpaths},
			   #{resource := NFresource, vrf_id := NFvrf_id,
			     paths := NFpaths},
			   TrUserData) ->
    #{resource =>
	  if NFresource =:= undefined -> PFresource;
	     true -> NFresource
	  end,
      vrf_id =>
	  if NFvrf_id =:= undefined -> PFvrf_id;
	     true -> NFvrf_id
	  end,
      paths =>
	  if PFpaths /= undefined, NFpaths /= undefined ->
		 'erlang_++'(PFpaths, NFpaths, TrUserData);
	     PFpaths == undefined -> NFpaths;
	     NFpaths == undefined -> PFpaths
	  end}.

merge_msg_Prefix(#{ip_prefix := PFip_prefix,
		   mask_length_min := PFmask_length_min,
		   mask_length_max := PFmask_length_max},
		 #{ip_prefix := NFip_prefix,
		   mask_length_min := NFmask_length_min,
		   mask_length_max := NFmask_length_max},
		 _) ->
    #{ip_prefix =>
	  if NFip_prefix =:= undefined -> PFip_prefix;
	     true -> NFip_prefix
	  end,
      mask_length_min =>
	  if NFmask_length_min =:= undefined -> PFmask_length_min;
	     true -> NFmask_length_min
	  end,
      mask_length_max =>
	  if NFmask_length_max =:= undefined -> PFmask_length_max;
	     true -> NFmask_length_max
	  end}.

merge_msg_DefinedSet(#{type := PFtype, name := PFname,
		       list := PFlist, prefixes := PFprefixes},
		     #{type := NFtype, name := NFname, list := NFlist,
		       prefixes := NFprefixes},
		     TrUserData) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      list =>
	  if PFlist /= undefined, NFlist /= undefined ->
		 'erlang_++'(PFlist, NFlist, TrUserData);
	     PFlist == undefined -> NFlist;
	     NFlist == undefined -> PFlist
	  end,
      prefixes =>
	  if PFprefixes /= undefined, NFprefixes /= undefined ->
		 'erlang_++'(PFprefixes, NFprefixes, TrUserData);
	     PFprefixes == undefined -> NFprefixes;
	     NFprefixes == undefined -> PFprefixes
	  end}.

merge_msg_AddDefinedSetRequest(#{set := PFset},
			       #{set := NFset}, TrUserData) ->
    #{set =>
	  if PFset /= undefined, NFset /= undefined ->
		 merge_msg_DefinedSet(PFset, NFset, TrUserData);
	     PFset == undefined -> NFset;
	     NFset == undefined -> PFset
	  end}.

merge_msg_ReplacePolicyAssignmentRequest(#{assignment :=
					       PFassignment},
					 #{assignment := NFassignment},
					 TrUserData) ->
    #{assignment =>
	  if PFassignment /= undefined,
	     NFassignment /= undefined ->
		 merge_msg_PolicyAssignment(PFassignment, NFassignment,
					    TrUserData);
	     PFassignment == undefined -> NFassignment;
	     NFassignment == undefined -> PFassignment
	  end}.

merge_msg_DeletePathResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_DeletePolicyRequest(#{policy := PFpolicy,
				preserve_statements := PFpreserve_statements,
				all := PFall},
			      #{policy := NFpolicy,
				preserve_statements := NFpreserve_statements,
				all := NFall},
			      TrUserData) ->
    #{policy =>
	  if PFpolicy /= undefined, NFpolicy /= undefined ->
		 merge_msg_Policy(PFpolicy, NFpolicy, TrUserData);
	     PFpolicy == undefined -> NFpolicy;
	     NFpolicy == undefined -> PFpolicy
	  end,
      preserve_statements =>
	  if NFpreserve_statements =:= undefined ->
		 PFpreserve_statements;
	     true -> NFpreserve_statements
	  end,
      all =>
	  if NFall =:= undefined -> PFall;
	     true -> NFall
	  end}.

merge_msg_DeleteVrfRequest(#{vrf := PFvrf},
			   #{vrf := NFvrf}, TrUserData) ->
    #{vrf =>
	  if PFvrf /= undefined, NFvrf /= undefined ->
		 merge_msg_Vrf(PFvrf, NFvrf, TrUserData);
	     PFvrf == undefined -> NFvrf;
	     NFvrf == undefined -> PFvrf
	  end}.

merge_msg_GetPolicyAssignmentResponse(#{assignment :=
					    PFassignment},
				      #{assignment := NFassignment},
				      TrUserData) ->
    #{assignment =>
	  if PFassignment /= undefined,
	     NFassignment /= undefined ->
		 merge_msg_PolicyAssignment(PFassignment, NFassignment,
					    TrUserData);
	     PFassignment == undefined -> NFassignment;
	     NFassignment == undefined -> PFassignment
	  end}.

merge_msg_DeleteDefinedSetResponse(_Prev, New,
				   _TrUserData) ->
    New.

merge_msg_ReplacePolicyAssignmentResponse(_Prev, New,
					  _TrUserData) ->
    New.

merge_msg_GetServerRequest(_Prev, New, _TrUserData) ->
    New.

merge_msg_AddBmpRequest(#{address := PFaddress,
			  port := PFport, type := PFtype},
			#{address := NFaddress, port := NFport, type := NFtype},
			_) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      port =>
	  if NFport =:= undefined -> PFport;
	     true -> NFport
	  end,
      type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end}.

merge_msg_ResetNeighborRequest(#{address := PFaddress,
				 communication := PFcommunication},
			       #{address := NFaddress,
				 communication := NFcommunication},
			       _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      communication =>
	  if NFcommunication =:= undefined -> PFcommunication;
	     true -> NFcommunication
	  end}.

merge_msg_GetRibInfoRequest(#{info := PFinfo},
			    #{info := NFinfo}, TrUserData) ->
    #{info =>
	  if PFinfo /= undefined, NFinfo /= undefined ->
		 merge_msg_TableInfo(PFinfo, NFinfo, TrUserData);
	     PFinfo == undefined -> NFinfo;
	     NFinfo == undefined -> PFinfo
	  end}.

merge_msg_GetRibRequest(#{table := PFtable},
			#{table := NFtable}, TrUserData) ->
    #{table =>
	  if PFtable /= undefined, NFtable /= undefined ->
		 merge_msg_Table(PFtable, NFtable, TrUserData);
	     PFtable == undefined -> NFtable;
	     NFtable == undefined -> PFtable
	  end}.

merge_msg_GetStatementRequest(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_ReplaceStatementRequest(#{statement :=
					PFstatement},
				  #{statement := NFstatement}, TrUserData) ->
    #{statement =>
	  if PFstatement /= undefined, NFstatement /= undefined ->
		 merge_msg_Statement(PFstatement, NFstatement,
				     TrUserData);
	     PFstatement == undefined -> NFstatement;
	     NFstatement == undefined -> PFstatement
	  end}.

merge_msg_StopServerResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_DeleteStatementRequest(#{statement :=
				       PFstatement,
				   all := PFall},
				 #{statement := NFstatement, all := NFall},
				 TrUserData) ->
    #{statement =>
	  if PFstatement /= undefined, NFstatement /= undefined ->
		 merge_msg_Statement(PFstatement, NFstatement,
				     TrUserData);
	     PFstatement == undefined -> NFstatement;
	     NFstatement == undefined -> PFstatement
	  end,
      all =>
	  if NFall =:= undefined -> PFall;
	     true -> NFall
	  end}.

merge_msg_AddRpkiRequest(#{address := PFaddress,
			   port := PFport, lifetime := PFlifetime},
			 #{address := NFaddress, port := NFport,
			   lifetime := NFlifetime},
			 _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      port =>
	  if NFport =:= undefined -> PFport;
	     true -> NFport
	  end,
      lifetime =>
	  if NFlifetime =:= undefined -> PFlifetime;
	     true -> NFlifetime
	  end}.

merge_msg_GetRibResponse(#{table := PFtable},
			 #{table := NFtable}, TrUserData) ->
    #{table =>
	  if PFtable /= undefined, NFtable /= undefined ->
		 merge_msg_Table(PFtable, NFtable, TrUserData);
	     PFtable == undefined -> NFtable;
	     NFtable == undefined -> PFtable
	  end}.

merge_msg_DisableMrtRequest(_Prev, New, _TrUserData) ->
    New.

merge_msg_DisableRpkiRequest(#{address := PFaddress},
			     #{address := NFaddress}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end}.

merge_msg_EnableRpkiResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_ReplaceDefinedSetRequest(#{set := PFset},
				   #{set := NFset}, TrUserData) ->
    #{set =>
	  if PFset /= undefined, NFset /= undefined ->
		 merge_msg_DefinedSet(PFset, NFset, TrUserData);
	     PFset == undefined -> NFset;
	     NFset == undefined -> PFset
	  end}.

merge_msg_DisableNeighborRequest(#{address := PFaddress,
				   communication := PFcommunication},
				 #{address := NFaddress,
				   communication := NFcommunication},
				 _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      communication =>
	  if NFcommunication =:= undefined -> PFcommunication;
	     true -> NFcommunication
	  end}.

merge_msg_DeletePolicyResponse(_Prev, New,
			       _TrUserData) ->
    New.

merge_msg_SoftResetRpkiResponse(_Prev, New,
				_TrUserData) ->
    New.

merge_msg_GetNeighborResponse(#{peers := PFpeers},
			      #{peers := NFpeers}, TrUserData) ->
    #{peers =>
	  if PFpeers /= undefined, NFpeers /= undefined ->
		 'erlang_++'(PFpeers, NFpeers, TrUserData);
	     PFpeers == undefined -> NFpeers;
	     NFpeers == undefined -> PFpeers
	  end}.

merge_msg_ReplacePolicyResponse(_Prev, New,
				_TrUserData) ->
    New.

merge_msg_GetRpkiResponse(#{servers := PFservers},
			  #{servers := NFservers}, TrUserData) ->
    #{servers =>
	  if PFservers /= undefined, NFservers /= undefined ->
		 'erlang_++'(PFservers, NFservers, TrUserData);
	     PFservers == undefined -> NFservers;
	     NFservers == undefined -> PFservers
	  end}.

merge_msg_SoftResetNeighborResponse(_Prev, New,
				    _TrUserData) ->
    New.

merge_msg_AddDefinedSetResponse(_Prev, New,
				_TrUserData) ->
    New.

merge_msg_GetNeighborRequest(#{enableAdvertised :=
				   PFenableAdvertised,
			       address := PFaddress},
			     #{enableAdvertised := NFenableAdvertised,
			       address := NFaddress},
			     _) ->
    #{enableAdvertised =>
	  if NFenableAdvertised =:= undefined ->
		 PFenableAdvertised;
	     true -> NFenableAdvertised
	  end,
      address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end}.

merge_msg_EnableMrtRequest(#{dump_type := PFdump_type,
			     filename := PFfilename, interval := PFinterval},
			   #{dump_type := NFdump_type, filename := NFfilename,
			     interval := NFinterval},
			   _) ->
    #{dump_type =>
	  if NFdump_type =:= undefined -> PFdump_type;
	     true -> NFdump_type
	  end,
      filename =>
	  if NFfilename =:= undefined -> PFfilename;
	     true -> NFfilename
	  end,
      interval =>
	  if NFinterval =:= undefined -> PFinterval;
	     true -> NFinterval
	  end}.

merge_msg_ReplacePolicyRequest(#{policy := PFpolicy,
				 refer_existing_statements :=
				     PFrefer_existing_statements,
				 preserve_statements := PFpreserve_statements},
			       #{policy := NFpolicy,
				 refer_existing_statements :=
				     NFrefer_existing_statements,
				 preserve_statements := NFpreserve_statements},
			       TrUserData) ->
    #{policy =>
	  if PFpolicy /= undefined, NFpolicy /= undefined ->
		 merge_msg_Policy(PFpolicy, NFpolicy, TrUserData);
	     PFpolicy == undefined -> NFpolicy;
	     NFpolicy == undefined -> PFpolicy
	  end,
      refer_existing_statements =>
	  if NFrefer_existing_statements =:= undefined ->
		 PFrefer_existing_statements;
	     true -> NFrefer_existing_statements
	  end,
      preserve_statements =>
	  if NFpreserve_statements =:= undefined ->
		 PFpreserve_statements;
	     true -> NFpreserve_statements
	  end}.

merge_msg_Arguments(#{resource := PFresource,
		      family := PFfamily, name := PFname},
		    #{resource := NFresource, family := NFfamily,
		      name := NFname},
		    _) ->
    #{resource =>
	  if NFresource =:= undefined -> PFresource;
	     true -> NFresource
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end}.

merge_msg_GetRoaRequest(#{family := PFfamily},
			#{family := NFfamily}, _) ->
    #{family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end}.

merge_msg_DeleteDefinedSetRequest(#{set := PFset,
				    all := PFall},
				  #{set := NFset, all := NFall}, TrUserData) ->
    #{set =>
	  if PFset /= undefined, NFset /= undefined ->
		 merge_msg_DefinedSet(PFset, NFset, TrUserData);
	     PFset == undefined -> NFset;
	     NFset == undefined -> PFset
	  end,
      all =>
	  if NFall =:= undefined -> PFall;
	     true -> NFall
	  end}.

merge_msg_DeleteRpkiResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_EnableZebraResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_StartServerResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_ReplaceDefinedSetResponse(_Prev, New,
				    _TrUserData) ->
    New.

merge_msg_GetDefinedSetResponse(#{sets := PFsets},
				#{sets := NFsets}, TrUserData) ->
    #{sets =>
	  if PFsets /= undefined, NFsets /= undefined ->
		 'erlang_++'(PFsets, NFsets, TrUserData);
	     PFsets == undefined -> NFsets;
	     NFsets == undefined -> PFsets
	  end}.

merge_msg_ShutdownNeighborRequest(#{address :=
					PFaddress,
				    communication := PFcommunication},
				  #{address := NFaddress,
				    communication := NFcommunication},
				  _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      communication =>
	  if NFcommunication =:= undefined -> PFcommunication;
	     true -> NFcommunication
	  end}.

merge_msg_ValidateRibResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_DeletePolicyAssignmentResponse(_Prev, New,
					 _TrUserData) ->
    New.

merge_msg_InjectMrtResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_DisableRpkiResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_EnableZebraRequest(#{url := PFurl,
			       route_types := PFroute_types,
			       version := PFversion,
			       nexthop_trigger_enable :=
				   PFnexthop_trigger_enable,
			       nexthop_trigger_delay :=
				   PFnexthop_trigger_delay},
			     #{url := NFurl, route_types := NFroute_types,
			       version := NFversion,
			       nexthop_trigger_enable :=
				   NFnexthop_trigger_enable,
			       nexthop_trigger_delay :=
				   NFnexthop_trigger_delay},
			     TrUserData) ->
    #{url =>
	  if NFurl =:= undefined -> PFurl;
	     true -> NFurl
	  end,
      route_types =>
	  if PFroute_types /= undefined,
	     NFroute_types /= undefined ->
		 'erlang_++'(PFroute_types, NFroute_types, TrUserData);
	     PFroute_types == undefined -> NFroute_types;
	     NFroute_types == undefined -> PFroute_types
	  end,
      version =>
	  if NFversion =:= undefined -> PFversion;
	     true -> NFversion
	  end,
      nexthop_trigger_enable =>
	  if NFnexthop_trigger_enable =:= undefined ->
		 PFnexthop_trigger_enable;
	     true -> NFnexthop_trigger_enable
	  end,
      nexthop_trigger_delay =>
	  if NFnexthop_trigger_delay =:= undefined ->
		 PFnexthop_trigger_delay;
	     true -> NFnexthop_trigger_delay
	  end}.

merge_msg_AddVrfRequest(#{vrf := PFvrf},
			#{vrf := NFvrf}, TrUserData) ->
    #{vrf =>
	  if PFvrf /= undefined, NFvrf /= undefined ->
		 merge_msg_Vrf(PFvrf, NFvrf, TrUserData);
	     PFvrf == undefined -> NFvrf;
	     NFvrf == undefined -> PFvrf
	  end}.

merge_msg_DeletePathRequest(#{resource := PFresource,
			      vrf_id := PFvrf_id, family := PFfamily,
			      path := PFpath, uuid := PFuuid},
			    #{resource := NFresource, vrf_id := NFvrf_id,
			      family := NFfamily, path := NFpath,
			      uuid := NFuuid},
			    TrUserData) ->
    #{resource =>
	  if NFresource =:= undefined -> PFresource;
	     true -> NFresource
	  end,
      vrf_id =>
	  if NFvrf_id =:= undefined -> PFvrf_id;
	     true -> NFvrf_id
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      path =>
	  if PFpath /= undefined, NFpath /= undefined ->
		 merge_msg_Path(PFpath, NFpath, TrUserData);
	     PFpath == undefined -> NFpath;
	     NFpath == undefined -> PFpath
	  end,
      uuid =>
	  if NFuuid =:= undefined -> PFuuid;
	     true -> NFuuid
	  end}.

merge_msg_EnableNeighborResponse(_Prev, New,
				 _TrUserData) ->
    New.

merge_msg_EnableRpkiRequest(#{address := PFaddress},
			    #{address := NFaddress}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end}.

merge_msg_GetPathRequest(#{type := PFtype,
			   name := PFname, family := PFfamily,
			   prefixes := PFprefixes},
			 #{type := NFtype, name := NFname, family := NFfamily,
			   prefixes := NFprefixes},
			 TrUserData) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      family =>
	  if NFfamily =:= undefined -> PFfamily;
	     true -> NFfamily
	  end,
      prefixes =>
	  if PFprefixes /= undefined, NFprefixes /= undefined ->
		 'erlang_++'(PFprefixes, NFprefixes, TrUserData);
	     PFprefixes == undefined -> NFprefixes;
	     NFprefixes == undefined -> PFprefixes
	  end}.

merge_msg_ReplaceStatementResponse(_Prev, New,
				   _TrUserData) ->
    New.

merge_msg_DeleteBmpRequest(#{address := PFaddress,
			     port := PFport},
			   #{address := NFaddress, port := NFport}, _) ->
    #{address =>
	  if NFaddress =:= undefined -> PFaddress;
	     true -> NFaddress
	  end,
      port =>
	  if NFport =:= undefined -> PFport;
	     true -> NFport
	  end}.

merge_msg_DeleteBmpResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_GetPolicyAssignmentRequest(#{assignment :=
					   PFassignment},
				     #{assignment := NFassignment},
				     TrUserData) ->
    #{assignment =>
	  if PFassignment /= undefined,
	     NFassignment /= undefined ->
		 merge_msg_PolicyAssignment(PFassignment, NFassignment,
					    TrUserData);
	     PFassignment == undefined -> NFassignment;
	     NFassignment == undefined -> PFassignment
	  end}.

merge_msg_DeleteStatementResponse(_Prev, New,
				  _TrUserData) ->
    New.



verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MedAction' ->
	  v_msg_MedAction(Msg, ['MedAction'], TrUserData);
      'DisableNeighborResponse' ->
	  v_msg_DisableNeighborResponse(Msg,
					['DisableNeighborResponse'],
					TrUserData);
      'DeleteNeighborResponse' ->
	  v_msg_DeleteNeighborResponse(Msg,
				       ['DeleteNeighborResponse'], TrUserData);
      'Global' -> v_msg_Global(Msg, ['Global'], TrUserData);
      'StartServerRequest' ->
	  v_msg_StartServerRequest(Msg, ['StartServerRequest'],
				   TrUserData);
      'DeleteRpkiRequest' ->
	  v_msg_DeleteRpkiRequest(Msg, ['DeleteRpkiRequest'],
				  TrUserData);
      'GetPolicyRequest' ->
	  v_msg_GetPolicyRequest(Msg, ['GetPolicyRequest'],
				 TrUserData);
      'RPKIConf' ->
	  v_msg_RPKIConf(Msg, ['RPKIConf'], TrUserData);
      'Roa' -> v_msg_Roa(Msg, ['Roa'], TrUserData);
      'GetRoaResponse' ->
	  v_msg_GetRoaResponse(Msg, ['GetRoaResponse'],
			       TrUserData);
      'GetDefinedSetRequest' ->
	  v_msg_GetDefinedSetRequest(Msg,
				     ['GetDefinedSetRequest'], TrUserData);
      'DeleteVrfResponse' ->
	  v_msg_DeleteVrfResponse(Msg, ['DeleteVrfResponse'],
				  TrUserData);
      'TableLookupPrefix' ->
	  v_msg_TableLookupPrefix(Msg, ['TableLookupPrefix'],
				  TrUserData);
      'AfiSafiConfig' ->
	  v_msg_AfiSafiConfig(Msg, ['AfiSafiConfig'], TrUserData);
      'DisableMrtResponse' ->
	  v_msg_DisableMrtResponse(Msg, ['DisableMrtResponse'],
				   TrUserData);
      'AddStatementResponse' ->
	  v_msg_AddStatementResponse(Msg,
				     ['AddStatementResponse'], TrUserData);
      'TableInfo' ->
	  v_msg_TableInfo(Msg, ['TableInfo'], TrUserData);
      'GetRibInfoResponse' ->
	  v_msg_GetRibInfoResponse(Msg, ['GetRibInfoResponse'],
				   TrUserData);
      'CommunityAction' ->
	  v_msg_CommunityAction(Msg, ['CommunityAction'],
				TrUserData);
      'LocalPrefAction' ->
	  v_msg_LocalPrefAction(Msg, ['LocalPrefAction'],
				TrUserData);
      'NexthopAction' ->
	  v_msg_NexthopAction(Msg, ['NexthopAction'], TrUserData);
      'AsPrependAction' ->
	  v_msg_AsPrependAction(Msg, ['AsPrependAction'],
				TrUserData);
      'Actions' ->
	  v_msg_Actions(Msg, ['Actions'], TrUserData);
      'MatchSet' ->
	  v_msg_MatchSet(Msg, ['MatchSet'], TrUserData);
      'AsPathLength' ->
	  v_msg_AsPathLength(Msg, ['AsPathLength'], TrUserData);
      'Conditions' ->
	  v_msg_Conditions(Msg, ['Conditions'], TrUserData);
      'Statement' ->
	  v_msg_Statement(Msg, ['Statement'], TrUserData);
      'GetStatementResponse' ->
	  v_msg_GetStatementResponse(Msg,
				     ['GetStatementResponse'], TrUserData);
      'UseMultiplePathsConfig' ->
	  v_msg_UseMultiplePathsConfig(Msg,
				       ['UseMultiplePathsConfig'], TrUserData);
      'AddVrfResponse' ->
	  v_msg_AddVrfResponse(Msg, ['AddVrfResponse'],
			       TrUserData);
      'PrefixLimit' ->
	  v_msg_PrefixLimit(Msg, ['PrefixLimit'], TrUserData);
      'PeerConf' ->
	  v_msg_PeerConf(Msg, ['PeerConf'], TrUserData);
      'Policy' -> v_msg_Policy(Msg, ['Policy'], TrUserData);
      'PolicyAssignment' ->
	  v_msg_PolicyAssignment(Msg, ['PolicyAssignment'],
				 TrUserData);
      'AddPolicyAssignmentRequest' ->
	  v_msg_AddPolicyAssignmentRequest(Msg,
					   ['AddPolicyAssignmentRequest'],
					   TrUserData);
      'GetPolicyResponse' ->
	  v_msg_GetPolicyResponse(Msg, ['GetPolicyResponse'],
				  TrUserData);
      'RouteSelectionOptionsConfig' ->
	  v_msg_RouteSelectionOptionsConfig(Msg,
					    ['RouteSelectionOptionsConfig'],
					    TrUserData);
      'ApplyPolicy' ->
	  v_msg_ApplyPolicy(Msg, ['ApplyPolicy'], TrUserData);
      'AddPolicyAssignmentResponse' ->
	  v_msg_AddPolicyAssignmentResponse(Msg,
					    ['AddPolicyAssignmentResponse'],
					    TrUserData);
      'Transport' ->
	  v_msg_Transport(Msg, ['Transport'], TrUserData);
      'AddNeighborResponse' ->
	  v_msg_AddNeighborResponse(Msg, ['AddNeighborResponse'],
				    TrUserData);
      'GetVrfRequest' ->
	  v_msg_GetVrfRequest(Msg, ['GetVrfRequest'], TrUserData);
      'AddStatementRequest' ->
	  v_msg_AddStatementRequest(Msg, ['AddStatementRequest'],
				    TrUserData);
      'IbgpState' ->
	  v_msg_IbgpState(Msg, ['IbgpState'], TrUserData);
      'IbgpConfig' ->
	  v_msg_IbgpConfig(Msg, ['IbgpConfig'], TrUserData);
      'Ibgp' -> v_msg_Ibgp(Msg, ['Ibgp'], TrUserData);
      'EbgpState' ->
	  v_msg_EbgpState(Msg, ['EbgpState'], TrUserData);
      'EbgpConfig' ->
	  v_msg_EbgpConfig(Msg, ['EbgpConfig'], TrUserData);
      'Ebgp' -> v_msg_Ebgp(Msg, ['Ebgp'], TrUserData);
      'UseMultiplePathsState' ->
	  v_msg_UseMultiplePathsState(Msg,
				      ['UseMultiplePathsState'], TrUserData);
      'UseMultiplePaths' ->
	  v_msg_UseMultiplePaths(Msg, ['UseMultiplePaths'],
				 TrUserData);
      'LongLivedGracefulRestartState' ->
	  v_msg_LongLivedGracefulRestartState(Msg,
					      ['LongLivedGracefulRestartState'],
					      TrUserData);
      'LongLivedGracefulRestartConfig' ->
	  v_msg_LongLivedGracefulRestartConfig(Msg,
					       ['LongLivedGracefulRestartConfig'],
					       TrUserData);
      'LongLivedGracefulRestart' ->
	  v_msg_LongLivedGracefulRestart(Msg,
					 ['LongLivedGracefulRestart'],
					 TrUserData);
      'ResetNeighborResponse' ->
	  v_msg_ResetNeighborResponse(Msg,
				      ['ResetNeighborResponse'], TrUserData);
      'AddPathsState' ->
	  v_msg_AddPathsState(Msg, ['AddPathsState'], TrUserData);
      'AddPathsConfig' ->
	  v_msg_AddPathsConfig(Msg, ['AddPathsConfig'],
			       TrUserData);
      'AddPaths' ->
	  v_msg_AddPaths(Msg, ['AddPaths'], TrUserData);
      'RouteTargetMembershipState' ->
	  v_msg_RouteTargetMembershipState(Msg,
					   ['RouteTargetMembershipState'],
					   TrUserData);
      'RouteTargetMembershipConfig' ->
	  v_msg_RouteTargetMembershipConfig(Msg,
					    ['RouteTargetMembershipConfig'],
					    TrUserData);
      'RouteTargetMembership' ->
	  v_msg_RouteTargetMembership(Msg,
				      ['RouteTargetMembership'], TrUserData);
      'RouteSelectionOptionsState' ->
	  v_msg_RouteSelectionOptionsState(Msg,
					   ['RouteSelectionOptionsState'],
					   TrUserData);
      'RouteSelectionOptions' ->
	  v_msg_RouteSelectionOptions(Msg,
				      ['RouteSelectionOptions'], TrUserData);
      'MpGracefulRestartState' ->
	  v_msg_MpGracefulRestartState(Msg,
				       ['MpGracefulRestartState'], TrUserData);
      'MpGracefulRestartConfig' ->
	  v_msg_MpGracefulRestartConfig(Msg,
					['MpGracefulRestartConfig'],
					TrUserData);
      'MpGracefulRestart' ->
	  v_msg_MpGracefulRestart(Msg, ['MpGracefulRestart'],
				  TrUserData);
      'AfiSafi' ->
	  v_msg_AfiSafi(Msg, ['AfiSafi'], TrUserData);
      'GracefulRestart' ->
	  v_msg_GracefulRestart(Msg, ['GracefulRestart'],
				TrUserData);
      'RouteServer' ->
	  v_msg_RouteServer(Msg, ['RouteServer'], TrUserData);
      'TimersState' ->
	  v_msg_TimersState(Msg, ['TimersState'], TrUserData);
      'TimersConfig' ->
	  v_msg_TimersConfig(Msg, ['TimersConfig'], TrUserData);
      'Timers' -> v_msg_Timers(Msg, ['Timers'], TrUserData);
      'Queues' -> v_msg_Queues(Msg, ['Queues'], TrUserData);
      'Message' ->
	  v_msg_Message(Msg, ['Message'], TrUserData);
      'Messages' ->
	  v_msg_Messages(Msg, ['Messages'], TrUserData);
      'PeerState' ->
	  v_msg_PeerState(Msg, ['PeerState'], TrUserData);
      'RouteReflector' ->
	  v_msg_RouteReflector(Msg, ['RouteReflector'],
			       TrUserData);
      'EbgpMultihop' ->
	  v_msg_EbgpMultihop(Msg, ['EbgpMultihop'], TrUserData);
      'Peer' -> v_msg_Peer(Msg, ['Peer'], TrUserData);
      'AddNeighborRequest' ->
	  v_msg_AddNeighborRequest(Msg, ['AddNeighborRequest'],
				   TrUserData);
      'ValidateRibRequest' ->
	  v_msg_ValidateRibRequest(Msg, ['ValidateRibRequest'],
				   TrUserData);
      'DeletePolicyAssignmentRequest' ->
	  v_msg_DeletePolicyAssignmentRequest(Msg,
					      ['DeletePolicyAssignmentRequest'],
					      TrUserData);
      'RPKIValidation' ->
	  v_msg_RPKIValidation(Msg, ['RPKIValidation'],
			       TrUserData);
      'Path' -> v_msg_Path(Msg, ['Path'], TrUserData);
      'Destination' ->
	  v_msg_Destination(Msg, ['Destination'], TrUserData);
      'Table' -> v_msg_Table(Msg, ['Table'], TrUserData);
      'MonitorRibRequest' ->
	  v_msg_MonitorRibRequest(Msg, ['MonitorRibRequest'],
				  TrUserData);
      'ShutdownNeighborResponse' ->
	  v_msg_ShutdownNeighborResponse(Msg,
					 ['ShutdownNeighborResponse'],
					 TrUserData);
      'AddRpkiResponse' ->
	  v_msg_AddRpkiResponse(Msg, ['AddRpkiResponse'],
				TrUserData);
      'AddPolicyRequest' ->
	  v_msg_AddPolicyRequest(Msg, ['AddPolicyRequest'],
				 TrUserData);
      'RPKIState' ->
	  v_msg_RPKIState(Msg, ['RPKIState'], TrUserData);
      'Rpki' -> v_msg_Rpki(Msg, ['Rpki'], TrUserData);
      'AddPathRequest' ->
	  v_msg_AddPathRequest(Msg, ['AddPathRequest'],
			       TrUserData);
      'ResetRpkiResponse' ->
	  v_msg_ResetRpkiResponse(Msg, ['ResetRpkiResponse'],
				  TrUserData);
      'ResetRpkiRequest' ->
	  v_msg_ResetRpkiRequest(Msg, ['ResetRpkiRequest'],
				 TrUserData);
      'SoftResetNeighborRequest' ->
	  v_msg_SoftResetNeighborRequest(Msg,
					 ['SoftResetNeighborRequest'],
					 TrUserData);
      'AddPolicyResponse' ->
	  v_msg_AddPolicyResponse(Msg, ['AddPolicyResponse'],
				  TrUserData);
      'EnableNeighborRequest' ->
	  v_msg_EnableNeighborRequest(Msg,
				      ['EnableNeighborRequest'], TrUserData);
      'AddPathResponse' ->
	  v_msg_AddPathResponse(Msg, ['AddPathResponse'],
				TrUserData);
      'Vrf' -> v_msg_Vrf(Msg, ['Vrf'], TrUserData);
      'GetVrfResponse' ->
	  v_msg_GetVrfResponse(Msg, ['GetVrfResponse'],
			       TrUserData);
      'SoftResetRpkiRequest' ->
	  v_msg_SoftResetRpkiRequest(Msg,
				     ['SoftResetRpkiRequest'], TrUserData);
      'StopServerRequest' ->
	  v_msg_StopServerRequest(Msg, ['StopServerRequest'],
				  TrUserData);
      'AddBmpResponse' ->
	  v_msg_AddBmpResponse(Msg, ['AddBmpResponse'],
			       TrUserData);
      'GetRpkiRequest' ->
	  v_msg_GetRpkiRequest(Msg, ['GetRpkiRequest'],
			       TrUserData);
      'DeleteNeighborRequest' ->
	  v_msg_DeleteNeighborRequest(Msg,
				      ['DeleteNeighborRequest'], TrUserData);
      'AfiSafiState' ->
	  v_msg_AfiSafiState(Msg, ['AfiSafiState'], TrUserData);
      'GetServerResponse' ->
	  v_msg_GetServerResponse(Msg, ['GetServerResponse'],
				  TrUserData);
      'EnableMrtResponse' ->
	  v_msg_EnableMrtResponse(Msg, ['EnableMrtResponse'],
				  TrUserData);
      'InjectMrtRequest' ->
	  v_msg_InjectMrtRequest(Msg, ['InjectMrtRequest'],
				 TrUserData);
      'Prefix' -> v_msg_Prefix(Msg, ['Prefix'], TrUserData);
      'DefinedSet' ->
	  v_msg_DefinedSet(Msg, ['DefinedSet'], TrUserData);
      'AddDefinedSetRequest' ->
	  v_msg_AddDefinedSetRequest(Msg,
				     ['AddDefinedSetRequest'], TrUserData);
      'ReplacePolicyAssignmentRequest' ->
	  v_msg_ReplacePolicyAssignmentRequest(Msg,
					       ['ReplacePolicyAssignmentRequest'],
					       TrUserData);
      'DeletePathResponse' ->
	  v_msg_DeletePathResponse(Msg, ['DeletePathResponse'],
				   TrUserData);
      'DeletePolicyRequest' ->
	  v_msg_DeletePolicyRequest(Msg, ['DeletePolicyRequest'],
				    TrUserData);
      'DeleteVrfRequest' ->
	  v_msg_DeleteVrfRequest(Msg, ['DeleteVrfRequest'],
				 TrUserData);
      'GetPolicyAssignmentResponse' ->
	  v_msg_GetPolicyAssignmentResponse(Msg,
					    ['GetPolicyAssignmentResponse'],
					    TrUserData);
      'DeleteDefinedSetResponse' ->
	  v_msg_DeleteDefinedSetResponse(Msg,
					 ['DeleteDefinedSetResponse'],
					 TrUserData);
      'ReplacePolicyAssignmentResponse' ->
	  v_msg_ReplacePolicyAssignmentResponse(Msg,
						['ReplacePolicyAssignmentResponse'],
						TrUserData);
      'GetServerRequest' ->
	  v_msg_GetServerRequest(Msg, ['GetServerRequest'],
				 TrUserData);
      'AddBmpRequest' ->
	  v_msg_AddBmpRequest(Msg, ['AddBmpRequest'], TrUserData);
      'ResetNeighborRequest' ->
	  v_msg_ResetNeighborRequest(Msg,
				     ['ResetNeighborRequest'], TrUserData);
      'GetRibInfoRequest' ->
	  v_msg_GetRibInfoRequest(Msg, ['GetRibInfoRequest'],
				  TrUserData);
      'GetRibRequest' ->
	  v_msg_GetRibRequest(Msg, ['GetRibRequest'], TrUserData);
      'GetStatementRequest' ->
	  v_msg_GetStatementRequest(Msg, ['GetStatementRequest'],
				    TrUserData);
      'ReplaceStatementRequest' ->
	  v_msg_ReplaceStatementRequest(Msg,
					['ReplaceStatementRequest'],
					TrUserData);
      'StopServerResponse' ->
	  v_msg_StopServerResponse(Msg, ['StopServerResponse'],
				   TrUserData);
      'DeleteStatementRequest' ->
	  v_msg_DeleteStatementRequest(Msg,
				       ['DeleteStatementRequest'], TrUserData);
      'AddRpkiRequest' ->
	  v_msg_AddRpkiRequest(Msg, ['AddRpkiRequest'],
			       TrUserData);
      'GetRibResponse' ->
	  v_msg_GetRibResponse(Msg, ['GetRibResponse'],
			       TrUserData);
      'DisableMrtRequest' ->
	  v_msg_DisableMrtRequest(Msg, ['DisableMrtRequest'],
				  TrUserData);
      'DisableRpkiRequest' ->
	  v_msg_DisableRpkiRequest(Msg, ['DisableRpkiRequest'],
				   TrUserData);
      'EnableRpkiResponse' ->
	  v_msg_EnableRpkiResponse(Msg, ['EnableRpkiResponse'],
				   TrUserData);
      'ReplaceDefinedSetRequest' ->
	  v_msg_ReplaceDefinedSetRequest(Msg,
					 ['ReplaceDefinedSetRequest'],
					 TrUserData);
      'DisableNeighborRequest' ->
	  v_msg_DisableNeighborRequest(Msg,
				       ['DisableNeighborRequest'], TrUserData);
      'DeletePolicyResponse' ->
	  v_msg_DeletePolicyResponse(Msg,
				     ['DeletePolicyResponse'], TrUserData);
      'SoftResetRpkiResponse' ->
	  v_msg_SoftResetRpkiResponse(Msg,
				      ['SoftResetRpkiResponse'], TrUserData);
      'GetNeighborResponse' ->
	  v_msg_GetNeighborResponse(Msg, ['GetNeighborResponse'],
				    TrUserData);
      'ReplacePolicyResponse' ->
	  v_msg_ReplacePolicyResponse(Msg,
				      ['ReplacePolicyResponse'], TrUserData);
      'GetRpkiResponse' ->
	  v_msg_GetRpkiResponse(Msg, ['GetRpkiResponse'],
				TrUserData);
      'SoftResetNeighborResponse' ->
	  v_msg_SoftResetNeighborResponse(Msg,
					  ['SoftResetNeighborResponse'],
					  TrUserData);
      'AddDefinedSetResponse' ->
	  v_msg_AddDefinedSetResponse(Msg,
				      ['AddDefinedSetResponse'], TrUserData);
      'GetNeighborRequest' ->
	  v_msg_GetNeighborRequest(Msg, ['GetNeighborRequest'],
				   TrUserData);
      'EnableMrtRequest' ->
	  v_msg_EnableMrtRequest(Msg, ['EnableMrtRequest'],
				 TrUserData);
      'ReplacePolicyRequest' ->
	  v_msg_ReplacePolicyRequest(Msg,
				     ['ReplacePolicyRequest'], TrUserData);
      'Arguments' ->
	  v_msg_Arguments(Msg, ['Arguments'], TrUserData);
      'GetRoaRequest' ->
	  v_msg_GetRoaRequest(Msg, ['GetRoaRequest'], TrUserData);
      'DeleteDefinedSetRequest' ->
	  v_msg_DeleteDefinedSetRequest(Msg,
					['DeleteDefinedSetRequest'],
					TrUserData);
      'DeleteRpkiResponse' ->
	  v_msg_DeleteRpkiResponse(Msg, ['DeleteRpkiResponse'],
				   TrUserData);
      'EnableZebraResponse' ->
	  v_msg_EnableZebraResponse(Msg, ['EnableZebraResponse'],
				    TrUserData);
      'StartServerResponse' ->
	  v_msg_StartServerResponse(Msg, ['StartServerResponse'],
				    TrUserData);
      'ReplaceDefinedSetResponse' ->
	  v_msg_ReplaceDefinedSetResponse(Msg,
					  ['ReplaceDefinedSetResponse'],
					  TrUserData);
      'GetDefinedSetResponse' ->
	  v_msg_GetDefinedSetResponse(Msg,
				      ['GetDefinedSetResponse'], TrUserData);
      'ShutdownNeighborRequest' ->
	  v_msg_ShutdownNeighborRequest(Msg,
					['ShutdownNeighborRequest'],
					TrUserData);
      'ValidateRibResponse' ->
	  v_msg_ValidateRibResponse(Msg, ['ValidateRibResponse'],
				    TrUserData);
      'DeletePolicyAssignmentResponse' ->
	  v_msg_DeletePolicyAssignmentResponse(Msg,
					       ['DeletePolicyAssignmentResponse'],
					       TrUserData);
      'InjectMrtResponse' ->
	  v_msg_InjectMrtResponse(Msg, ['InjectMrtResponse'],
				  TrUserData);
      'DisableRpkiResponse' ->
	  v_msg_DisableRpkiResponse(Msg, ['DisableRpkiResponse'],
				    TrUserData);
      'EnableZebraRequest' ->
	  v_msg_EnableZebraRequest(Msg, ['EnableZebraRequest'],
				   TrUserData);
      'AddVrfRequest' ->
	  v_msg_AddVrfRequest(Msg, ['AddVrfRequest'], TrUserData);
      'DeletePathRequest' ->
	  v_msg_DeletePathRequest(Msg, ['DeletePathRequest'],
				  TrUserData);
      'EnableNeighborResponse' ->
	  v_msg_EnableNeighborResponse(Msg,
				       ['EnableNeighborResponse'], TrUserData);
      'EnableRpkiRequest' ->
	  v_msg_EnableRpkiRequest(Msg, ['EnableRpkiRequest'],
				  TrUserData);
      'GetPathRequest' ->
	  v_msg_GetPathRequest(Msg, ['GetPathRequest'],
			       TrUserData);
      'ReplaceStatementResponse' ->
	  v_msg_ReplaceStatementResponse(Msg,
					 ['ReplaceStatementResponse'],
					 TrUserData);
      'DeleteBmpRequest' ->
	  v_msg_DeleteBmpRequest(Msg, ['DeleteBmpRequest'],
				 TrUserData);
      'DeleteBmpResponse' ->
	  v_msg_DeleteBmpResponse(Msg, ['DeleteBmpResponse'],
				  TrUserData);
      'GetPolicyAssignmentRequest' ->
	  v_msg_GetPolicyAssignmentRequest(Msg,
					   ['GetPolicyAssignmentRequest'],
					   TrUserData);
      'DeleteStatementResponse' ->
	  v_msg_DeleteStatementResponse(Msg,
					['DeleteStatementResponse'],
					TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_MedAction/3}).
v_msg_MedAction(#{type := F1, value := F2}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_MedActionType(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [value | Path])
    end,
    ok;
v_msg_MedAction(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, value] -- maps:keys(M), 'MedAction'},
		  M, Path);
v_msg_MedAction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MedAction'}, X, Path).

-dialyzer({nowarn_function,v_msg_DisableNeighborResponse/3}).
v_msg_DisableNeighborResponse(#{}, _Path, _) -> ok;
v_msg_DisableNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DisableNeighborResponse'},
		  M, Path);
v_msg_DisableNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisableNeighborResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeleteNeighborResponse/3}).
v_msg_DeleteNeighborResponse(#{}, _Path, _) -> ok;
v_msg_DeleteNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteNeighborResponse'},
		  M, Path);
v_msg_DeleteNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteNeighborResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_Global/3}).
v_msg_Global(#{as := F1, router_id := F2,
	       listen_port := F3, listen_addresses := F4,
	       families := F5, use_multiple_paths := F6},
	     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [as | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [router_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [listen_port | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [listen_addresses | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [listen_addresses | Path])
    end,
    if is_list(F5) ->
	   _ = [v_type_uint32(Elem, [families | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F5,
			 [families | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [use_multiple_paths | Path])
    end,
    ok;
v_msg_Global(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [as, router_id, listen_port, listen_addresses, families,
		    use_multiple_paths]
		     -- maps:keys(M),
		   'Global'},
		  M, Path);
v_msg_Global(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Global'}, X, Path).

-dialyzer({nowarn_function,v_msg_StartServerRequest/3}).
v_msg_StartServerRequest(#{global := F1}, Path,
			 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Global(F1, [global | Path], TrUserData)
    end,
    ok;
v_msg_StartServerRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [global] -- maps:keys(M),
		   'StartServerRequest'},
		  M, Path);
v_msg_StartServerRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StartServerRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeleteRpkiRequest/3}).
v_msg_DeleteRpkiRequest(#{address := F1, port := F2},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [port | Path])
    end,
    ok;
v_msg_DeleteRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, port] -- maps:keys(M), 'DeleteRpkiRequest'},
		  M, Path);
v_msg_DeleteRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetPolicyRequest/3}).
v_msg_GetPolicyRequest(#{}, _Path, _) -> ok;
v_msg_GetPolicyRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetPolicyRequest'},
		  M, Path);
v_msg_GetPolicyRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetPolicyRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RPKIConf/3}).
v_msg_RPKIConf(#{address := F1, remote_port := F2},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [remote_port | Path])
    end,
    ok;
v_msg_RPKIConf(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, remote_port] -- maps:keys(M), 'RPKIConf'},
		  M, Path);
v_msg_RPKIConf(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RPKIConf'}, X, Path).

-dialyzer({nowarn_function,v_msg_Roa/3}).
v_msg_Roa(#{as := F1, prefixlen := F2, maxlen := F3,
	    prefix := F4, conf := F5},
	  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [as | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [prefixlen | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [maxlen | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [prefix | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_msg_RPKIConf(F5, [conf | Path], TrUserData)
    end,
    ok;
v_msg_Roa(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [as, prefixlen, maxlen, prefix, conf] -- maps:keys(M),
		   'Roa'},
		  M, Path);
v_msg_Roa(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Roa'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetRoaResponse/3}).
v_msg_GetRoaResponse(#{roas := F1}, Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Roa(Elem, [roas | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Roa'}}, F1,
			 [roas | Path])
    end,
    ok;
v_msg_GetRoaResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [roas] -- maps:keys(M),
		   'GetRoaResponse'},
		  M, Path);
v_msg_GetRoaResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRoaResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetDefinedSetRequest/3}).
v_msg_GetDefinedSetRequest(#{type := F1, name := F2},
			   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_DefinedType(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    ok;
v_msg_GetDefinedSetRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, name] -- maps:keys(M), 'GetDefinedSetRequest'},
		  M, Path);
v_msg_GetDefinedSetRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetDefinedSetRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeleteVrfResponse/3}).
v_msg_DeleteVrfResponse(#{}, _Path, _) -> ok;
v_msg_DeleteVrfResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteVrfResponse'},
		  M, Path);
v_msg_DeleteVrfResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteVrfResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_TableLookupPrefix/3}).
v_msg_TableLookupPrefix(#{prefix := F1,
			  lookup_option := F2},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [prefix | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_enum_TableLookupOption(F2, [lookup_option | Path])
    end,
    ok;
v_msg_TableLookupPrefix(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [prefix, lookup_option] -- maps:keys(M),
		   'TableLookupPrefix'},
		  M, Path);
v_msg_TableLookupPrefix(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TableLookupPrefix'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AfiSafiConfig/3}).
v_msg_AfiSafiConfig(#{family := F1, enabled := F2},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [family | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [enabled | Path])
    end,
    ok;
v_msg_AfiSafiConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [family, enabled] -- maps:keys(M), 'AfiSafiConfig'},
		  M, Path);
v_msg_AfiSafiConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AfiSafiConfig'}, X, Path).

-dialyzer({nowarn_function,v_msg_DisableMrtResponse/3}).
v_msg_DisableMrtResponse(#{}, _Path, _) -> ok;
v_msg_DisableMrtResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DisableMrtResponse'},
		  M, Path);
v_msg_DisableMrtResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisableMrtResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddStatementResponse/3}).
v_msg_AddStatementResponse(#{}, _Path, _) -> ok;
v_msg_AddStatementResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddStatementResponse'},
		  M, Path);
v_msg_AddStatementResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddStatementResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_TableInfo/3}).
v_msg_TableInfo(#{type := F1, name := F2, family := F3,
		  num_destination := F4, num_path := F5,
		  num_accepted := F6},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [family | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [num_destination | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [num_path | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [num_accepted | Path])
    end,
    ok;
v_msg_TableInfo(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, name, family, num_destination, num_path,
		    num_accepted]
		     -- maps:keys(M),
		   'TableInfo'},
		  M, Path);
v_msg_TableInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TableInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetRibInfoResponse/3}).
v_msg_GetRibInfoResponse(#{info := F1}, Path,
			 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_TableInfo(F1, [info | Path], TrUserData)
    end,
    ok;
v_msg_GetRibInfoResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [info] -- maps:keys(M),
		   'GetRibInfoResponse'},
		  M, Path);
v_msg_GetRibInfoResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRibInfoResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_CommunityAction/3}).
v_msg_CommunityAction(#{type := F1, communities := F2},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_CommunityActionType(F1, [type | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [communities | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [communities | Path])
    end,
    ok;
v_msg_CommunityAction(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, communities] -- maps:keys(M), 'CommunityAction'},
		  M, Path);
v_msg_CommunityAction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CommunityAction'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_LocalPrefAction/3}).
v_msg_LocalPrefAction(#{value := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [value | Path])
    end,
    ok;
v_msg_LocalPrefAction(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [value] -- maps:keys(M),
		   'LocalPrefAction'},
		  M, Path);
v_msg_LocalPrefAction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LocalPrefAction'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_NexthopAction/3}).
v_msg_NexthopAction(#{address := F1, self := F2}, Path,
		    _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [self | Path])
    end,
    ok;
v_msg_NexthopAction(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, self] -- maps:keys(M), 'NexthopAction'},
		  M, Path);
v_msg_NexthopAction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NexthopAction'}, X, Path).

-dialyzer({nowarn_function,v_msg_AsPrependAction/3}).
v_msg_AsPrependAction(#{asn := F1, repeat := F2,
			use_left_most := F3},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [asn | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [repeat | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [use_left_most | Path])
    end,
    ok;
v_msg_AsPrependAction(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [asn, repeat, use_left_most] -- maps:keys(M),
		   'AsPrependAction'},
		  M, Path);
v_msg_AsPrependAction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AsPrependAction'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Actions/3}).
v_msg_Actions(#{route_action := F1, community := F2,
		med := F3, as_prepend := F4, ext_community := F5,
		nexthop := F6, local_pref := F7, large_community := F8},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_RouteAction(F1, [route_action | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_CommunityAction(F2, [community | Path],
				 TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_MedAction(F3, [med | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_AsPrependAction(F4, [as_prepend | Path],
				 TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_CommunityAction(F5, [ext_community | Path],
				 TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_NexthopAction(F6, [nexthop | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_LocalPrefAction(F7, [local_pref | Path],
				 TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_CommunityAction(F8, [large_community | Path],
				 TrUserData)
    end,
    ok;
v_msg_Actions(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [route_action, community, med, as_prepend,
		    ext_community, nexthop, local_pref, large_community]
		     -- maps:keys(M),
		   'Actions'},
		  M, Path);
v_msg_Actions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Actions'}, X, Path).

-dialyzer({nowarn_function,v_msg_MatchSet/3}).
v_msg_MatchSet(#{type := F1, name := F2}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_MatchType(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    ok;
v_msg_MatchSet(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, name] -- maps:keys(M), 'MatchSet'},
		  M, Path);
v_msg_MatchSet(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchSet'}, X, Path).

-dialyzer({nowarn_function,v_msg_AsPathLength/3}).
v_msg_AsPathLength(#{type := F1, length := F2}, Path,
		   _) ->
    if F1 == undefined -> ok;
       true -> v_enum_AsPathLengthType(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [length | Path])
    end,
    ok;
v_msg_AsPathLength(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, length] -- maps:keys(M), 'AsPathLength'},
		  M, Path);
v_msg_AsPathLength(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AsPathLength'}, X, Path).

-dialyzer({nowarn_function,v_msg_Conditions/3}).
v_msg_Conditions(#{prefix_set := F1, neighbor_set := F2,
		   as_path_length := F3, as_path_set := F4,
		   community_set := F5, ext_community_set := F6,
		   rpki_result := F7, route_type := F8,
		   large_community_set := F9},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_MatchSet(F1, [prefix_set | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_MatchSet(F2, [neighbor_set | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_AsPathLength(F3, [as_path_length | Path],
			      TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_MatchSet(F4, [as_path_set | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_MatchSet(F5, [community_set | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_MatchSet(F6, [ext_community_set | Path],
			  TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [rpki_result | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_enum_Conditions.RouteType'(F8, [route_type | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_MatchSet(F9, [large_community_set | Path],
			  TrUserData)
    end,
    ok;
v_msg_Conditions(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [prefix_set, neighbor_set, as_path_length, as_path_set,
		    community_set, ext_community_set, rpki_result,
		    route_type, large_community_set]
		     -- maps:keys(M),
		   'Conditions'},
		  M, Path);
v_msg_Conditions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Conditions'}, X, Path).

-dialyzer({nowarn_function,v_msg_Statement/3}).
v_msg_Statement(#{name := F1, conditions := F2,
		  actions := F3},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_Conditions(F2, [conditions | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_Actions(F3, [actions | Path], TrUserData)
    end,
    ok;
v_msg_Statement(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [name, conditions, actions] -- maps:keys(M),
		   'Statement'},
		  M, Path);
v_msg_Statement(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Statement'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetStatementResponse/3}).
v_msg_GetStatementResponse(#{statements := F1}, Path,
			   TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Statement(Elem, [statements | Path],
				TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Statement'}}, F1,
			 [statements | Path])
    end,
    ok;
v_msg_GetStatementResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [statements] -- maps:keys(M), 'GetStatementResponse'},
		  M, Path);
v_msg_GetStatementResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetStatementResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_UseMultiplePathsConfig/3}).
v_msg_UseMultiplePathsConfig(#{enabled := F1}, Path,
			     _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    ok;
v_msg_UseMultiplePathsConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled] -- maps:keys(M), 'UseMultiplePathsConfig'},
		  M, Path);
v_msg_UseMultiplePathsConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UseMultiplePathsConfig'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddVrfResponse/3}).
v_msg_AddVrfResponse(#{}, _Path, _) -> ok;
v_msg_AddVrfResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddVrfResponse'},
		  M, Path);
v_msg_AddVrfResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddVrfResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_PrefixLimit/3}).
v_msg_PrefixLimit(#{family := F1, max_prefixes := F2,
		    shutdown_threshold_pct := F3},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [family | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [max_prefixes | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint32(F3, [shutdown_threshold_pct | Path])
    end,
    ok;
v_msg_PrefixLimit(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [family, max_prefixes, shutdown_threshold_pct] --
		     maps:keys(M),
		   'PrefixLimit'},
		  M, Path);
v_msg_PrefixLimit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PrefixLimit'}, X, Path).

-dialyzer({nowarn_function,v_msg_PeerConf/3}).
v_msg_PeerConf(#{auth_password := F1, description := F2,
		 local_as := F3, neighbor_address := F4, peer_as := F5,
		 peer_group := F6, peer_type := F7,
		 remove_private_as := F8, route_flap_damping := F9,
		 send_community := F10, remote_cap := F11,
		 local_cap := F12, id := F13, prefix_limits := F14,
		 local_address := F15, neighbor_interface := F16,
		 vrf := F17, allow_own_as := F18,
		 replace_peer_as := F19},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [auth_password | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [description | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [local_as | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [neighbor_address | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [peer_as | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [peer_group | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [peer_type | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_enum_PeerConf.RemovePrivateAs'(F8,
					     [remove_private_as | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [route_flap_damping | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [send_community | Path])
    end,
    if is_list(F11) ->
	   _ = [v_type_bytes(Elem, [remote_cap | Path])
		|| Elem <- F11],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F11,
			 [remote_cap | Path])
    end,
    if is_list(F12) ->
	   _ = [v_type_bytes(Elem, [local_cap | Path])
		|| Elem <- F12],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F12,
			 [local_cap | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_string(F13, [id | Path])
    end,
    if is_list(F14) ->
	   _ = [v_msg_PrefixLimit(Elem, [prefix_limits | Path],
				  TrUserData)
		|| Elem <- F14],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'PrefixLimit'}},
			 F14, [prefix_limits | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_string(F15, [local_address | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_string(F16, [neighbor_interface | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_string(F17, [vrf | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [allow_own_as | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_bool(F19, [replace_peer_as | Path])
    end,
    ok;
v_msg_PeerConf(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [auth_password, description, local_as, neighbor_address,
		    peer_as, peer_group, peer_type, remove_private_as,
		    route_flap_damping, send_community, remote_cap,
		    local_cap, id, prefix_limits, local_address,
		    neighbor_interface, vrf, allow_own_as, replace_peer_as]
		     -- maps:keys(M),
		   'PeerConf'},
		  M, Path);
v_msg_PeerConf(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PeerConf'}, X, Path).

-dialyzer({nowarn_function,v_msg_Policy/3}).
v_msg_Policy(#{name := F1, statements := F2}, Path,
	     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_Statement(Elem, [statements | Path],
				TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Statement'}}, F2,
			 [statements | Path])
    end,
    ok;
v_msg_Policy(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [name, statements] -- maps:keys(M), 'Policy'},
		  M, Path);
v_msg_Policy(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Policy'}, X, Path).

-dialyzer({nowarn_function,v_msg_PolicyAssignment/3}).
v_msg_PolicyAssignment(#{type := F1, resource := F2,
			 name := F3, policies := F4, default := F5},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_PolicyType(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_Resource(F2, [resource | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_Policy(Elem, [policies | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Policy'}}, F4,
			 [policies | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_enum_RouteAction(F5, [default | Path])
    end,
    ok;
v_msg_PolicyAssignment(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, resource, name, policies, default] --
		     maps:keys(M),
		   'PolicyAssignment'},
		  M, Path);
v_msg_PolicyAssignment(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PolicyAssignment'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddPolicyAssignmentRequest/3}).
v_msg_AddPolicyAssignmentRequest(#{assignment := F1},
				 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F1, [assignment | Path],
				  TrUserData)
    end,
    ok;
v_msg_AddPolicyAssignmentRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [assignment] -- maps:keys(M),
		   'AddPolicyAssignmentRequest'},
		  M, Path);
v_msg_AddPolicyAssignmentRequest(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'AddPolicyAssignmentRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetPolicyResponse/3}).
v_msg_GetPolicyResponse(#{policies := F1}, Path,
			TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Policy(Elem, [policies | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Policy'}}, F1,
			 [policies | Path])
    end,
    ok;
v_msg_GetPolicyResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [policies] -- maps:keys(M), 'GetPolicyResponse'},
		  M, Path);
v_msg_GetPolicyResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetPolicyResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RouteSelectionOptionsConfig/3}).
v_msg_RouteSelectionOptionsConfig(#{always_compare_med
					:= F1,
				    ignore_as_path_length := F2,
				    external_compare_router_id := F3,
				    advertise_inactive_routes := F4,
				    enable_aigp := F5,
				    ignore_next_hop_igp_metric := F6},
				  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [always_compare_med | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [ignore_as_path_length | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bool(F3, [external_compare_router_id | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bool(F4, [advertise_inactive_routes | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [enable_aigp | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_bool(F6, [ignore_next_hop_igp_metric | Path])
    end,
    ok;
v_msg_RouteSelectionOptionsConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [always_compare_med, ignore_as_path_length,
		    external_compare_router_id, advertise_inactive_routes,
		    enable_aigp, ignore_next_hop_igp_metric]
		     -- maps:keys(M),
		   'RouteSelectionOptionsConfig'},
		  M, Path);
v_msg_RouteSelectionOptionsConfig(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'RouteSelectionOptionsConfig'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ApplyPolicy/3}).
v_msg_ApplyPolicy(#{in_policy := F1,
		    export_policy := F2, import_policy := F3},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F1, [in_policy | Path],
				  TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F2, [export_policy | Path],
				  TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F3, [import_policy | Path],
				  TrUserData)
    end,
    ok;
v_msg_ApplyPolicy(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [in_policy, export_policy, import_policy] --
		     maps:keys(M),
		   'ApplyPolicy'},
		  M, Path);
v_msg_ApplyPolicy(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ApplyPolicy'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddPolicyAssignmentResponse/3}).
v_msg_AddPolicyAssignmentResponse(#{}, _Path, _) -> ok;
v_msg_AddPolicyAssignmentResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddPolicyAssignmentResponse'},
		  M, Path);
v_msg_AddPolicyAssignmentResponse(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'AddPolicyAssignmentResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_Transport/3}).
v_msg_Transport(#{local_address := F1, local_port := F2,
		  mtu_discovery := F3, passive_mode := F4,
		  remote_address := F5, remote_port := F6, tcp_mss := F7},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [local_address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [local_port | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [mtu_discovery | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [passive_mode | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [remote_address | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [remote_port | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [tcp_mss | Path])
    end,
    ok;
v_msg_Transport(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [local_address, local_port, mtu_discovery, passive_mode,
		    remote_address, remote_port, tcp_mss]
		     -- maps:keys(M),
		   'Transport'},
		  M, Path);
v_msg_Transport(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Transport'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddNeighborResponse/3}).
v_msg_AddNeighborResponse(#{}, _Path, _) -> ok;
v_msg_AddNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddNeighborResponse'},
		  M, Path);
v_msg_AddNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddNeighborResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetVrfRequest/3}).
v_msg_GetVrfRequest(#{}, _Path, _) -> ok;
v_msg_GetVrfRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetVrfRequest'},
		  M, Path);
v_msg_GetVrfRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetVrfRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddStatementRequest/3}).
v_msg_AddStatementRequest(#{statement := F1}, Path,
			  TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_Statement(F1, [statement | Path], TrUserData)
    end,
    ok;
v_msg_AddStatementRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [statement] -- maps:keys(M), 'AddStatementRequest'},
		  M, Path);
v_msg_AddStatementRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddStatementRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_IbgpState/3}).
v_msg_IbgpState(#{maximum_paths := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [maximum_paths | Path])
    end,
    ok;
v_msg_IbgpState(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [maximum_paths] -- maps:keys(M), 'IbgpState'},
		  M, Path);
v_msg_IbgpState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'IbgpState'}, X, Path).

-dialyzer({nowarn_function,v_msg_IbgpConfig/3}).
v_msg_IbgpConfig(#{maximum_paths := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [maximum_paths | Path])
    end,
    ok;
v_msg_IbgpConfig(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [maximum_paths] -- maps:keys(M), 'IbgpConfig'},
		  M, Path);
v_msg_IbgpConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'IbgpConfig'}, X, Path).

-dialyzer({nowarn_function,v_msg_Ibgp/3}).
v_msg_Ibgp(#{config := F1, state := F2}, Path,
	   TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_IbgpConfig(F1, [config | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_IbgpState(F2, [state | Path], TrUserData)
    end,
    ok;
v_msg_Ibgp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M), 'Ibgp'},
		  M, Path);
v_msg_Ibgp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Ibgp'}, X, Path).

-dialyzer({nowarn_function,v_msg_EbgpState/3}).
v_msg_EbgpState(#{allow_multiple_as := F1,
		  maximum_paths := F2},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [allow_multiple_as | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [maximum_paths | Path])
    end,
    ok;
v_msg_EbgpState(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [allow_multiple_as, maximum_paths] -- maps:keys(M),
		   'EbgpState'},
		  M, Path);
v_msg_EbgpState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EbgpState'}, X, Path).

-dialyzer({nowarn_function,v_msg_EbgpConfig/3}).
v_msg_EbgpConfig(#{allow_multiple_as := F1,
		   maximum_paths := F2},
		 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [allow_multiple_as | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [maximum_paths | Path])
    end,
    ok;
v_msg_EbgpConfig(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [allow_multiple_as, maximum_paths] -- maps:keys(M),
		   'EbgpConfig'},
		  M, Path);
v_msg_EbgpConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EbgpConfig'}, X, Path).

-dialyzer({nowarn_function,v_msg_Ebgp/3}).
v_msg_Ebgp(#{config := F1, state := F2}, Path,
	   TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_EbgpConfig(F1, [config | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_EbgpState(F2, [state | Path], TrUserData)
    end,
    ok;
v_msg_Ebgp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M), 'Ebgp'},
		  M, Path);
v_msg_Ebgp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Ebgp'}, X, Path).

-dialyzer({nowarn_function,v_msg_UseMultiplePathsState/3}).
v_msg_UseMultiplePathsState(#{enabled := F1}, Path,
			    _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    ok;
v_msg_UseMultiplePathsState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled] -- maps:keys(M), 'UseMultiplePathsState'},
		  M, Path);
v_msg_UseMultiplePathsState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UseMultiplePathsState'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_UseMultiplePaths/3}).
v_msg_UseMultiplePaths(#{config := F1, state := F2,
			 ebgp := F3, ibgp := F4},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_UseMultiplePathsConfig(F1, [config | Path],
					TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_UseMultiplePathsState(F2, [state | Path],
				       TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_Ebgp(F3, [ebgp | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_Ibgp(F4, [ibgp | Path], TrUserData)
    end,
    ok;
v_msg_UseMultiplePaths(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state, ebgp, ibgp] -- maps:keys(M),
		   'UseMultiplePaths'},
		  M, Path);
v_msg_UseMultiplePaths(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UseMultiplePaths'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_LongLivedGracefulRestartState/3}).
v_msg_LongLivedGracefulRestartState(#{enabled := F1,
				      received := F2, advertised := F3,
				      peer_restart_time := F4,
				      peer_restart_timer_expired := F5},
				    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [received | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [advertised | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [peer_restart_time | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_bool(F5, [peer_restart_timer_expired | Path])
    end,
    ok;
v_msg_LongLivedGracefulRestartState(M, Path,
				    _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled, received, advertised, peer_restart_time,
		    peer_restart_timer_expired]
		     -- maps:keys(M),
		   'LongLivedGracefulRestartState'},
		  M, Path);
v_msg_LongLivedGracefulRestartState(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'LongLivedGracefulRestartState'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_LongLivedGracefulRestartConfig/3}).
v_msg_LongLivedGracefulRestartConfig(#{enabled := F1,
				       restart_time := F2},
				     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [restart_time | Path])
    end,
    ok;
v_msg_LongLivedGracefulRestartConfig(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled, restart_time] -- maps:keys(M),
		   'LongLivedGracefulRestartConfig'},
		  M, Path);
v_msg_LongLivedGracefulRestartConfig(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'LongLivedGracefulRestartConfig'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_LongLivedGracefulRestart/3}).
v_msg_LongLivedGracefulRestart(#{config := F1,
				 state := F2},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_LongLivedGracefulRestartConfig(F1,
						[config | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_LongLivedGracefulRestartState(F2, [state | Path],
					       TrUserData)
    end,
    ok;
v_msg_LongLivedGracefulRestart(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M),
		   'LongLivedGracefulRestart'},
		  M, Path);
v_msg_LongLivedGracefulRestart(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'LongLivedGracefulRestart'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ResetNeighborResponse/3}).
v_msg_ResetNeighborResponse(#{}, _Path, _) -> ok;
v_msg_ResetNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ResetNeighborResponse'},
		  M, Path);
v_msg_ResetNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResetNeighborResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddPathsState/3}).
v_msg_AddPathsState(#{'receive' := F1, send_max := F2},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, ['receive' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [send_max | Path])
    end,
    ok;
v_msg_AddPathsState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   ['receive', send_max] -- maps:keys(M), 'AddPathsState'},
		  M, Path);
v_msg_AddPathsState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPathsState'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddPathsConfig/3}).
v_msg_AddPathsConfig(#{'receive' := F1, send_max := F2},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, ['receive' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [send_max | Path])
    end,
    ok;
v_msg_AddPathsConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   ['receive', send_max] -- maps:keys(M),
		   'AddPathsConfig'},
		  M, Path);
v_msg_AddPathsConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPathsConfig'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddPaths/3}).
v_msg_AddPaths(#{config := F1, state := F2}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_AddPathsConfig(F1, [config | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_AddPathsState(F2, [state | Path], TrUserData)
    end,
    ok;
v_msg_AddPaths(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M), 'AddPaths'},
		  M, Path);
v_msg_AddPaths(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPaths'}, X, Path).

-dialyzer({nowarn_function,v_msg_RouteTargetMembershipState/3}).
v_msg_RouteTargetMembershipState(#{deferral_time := F1},
				 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [deferral_time | Path])
    end,
    ok;
v_msg_RouteTargetMembershipState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [deferral_time] -- maps:keys(M),
		   'RouteTargetMembershipState'},
		  M, Path);
v_msg_RouteTargetMembershipState(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'RouteTargetMembershipState'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_RouteTargetMembershipConfig/3}).
v_msg_RouteTargetMembershipConfig(#{deferral_time :=
					F1},
				  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [deferral_time | Path])
    end,
    ok;
v_msg_RouteTargetMembershipConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [deferral_time] -- maps:keys(M),
		   'RouteTargetMembershipConfig'},
		  M, Path);
v_msg_RouteTargetMembershipConfig(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'RouteTargetMembershipConfig'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_RouteTargetMembership/3}).
v_msg_RouteTargetMembership(#{config := F1,
			      state := F2},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_RouteTargetMembershipConfig(F1, [config | Path],
					     TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_RouteTargetMembershipState(F2, [state | Path],
					    TrUserData)
    end,
    ok;
v_msg_RouteTargetMembership(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M),
		   'RouteTargetMembership'},
		  M, Path);
v_msg_RouteTargetMembership(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RouteTargetMembership'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_RouteSelectionOptionsState/3}).
v_msg_RouteSelectionOptionsState(#{always_compare_med :=
				       F1,
				   ignore_as_path_length := F2,
				   external_compare_router_id := F3,
				   advertise_inactive_routes := F4,
				   enable_aigp := F5,
				   ignore_next_hop_igp_metric := F6},
				 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [always_compare_med | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [ignore_as_path_length | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bool(F3, [external_compare_router_id | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bool(F4, [advertise_inactive_routes | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [enable_aigp | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_bool(F6, [ignore_next_hop_igp_metric | Path])
    end,
    ok;
v_msg_RouteSelectionOptionsState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [always_compare_med, ignore_as_path_length,
		    external_compare_router_id, advertise_inactive_routes,
		    enable_aigp, ignore_next_hop_igp_metric]
		     -- maps:keys(M),
		   'RouteSelectionOptionsState'},
		  M, Path);
v_msg_RouteSelectionOptionsState(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'RouteSelectionOptionsState'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_RouteSelectionOptions/3}).
v_msg_RouteSelectionOptions(#{config := F1,
			      state := F2},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_RouteSelectionOptionsConfig(F1, [config | Path],
					     TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_RouteSelectionOptionsState(F2, [state | Path],
					    TrUserData)
    end,
    ok;
v_msg_RouteSelectionOptions(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M),
		   'RouteSelectionOptions'},
		  M, Path);
v_msg_RouteSelectionOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RouteSelectionOptions'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_MpGracefulRestartState/3}).
v_msg_MpGracefulRestartState(#{enabled := F1,
			       received := F2, advertised := F3,
			       end_of_rib_received := F4,
			       end_of_rib_sent := F5},
			     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [received | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [advertised | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [end_of_rib_received | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [end_of_rib_sent | Path])
    end,
    ok;
v_msg_MpGracefulRestartState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled, received, advertised, end_of_rib_received,
		    end_of_rib_sent]
		     -- maps:keys(M),
		   'MpGracefulRestartState'},
		  M, Path);
v_msg_MpGracefulRestartState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MpGracefulRestartState'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_MpGracefulRestartConfig/3}).
v_msg_MpGracefulRestartConfig(#{enabled := F1}, Path,
			      _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    ok;
v_msg_MpGracefulRestartConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled] -- maps:keys(M), 'MpGracefulRestartConfig'},
		  M, Path);
v_msg_MpGracefulRestartConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MpGracefulRestartConfig'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_MpGracefulRestart/3}).
v_msg_MpGracefulRestart(#{config := F1, state := F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_MpGracefulRestartConfig(F1, [config | Path],
					 TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_MpGracefulRestartState(F2, [state | Path],
					TrUserData)
    end,
    ok;
v_msg_MpGracefulRestart(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M), 'MpGracefulRestart'},
		  M, Path);
v_msg_MpGracefulRestart(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MpGracefulRestart'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AfiSafi/3}).
v_msg_AfiSafi(#{mp_graceful_restart := F1, config := F2,
		apply_policy := F3, route_selection_options := F4,
		use_multiple_paths := F5, prefix_limits := F6,
		route_target_membership := F7,
		long_lived_graceful_restart := F8, add_paths := F9},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_MpGracefulRestart(F1,
				   [mp_graceful_restart | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_AfiSafiConfig(F2, [config | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_ApplyPolicy(F3, [apply_policy | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_RouteSelectionOptions(F4,
				       [route_selection_options | Path],
				       TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_UseMultiplePaths(F5, [use_multiple_paths | Path],
				  TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_PrefixLimit(F6, [prefix_limits | Path],
			     TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_RouteTargetMembership(F7,
				       [route_target_membership | Path],
				       TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_LongLivedGracefulRestart(F8,
					  [long_lived_graceful_restart | Path],
					  TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_AddPaths(F9, [add_paths | Path], TrUserData)
    end,
    ok;
v_msg_AfiSafi(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [mp_graceful_restart, config, apply_policy,
		    route_selection_options, use_multiple_paths,
		    prefix_limits, route_target_membership,
		    long_lived_graceful_restart, add_paths]
		     -- maps:keys(M),
		   'AfiSafi'},
		  M, Path);
v_msg_AfiSafi(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AfiSafi'}, X, Path).

-dialyzer({nowarn_function,v_msg_GracefulRestart/3}).
v_msg_GracefulRestart(#{enabled := F1,
			restart_time := F2, helper_only := F3,
			deferral_time := F4, notification_enabled := F5,
			longlived_enabled := F6},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [restart_time | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [helper_only | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [deferral_time | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [notification_enabled | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [longlived_enabled | Path])
    end,
    ok;
v_msg_GracefulRestart(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled, restart_time, helper_only, deferral_time,
		    notification_enabled, longlived_enabled]
		     -- maps:keys(M),
		   'GracefulRestart'},
		  M, Path);
v_msg_GracefulRestart(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GracefulRestart'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RouteServer/3}).
v_msg_RouteServer(#{route_server_client := F1}, Path,
		  _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [route_server_client | Path])
    end,
    ok;
v_msg_RouteServer(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [route_server_client] -- maps:keys(M), 'RouteServer'},
		  M, Path);
v_msg_RouteServer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RouteServer'}, X, Path).

-dialyzer({nowarn_function,v_msg_TimersState/3}).
v_msg_TimersState(#{connect_retry := F1,
		    hold_time := F2, keepalive_interval := F3,
		    minimum_advertisement_interval := F4,
		    negotiated_hold_time := F5, uptime := F6,
		    downtime := F7},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [connect_retry | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [hold_time | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [keepalive_interval | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4,
			 [minimum_advertisement_interval | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [negotiated_hold_time | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [uptime | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [downtime | Path])
    end,
    ok;
v_msg_TimersState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [connect_retry, hold_time, keepalive_interval,
		    minimum_advertisement_interval, negotiated_hold_time,
		    uptime, downtime]
		     -- maps:keys(M),
		   'TimersState'},
		  M, Path);
v_msg_TimersState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TimersState'}, X, Path).

-dialyzer({nowarn_function,v_msg_TimersConfig/3}).
v_msg_TimersConfig(#{connect_retry := F1,
		     hold_time := F2, keepalive_interval := F3,
		     minimum_advertisement_interval := F4},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [connect_retry | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [hold_time | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [keepalive_interval | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4,
			 [minimum_advertisement_interval | Path])
    end,
    ok;
v_msg_TimersConfig(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [connect_retry, hold_time, keepalive_interval,
		    minimum_advertisement_interval]
		     -- maps:keys(M),
		   'TimersConfig'},
		  M, Path);
v_msg_TimersConfig(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TimersConfig'}, X, Path).

-dialyzer({nowarn_function,v_msg_Timers/3}).
v_msg_Timers(#{config := F1, state := F2}, Path,
	     TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_TimersConfig(F1, [config | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_TimersState(F2, [state | Path], TrUserData)
    end,
    ok;
v_msg_Timers(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [config, state] -- maps:keys(M), 'Timers'},
		  M, Path);
v_msg_Timers(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Timers'}, X, Path).

-dialyzer({nowarn_function,v_msg_Queues/3}).
v_msg_Queues(#{input := F1, output := F2}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [input | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [output | Path])
    end,
    ok;
v_msg_Queues(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [input, output] -- maps:keys(M), 'Queues'},
		  M, Path);
v_msg_Queues(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Queues'}, X, Path).

-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{'NOTIFICATION' := F1, 'UPDATE' := F2,
		'OPEN' := F3, 'KEEPALIVE' := F4, 'REFRESH' := F5,
		'DISCARDED' := F6, 'TOTAL' := F7},
	      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, ['NOTIFICATION' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, ['UPDATE' | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, ['OPEN' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, ['KEEPALIVE' | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, ['REFRESH' | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, ['DISCARDED' | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, ['TOTAL' | Path])
    end,
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   ['NOTIFICATION', 'UPDATE', 'OPEN', 'KEEPALIVE',
		    'REFRESH', 'DISCARDED', 'TOTAL']
		     -- maps:keys(M),
		   'Message'},
		  M, Path);
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-dialyzer({nowarn_function,v_msg_Messages/3}).
v_msg_Messages(#{received := F1, sent := F2}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Message(F1, [received | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Message(F2, [sent | Path], TrUserData)
    end,
    ok;
v_msg_Messages(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [received, sent] -- maps:keys(M), 'Messages'},
		  M, Path);
v_msg_Messages(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Messages'}, X, Path).

-dialyzer({nowarn_function,v_msg_PeerState/3}).
v_msg_PeerState(#{auth_password := F1,
		  description := F2, local_as := F3, messages := F4,
		  neighbor_address := F5, peer_as := F6, peer_group := F7,
		  peer_type := F8, queues := F9, remove_private_as := F10,
		  route_flap_damping := F11, send_community := F12,
		  session_state := F13, supported_capabilities := F14,
		  bgp_state := F15, admin_state := F16, received := F17,
		  accepted := F18, advertised := F19, out_q := F20,
		  flops := F21},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [auth_password | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [description | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [local_as | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_Messages(F4, [messages | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [neighbor_address | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [peer_as | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [peer_group | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [peer_type | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_msg_Queues(F9, [queues | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [remove_private_as | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [route_flap_damping | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [send_community | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [session_state | Path])
    end,
    if is_list(F14) ->
	   _ = [v_type_string(Elem,
			      [supported_capabilities | Path])
		|| Elem <- F14],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F14,
			 [supported_capabilities | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_string(F15, [bgp_state | Path])
    end,
    if F16 == undefined -> ok;
       true ->
	   'v_enum_PeerState.AdminState'(F16, [admin_state | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint32(F17, [received | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [accepted | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint32(F19, [advertised | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_uint32(F20, [out_q | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_uint32(F21, [flops | Path])
    end,
    ok;
v_msg_PeerState(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [auth_password, description, local_as, messages,
		    neighbor_address, peer_as, peer_group, peer_type,
		    queues, remove_private_as, route_flap_damping,
		    send_community, session_state, supported_capabilities,
		    bgp_state, admin_state, received, accepted, advertised,
		    out_q, flops]
		     -- maps:keys(M),
		   'PeerState'},
		  M, Path);
v_msg_PeerState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PeerState'}, X, Path).

-dialyzer({nowarn_function,v_msg_RouteReflector/3}).
v_msg_RouteReflector(#{route_reflector_client := F1,
		       route_reflector_cluster_id := F2},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [route_reflector_client | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [route_reflector_cluster_id | Path])
    end,
    ok;
v_msg_RouteReflector(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [route_reflector_client, route_reflector_cluster_id] --
		     maps:keys(M),
		   'RouteReflector'},
		  M, Path);
v_msg_RouteReflector(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RouteReflector'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EbgpMultihop/3}).
v_msg_EbgpMultihop(#{enabled := F1, multihop_ttl := F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enabled | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [multihop_ttl | Path])
    end,
    ok;
v_msg_EbgpMultihop(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enabled, multihop_ttl] -- maps:keys(M),
		   'EbgpMultihop'},
		  M, Path);
v_msg_EbgpMultihop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EbgpMultihop'}, X, Path).

-dialyzer({nowarn_function,v_msg_Peer/3}).
v_msg_Peer(#{families := F1, apply_policy := F2,
	     conf := F3, ebgp_multihop := F4, route_reflector := F5,
	     info := F6, timers := F7, transport := F8,
	     route_server := F9, graceful_restart := F10,
	     afi_safis := F11, add_paths := F12},
	   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [families | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [families | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_ApplyPolicy(F2, [apply_policy | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_PeerConf(F3, [conf | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_EbgpMultihop(F4, [ebgp_multihop | Path],
			      TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_RouteReflector(F5, [route_reflector | Path],
				TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_msg_PeerState(F6, [info | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_msg_Timers(F7, [timers | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_Transport(F8, [transport | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_RouteServer(F9, [route_server | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_msg_GracefulRestart(F10, [graceful_restart | Path],
				 TrUserData)
    end,
    if is_list(F11) ->
	   _ = [v_msg_AfiSafi(Elem, [afi_safis | Path], TrUserData)
		|| Elem <- F11],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'AfiSafi'}}, F11,
			 [afi_safis | Path])
    end,
    if F12 == undefined -> ok;
       true ->
	   v_msg_AddPaths(F12, [add_paths | Path], TrUserData)
    end,
    ok;
v_msg_Peer(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [families, apply_policy, conf, ebgp_multihop,
		    route_reflector, info, timers, transport, route_server,
		    graceful_restart, afi_safis, add_paths]
		     -- maps:keys(M),
		   'Peer'},
		  M, Path);
v_msg_Peer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Peer'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddNeighborRequest/3}).
v_msg_AddNeighborRequest(#{peer := F1}, Path,
			 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Peer(F1, [peer | Path], TrUserData)
    end,
    ok;
v_msg_AddNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [peer] -- maps:keys(M),
		   'AddNeighborRequest'},
		  M, Path);
v_msg_AddNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddNeighborRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ValidateRibRequest/3}).
v_msg_ValidateRibRequest(#{type := F1, family := F2,
			   prefix := F3},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [family | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [prefix | Path])
    end,
    ok;
v_msg_ValidateRibRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, family, prefix] -- maps:keys(M),
		   'ValidateRibRequest'},
		  M, Path);
v_msg_ValidateRibRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ValidateRibRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeletePolicyAssignmentRequest/3}).
v_msg_DeletePolicyAssignmentRequest(#{assignment := F1,
				      all := F2},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F1, [assignment | Path],
				  TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [all | Path])
    end,
    ok;
v_msg_DeletePolicyAssignmentRequest(M, Path,
				    _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [assignment, all] -- maps:keys(M),
		   'DeletePolicyAssignmentRequest'},
		  M, Path);
v_msg_DeletePolicyAssignmentRequest(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'DeletePolicyAssignmentRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_RPKIValidation/3}).
v_msg_RPKIValidation(#{state := F1, reason := F2,
		       matched := F3, unmatched_as := F4,
		       unmatched_length := F5},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_RPKIValidation.State'(F1, [state | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_RPKIValidation.Reason'(F2, [reason | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_Roa(Elem, [matched | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Roa'}}, F3,
			 [matched | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_Roa(Elem, [unmatched_as | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Roa'}}, F4,
			 [unmatched_as | Path])
    end,
    if is_list(F5) ->
	   _ = [v_msg_Roa(Elem, [unmatched_length | Path],
			  TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Roa'}}, F5,
			 [unmatched_length | Path])
    end,
    ok;
v_msg_RPKIValidation(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [state, reason, matched, unmatched_as, unmatched_length]
		     -- maps:keys(M),
		   'RPKIValidation'},
		  M, Path);
v_msg_RPKIValidation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RPKIValidation'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Path/3}).
v_msg_Path(#{nlri := F1, pattrs := F2, age := F3,
	     best := F4, is_withdraw := F5, validation := F6,
	     validation_detail := F7, no_implicit_withdraw := F8,
	     family := F9, source_asn := F10, source_id := F11,
	     filtered := F12, stale := F13, is_from_external := F14,
	     neighbor_ip := F15, uuid := F16,
	     is_nexthop_invalid := F17, identifier := F18,
	     local_identifier := F19},
	   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [nlri | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_bytes(Elem, [pattrs | Path]) || Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F2,
			 [pattrs | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [age | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [best | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [is_withdraw | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [validation | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_RPKIValidation(F7, [validation_detail | Path],
				TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [no_implicit_withdraw | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [family | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [source_asn | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [source_id | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_bool(F12, [filtered | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [stale | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_bool(F14, [is_from_external | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_string(F15, [neighbor_ip | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_bytes(F16, [uuid | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_bool(F17, [is_nexthop_invalid | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [identifier | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint32(F19, [local_identifier | Path])
    end,
    ok;
v_msg_Path(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [nlri, pattrs, age, best, is_withdraw, validation,
		    validation_detail, no_implicit_withdraw, family,
		    source_asn, source_id, filtered, stale,
		    is_from_external, neighbor_ip, uuid, is_nexthop_invalid,
		    identifier, local_identifier]
		     -- maps:keys(M),
		   'Path'},
		  M, Path);
v_msg_Path(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Path'}, X, Path).

-dialyzer({nowarn_function,v_msg_Destination/3}).
v_msg_Destination(#{prefix := F1, paths := F2,
		    longer_prefixes := F3, shorter_prefixes := F4},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [prefix | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_Path(Elem, [paths | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Path'}}, F2,
			 [paths | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [longer_prefixes | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [shorter_prefixes | Path])
    end,
    ok;
v_msg_Destination(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [prefix, paths, longer_prefixes, shorter_prefixes] --
		     maps:keys(M),
		   'Destination'},
		  M, Path);
v_msg_Destination(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Destination'}, X, Path).

-dialyzer({nowarn_function,v_msg_Table/3}).
v_msg_Table(#{type := F1, name := F2, family := F3,
	      destinations := F4, post_policy := F5},
	    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [family | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_Destination(Elem, [destinations | Path],
				  TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Destination'}},
			 F4, [destinations | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [post_policy | Path])
    end,
    ok;
v_msg_Table(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, name, family, destinations, post_policy] --
		     maps:keys(M),
		   'Table'},
		  M, Path);
v_msg_Table(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Table'}, X, Path).

-dialyzer({nowarn_function,v_msg_MonitorRibRequest/3}).
v_msg_MonitorRibRequest(#{table := F1, current := F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Table(F1, [table | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [current | Path])
    end,
    ok;
v_msg_MonitorRibRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [table, current] -- maps:keys(M), 'MonitorRibRequest'},
		  M, Path);
v_msg_MonitorRibRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MonitorRibRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ShutdownNeighborResponse/3}).
v_msg_ShutdownNeighborResponse(#{}, _Path, _) -> ok;
v_msg_ShutdownNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ShutdownNeighborResponse'},
		  M, Path);
v_msg_ShutdownNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ShutdownNeighborResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddRpkiResponse/3}).
v_msg_AddRpkiResponse(#{}, _Path, _) -> ok;
v_msg_AddRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddRpkiResponse'},
		  M, Path);
v_msg_AddRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddRpkiResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddPolicyRequest/3}).
v_msg_AddPolicyRequest(#{policy := F1,
			 refer_existing_statements := F2},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Policy(F1, [policy | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2, [refer_existing_statements | Path])
    end,
    ok;
v_msg_AddPolicyRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [policy, refer_existing_statements] -- maps:keys(M),
		   'AddPolicyRequest'},
		  M, Path);
v_msg_AddPolicyRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPolicyRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RPKIState/3}).
v_msg_RPKIState(#{uptime := F1, downtime := F2,
		  up := F3, record_ipv4 := F4, record_ipv6 := F5,
		  prefix_ipv4 := F6, prefix_ipv6 := F7, serial := F8,
		  received_ipv4 := F9, received_ipv6 := F10,
		  serial_notify := F11, cache_reset := F12,
		  cache_response := F13, end_of_data := F14, error := F15,
		  serial_query := F16, reset_query := F17},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [uptime | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [downtime | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [up | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [record_ipv4 | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [record_ipv6 | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [prefix_ipv4 | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [prefix_ipv6 | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [serial | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_int64(F9, [received_ipv4 | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, [received_ipv6 | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, [serial_notify | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_int64(F12, [cache_reset | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_int64(F13, [cache_response | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_int64(F14, [end_of_data | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_int64(F15, [error | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_int64(F16, [serial_query | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_int64(F17, [reset_query | Path])
    end,
    ok;
v_msg_RPKIState(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [uptime, downtime, up, record_ipv4, record_ipv6,
		    prefix_ipv4, prefix_ipv6, serial, received_ipv4,
		    received_ipv6, serial_notify, cache_reset,
		    cache_response, end_of_data, error, serial_query,
		    reset_query]
		     -- maps:keys(M),
		   'RPKIState'},
		  M, Path);
v_msg_RPKIState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RPKIState'}, X, Path).

-dialyzer({nowarn_function,v_msg_Rpki/3}).
v_msg_Rpki(#{conf := F1, state := F2}, Path,
	   TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_RPKIConf(F1, [conf | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_RPKIState(F2, [state | Path], TrUserData)
    end,
    ok;
v_msg_Rpki(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [conf, state] -- maps:keys(M), 'Rpki'},
		  M, Path);
v_msg_Rpki(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Rpki'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddPathRequest/3}).
v_msg_AddPathRequest(#{resource := F1, vrf_id := F2,
		       path := F3},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [resource | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [vrf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_msg_Path(F3, [path | Path], TrUserData)
    end,
    ok;
v_msg_AddPathRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [resource, vrf_id, path] -- maps:keys(M),
		   'AddPathRequest'},
		  M, Path);
v_msg_AddPathRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPathRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResetRpkiResponse/3}).
v_msg_ResetRpkiResponse(#{}, _Path, _) -> ok;
v_msg_ResetRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ResetRpkiResponse'},
		  M, Path);
v_msg_ResetRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResetRpkiResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResetRpkiRequest/3}).
v_msg_ResetRpkiRequest(#{address := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    ok;
v_msg_ResetRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address] -- maps:keys(M), 'ResetRpkiRequest'},
		  M, Path);
v_msg_ResetRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResetRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_SoftResetNeighborRequest/3}).
v_msg_SoftResetNeighborRequest(#{address := F1,
				 direction := F2},
			       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_SoftResetNeighborRequest.SoftResetDirection'(F2,
								[direction
								 | Path])
    end,
    ok;
v_msg_SoftResetNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, direction] -- maps:keys(M),
		   'SoftResetNeighborRequest'},
		  M, Path);
v_msg_SoftResetNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'SoftResetNeighborRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddPolicyResponse/3}).
v_msg_AddPolicyResponse(#{}, _Path, _) -> ok;
v_msg_AddPolicyResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddPolicyResponse'},
		  M, Path);
v_msg_AddPolicyResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPolicyResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableNeighborRequest/3}).
v_msg_EnableNeighborRequest(#{address := F1}, Path,
			    _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    ok;
v_msg_EnableNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address] -- maps:keys(M), 'EnableNeighborRequest'},
		  M, Path);
v_msg_EnableNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableNeighborRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddPathResponse/3}).
v_msg_AddPathResponse(#{uuid := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [uuid | Path])
    end,
    ok;
v_msg_AddPathResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [uuid] -- maps:keys(M),
		   'AddPathResponse'},
		  M, Path);
v_msg_AddPathResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddPathResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Vrf/3}).
v_msg_Vrf(#{name := F1, rd := F2, import_rt := F3,
	    export_rt := F4, id := F5},
	  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [rd | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_bytes(Elem, [import_rt | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F3,
			 [import_rt | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_bytes(Elem, [export_rt | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F4,
			 [export_rt | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [id | Path])
    end,
    ok;
v_msg_Vrf(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [name, rd, import_rt, export_rt, id] -- maps:keys(M),
		   'Vrf'},
		  M, Path);
v_msg_Vrf(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Vrf'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetVrfResponse/3}).
v_msg_GetVrfResponse(#{vrfs := F1}, Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Vrf(Elem, [vrfs | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Vrf'}}, F1,
			 [vrfs | Path])
    end,
    ok;
v_msg_GetVrfResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [vrfs] -- maps:keys(M),
		   'GetVrfResponse'},
		  M, Path);
v_msg_GetVrfResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetVrfResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_SoftResetRpkiRequest/3}).
v_msg_SoftResetRpkiRequest(#{address := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    ok;
v_msg_SoftResetRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address] -- maps:keys(M), 'SoftResetRpkiRequest'},
		  M, Path);
v_msg_SoftResetRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SoftResetRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_StopServerRequest/3}).
v_msg_StopServerRequest(#{}, _Path, _) -> ok;
v_msg_StopServerRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StopServerRequest'},
		  M, Path);
v_msg_StopServerRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StopServerRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddBmpResponse/3}).
v_msg_AddBmpResponse(#{}, _Path, _) -> ok;
v_msg_AddBmpResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddBmpResponse'},
		  M, Path);
v_msg_AddBmpResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddBmpResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetRpkiRequest/3}).
v_msg_GetRpkiRequest(#{family := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [family | Path])
    end,
    ok;
v_msg_GetRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [family] -- maps:keys(M),
		   'GetRpkiRequest'},
		  M, Path);
v_msg_GetRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeleteNeighborRequest/3}).
v_msg_DeleteNeighborRequest(#{peer := F1}, Path,
			    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Peer(F1, [peer | Path], TrUserData)
    end,
    ok;
v_msg_DeleteNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [peer] -- maps:keys(M),
		   'DeleteNeighborRequest'},
		  M, Path);
v_msg_DeleteNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteNeighborRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AfiSafiState/3}).
v_msg_AfiSafiState(#{family := F1, enabled := F2,
		     total_paths := F3, total_prefixes := F4},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [family | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [enabled | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [total_paths | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [total_prefixes | Path])
    end,
    ok;
v_msg_AfiSafiState(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [family, enabled, total_paths, total_prefixes] --
		     maps:keys(M),
		   'AfiSafiState'},
		  M, Path);
v_msg_AfiSafiState(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AfiSafiState'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetServerResponse/3}).
v_msg_GetServerResponse(#{global := F1}, Path,
			TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Global(F1, [global | Path], TrUserData)
    end,
    ok;
v_msg_GetServerResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [global] -- maps:keys(M),
		   'GetServerResponse'},
		  M, Path);
v_msg_GetServerResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetServerResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableMrtResponse/3}).
v_msg_EnableMrtResponse(#{}, _Path, _) -> ok;
v_msg_EnableMrtResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'EnableMrtResponse'},
		  M, Path);
v_msg_EnableMrtResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableMrtResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_InjectMrtRequest/3}).
v_msg_InjectMrtRequest(#{resource := F1, vrf_id := F2,
			 paths := F3},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [resource | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [vrf_id | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_Path(Elem, [paths | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Path'}}, F3,
			 [paths | Path])
    end,
    ok;
v_msg_InjectMrtRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [resource, vrf_id, paths] -- maps:keys(M),
		   'InjectMrtRequest'},
		  M, Path);
v_msg_InjectMrtRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InjectMrtRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Prefix/3}).
v_msg_Prefix(#{ip_prefix := F1, mask_length_min := F2,
	       mask_length_max := F3},
	     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [ip_prefix | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [mask_length_min | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [mask_length_max | Path])
    end,
    ok;
v_msg_Prefix(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [ip_prefix, mask_length_min, mask_length_max] --
		     maps:keys(M),
		   'Prefix'},
		  M, Path);
v_msg_Prefix(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Prefix'}, X, Path).

-dialyzer({nowarn_function,v_msg_DefinedSet/3}).
v_msg_DefinedSet(#{type := F1, name := F2, list := F3,
		   prefixes := F4},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_DefinedType(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [list | Path]) || Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3,
			 [list | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_Prefix(Elem, [prefixes | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Prefix'}}, F4,
			 [prefixes | Path])
    end,
    ok;
v_msg_DefinedSet(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, name, list, prefixes] -- maps:keys(M),
		   'DefinedSet'},
		  M, Path);
v_msg_DefinedSet(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DefinedSet'}, X, Path).

-dialyzer({nowarn_function,v_msg_AddDefinedSetRequest/3}).
v_msg_AddDefinedSetRequest(#{set := F1}, Path,
			   TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_DefinedSet(F1, [set | Path], TrUserData)
    end,
    ok;
v_msg_AddDefinedSetRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [set] -- maps:keys(M),
		   'AddDefinedSetRequest'},
		  M, Path);
v_msg_AddDefinedSetRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddDefinedSetRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplacePolicyAssignmentRequest/3}).
v_msg_ReplacePolicyAssignmentRequest(#{assignment :=
					   F1},
				     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F1, [assignment | Path],
				  TrUserData)
    end,
    ok;
v_msg_ReplacePolicyAssignmentRequest(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [assignment] -- maps:keys(M),
		   'ReplacePolicyAssignmentRequest'},
		  M, Path);
v_msg_ReplacePolicyAssignmentRequest(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReplacePolicyAssignmentRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeletePathResponse/3}).
v_msg_DeletePathResponse(#{}, _Path, _) -> ok;
v_msg_DeletePathResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeletePathResponse'},
		  M, Path);
v_msg_DeletePathResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeletePathResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeletePolicyRequest/3}).
v_msg_DeletePolicyRequest(#{policy := F1,
			    preserve_statements := F2, all := F3},
			  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Policy(F1, [policy | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [preserve_statements | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [all | Path])
    end,
    ok;
v_msg_DeletePolicyRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [policy, preserve_statements, all] -- maps:keys(M),
		   'DeletePolicyRequest'},
		  M, Path);
v_msg_DeletePolicyRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeletePolicyRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeleteVrfRequest/3}).
v_msg_DeleteVrfRequest(#{vrf := F1}, Path,
		       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Vrf(F1, [vrf | Path], TrUserData)
    end,
    ok;
v_msg_DeleteVrfRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [vrf] -- maps:keys(M),
		   'DeleteVrfRequest'},
		  M, Path);
v_msg_DeleteVrfRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteVrfRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetPolicyAssignmentResponse/3}).
v_msg_GetPolicyAssignmentResponse(#{assignment := F1},
				  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F1, [assignment | Path],
				  TrUserData)
    end,
    ok;
v_msg_GetPolicyAssignmentResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [assignment] -- maps:keys(M),
		   'GetPolicyAssignmentResponse'},
		  M, Path);
v_msg_GetPolicyAssignmentResponse(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetPolicyAssignmentResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeleteDefinedSetResponse/3}).
v_msg_DeleteDefinedSetResponse(#{}, _Path, _) -> ok;
v_msg_DeleteDefinedSetResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteDefinedSetResponse'},
		  M, Path);
v_msg_DeleteDefinedSetResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'DeleteDefinedSetResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ReplacePolicyAssignmentResponse/3}).
v_msg_ReplacePolicyAssignmentResponse(#{}, _Path, _) ->
    ok;
v_msg_ReplacePolicyAssignmentResponse(M, Path,
				      _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReplacePolicyAssignmentResponse'},
		  M, Path);
v_msg_ReplacePolicyAssignmentResponse(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReplacePolicyAssignmentResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetServerRequest/3}).
v_msg_GetServerRequest(#{}, _Path, _) -> ok;
v_msg_GetServerRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetServerRequest'},
		  M, Path);
v_msg_GetServerRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetServerRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddBmpRequest/3}).
v_msg_AddBmpRequest(#{address := F1, port := F2,
		      type := F3},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [port | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_AddBmpRequest.MonitoringPolicy'(F3,
						   [type | Path])
    end,
    ok;
v_msg_AddBmpRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, port, type] -- maps:keys(M), 'AddBmpRequest'},
		  M, Path);
v_msg_AddBmpRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddBmpRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResetNeighborRequest/3}).
v_msg_ResetNeighborRequest(#{address := F1,
			     communication := F2},
			   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [communication | Path])
    end,
    ok;
v_msg_ResetNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, communication] -- maps:keys(M),
		   'ResetNeighborRequest'},
		  M, Path);
v_msg_ResetNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResetNeighborRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetRibInfoRequest/3}).
v_msg_GetRibInfoRequest(#{info := F1}, Path,
			TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_TableInfo(F1, [info | Path], TrUserData)
    end,
    ok;
v_msg_GetRibInfoRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [info] -- maps:keys(M),
		   'GetRibInfoRequest'},
		  M, Path);
v_msg_GetRibInfoRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRibInfoRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetRibRequest/3}).
v_msg_GetRibRequest(#{table := F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Table(F1, [table | Path], TrUserData)
    end,
    ok;
v_msg_GetRibRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [table] -- maps:keys(M),
		   'GetRibRequest'},
		  M, Path);
v_msg_GetRibRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRibRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetStatementRequest/3}).
v_msg_GetStatementRequest(#{}, _Path, _) -> ok;
v_msg_GetStatementRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetStatementRequest'},
		  M, Path);
v_msg_GetStatementRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetStatementRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplaceStatementRequest/3}).
v_msg_ReplaceStatementRequest(#{statement := F1}, Path,
			      TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_Statement(F1, [statement | Path], TrUserData)
    end,
    ok;
v_msg_ReplaceStatementRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [statement] -- maps:keys(M), 'ReplaceStatementRequest'},
		  M, Path);
v_msg_ReplaceStatementRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReplaceStatementRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_StopServerResponse/3}).
v_msg_StopServerResponse(#{}, _Path, _) -> ok;
v_msg_StopServerResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StopServerResponse'},
		  M, Path);
v_msg_StopServerResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StopServerResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeleteStatementRequest/3}).
v_msg_DeleteStatementRequest(#{statement := F1,
			       all := F2},
			     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_Statement(F1, [statement | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [all | Path])
    end,
    ok;
v_msg_DeleteStatementRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [statement, all] -- maps:keys(M),
		   'DeleteStatementRequest'},
		  M, Path);
v_msg_DeleteStatementRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteStatementRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddRpkiRequest/3}).
v_msg_AddRpkiRequest(#{address := F1, port := F2,
		       lifetime := F3},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [port | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [lifetime | Path])
    end,
    ok;
v_msg_AddRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, port, lifetime] -- maps:keys(M),
		   'AddRpkiRequest'},
		  M, Path);
v_msg_AddRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetRibResponse/3}).
v_msg_GetRibResponse(#{table := F1}, Path,
		     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Table(F1, [table | Path], TrUserData)
    end,
    ok;
v_msg_GetRibResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [table] -- maps:keys(M),
		   'GetRibResponse'},
		  M, Path);
v_msg_GetRibResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRibResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DisableMrtRequest/3}).
v_msg_DisableMrtRequest(#{}, _Path, _) -> ok;
v_msg_DisableMrtRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DisableMrtRequest'},
		  M, Path);
v_msg_DisableMrtRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisableMrtRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DisableRpkiRequest/3}).
v_msg_DisableRpkiRequest(#{address := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    ok;
v_msg_DisableRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address] -- maps:keys(M), 'DisableRpkiRequest'},
		  M, Path);
v_msg_DisableRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisableRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableRpkiResponse/3}).
v_msg_EnableRpkiResponse(#{}, _Path, _) -> ok;
v_msg_EnableRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'EnableRpkiResponse'},
		  M, Path);
v_msg_EnableRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableRpkiResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplaceDefinedSetRequest/3}).
v_msg_ReplaceDefinedSetRequest(#{set := F1}, Path,
			       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_DefinedSet(F1, [set | Path], TrUserData)
    end,
    ok;
v_msg_ReplaceDefinedSetRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [set] -- maps:keys(M),
		   'ReplaceDefinedSetRequest'},
		  M, Path);
v_msg_ReplaceDefinedSetRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReplaceDefinedSetRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DisableNeighborRequest/3}).
v_msg_DisableNeighborRequest(#{address := F1,
			       communication := F2},
			     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [communication | Path])
    end,
    ok;
v_msg_DisableNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, communication] -- maps:keys(M),
		   'DisableNeighborRequest'},
		  M, Path);
v_msg_DisableNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisableNeighborRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeletePolicyResponse/3}).
v_msg_DeletePolicyResponse(#{}, _Path, _) -> ok;
v_msg_DeletePolicyResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeletePolicyResponse'},
		  M, Path);
v_msg_DeletePolicyResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeletePolicyResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_SoftResetRpkiResponse/3}).
v_msg_SoftResetRpkiResponse(#{}, _Path, _) -> ok;
v_msg_SoftResetRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'SoftResetRpkiResponse'},
		  M, Path);
v_msg_SoftResetRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SoftResetRpkiResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetNeighborResponse/3}).
v_msg_GetNeighborResponse(#{peers := F1}, Path,
			  TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Peer(Elem, [peers | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Peer'}}, F1,
			 [peers | Path])
    end,
    ok;
v_msg_GetNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [peers] -- maps:keys(M),
		   'GetNeighborResponse'},
		  M, Path);
v_msg_GetNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetNeighborResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplacePolicyResponse/3}).
v_msg_ReplacePolicyResponse(#{}, _Path, _) -> ok;
v_msg_ReplacePolicyResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReplacePolicyResponse'},
		  M, Path);
v_msg_ReplacePolicyResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReplacePolicyResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetRpkiResponse/3}).
v_msg_GetRpkiResponse(#{servers := F1}, Path,
		      TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Rpki(Elem, [servers | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Rpki'}}, F1,
			 [servers | Path])
    end,
    ok;
v_msg_GetRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [servers] -- maps:keys(M), 'GetRpkiResponse'},
		  M, Path);
v_msg_GetRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRpkiResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_SoftResetNeighborResponse/3}).
v_msg_SoftResetNeighborResponse(#{}, _Path, _) -> ok;
v_msg_SoftResetNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'SoftResetNeighborResponse'},
		  M, Path);
v_msg_SoftResetNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'SoftResetNeighborResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_AddDefinedSetResponse/3}).
v_msg_AddDefinedSetResponse(#{}, _Path, _) -> ok;
v_msg_AddDefinedSetResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddDefinedSetResponse'},
		  M, Path);
v_msg_AddDefinedSetResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddDefinedSetResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetNeighborRequest/3}).
v_msg_GetNeighborRequest(#{enableAdvertised := F1,
			   address := F2},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [enableAdvertised | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [address | Path])
    end,
    ok;
v_msg_GetNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [enableAdvertised, address] -- maps:keys(M),
		   'GetNeighborRequest'},
		  M, Path);
v_msg_GetNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetNeighborRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableMrtRequest/3}).
v_msg_EnableMrtRequest(#{dump_type := F1,
			 filename := F2, interval := F3},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [dump_type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [filename | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [interval | Path])
    end,
    ok;
v_msg_EnableMrtRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [dump_type, filename, interval] -- maps:keys(M),
		   'EnableMrtRequest'},
		  M, Path);
v_msg_EnableMrtRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableMrtRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplacePolicyRequest/3}).
v_msg_ReplacePolicyRequest(#{policy := F1,
			     refer_existing_statements := F2,
			     preserve_statements := F3},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Policy(F1, [policy | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2, [refer_existing_statements | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [preserve_statements | Path])
    end,
    ok;
v_msg_ReplacePolicyRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [policy, refer_existing_statements, preserve_statements]
		     -- maps:keys(M),
		   'ReplacePolicyRequest'},
		  M, Path);
v_msg_ReplacePolicyRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReplacePolicyRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Arguments/3}).
v_msg_Arguments(#{resource := F1, family := F2,
		  name := F3},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [resource | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [family | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    ok;
v_msg_Arguments(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [resource, family, name] -- maps:keys(M), 'Arguments'},
		  M, Path);
v_msg_Arguments(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Arguments'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetRoaRequest/3}).
v_msg_GetRoaRequest(#{family := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [family | Path])
    end,
    ok;
v_msg_GetRoaRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [family] -- maps:keys(M),
		   'GetRoaRequest'},
		  M, Path);
v_msg_GetRoaRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRoaRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_DeleteDefinedSetRequest/3}).
v_msg_DeleteDefinedSetRequest(#{set := F1, all := F2},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_DefinedSet(F1, [set | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [all | Path])
    end,
    ok;
v_msg_DeleteDefinedSetRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [set, all] -- maps:keys(M), 'DeleteDefinedSetRequest'},
		  M, Path);
v_msg_DeleteDefinedSetRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteDefinedSetRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeleteRpkiResponse/3}).
v_msg_DeleteRpkiResponse(#{}, _Path, _) -> ok;
v_msg_DeleteRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteRpkiResponse'},
		  M, Path);
v_msg_DeleteRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteRpkiResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableZebraResponse/3}).
v_msg_EnableZebraResponse(#{}, _Path, _) -> ok;
v_msg_EnableZebraResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'EnableZebraResponse'},
		  M, Path);
v_msg_EnableZebraResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableZebraResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_StartServerResponse/3}).
v_msg_StartServerResponse(#{}, _Path, _) -> ok;
v_msg_StartServerResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StartServerResponse'},
		  M, Path);
v_msg_StartServerResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StartServerResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplaceDefinedSetResponse/3}).
v_msg_ReplaceDefinedSetResponse(#{}, _Path, _) -> ok;
v_msg_ReplaceDefinedSetResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReplaceDefinedSetResponse'},
		  M, Path);
v_msg_ReplaceDefinedSetResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReplaceDefinedSetResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetDefinedSetResponse/3}).
v_msg_GetDefinedSetResponse(#{sets := F1}, Path,
			    TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_DefinedSet(Elem, [sets | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'DefinedSet'}},
			 F1, [sets | Path])
    end,
    ok;
v_msg_GetDefinedSetResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [sets] -- maps:keys(M),
		   'GetDefinedSetResponse'},
		  M, Path);
v_msg_GetDefinedSetResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetDefinedSetResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ShutdownNeighborRequest/3}).
v_msg_ShutdownNeighborRequest(#{address := F1,
				communication := F2},
			      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [communication | Path])
    end,
    ok;
v_msg_ShutdownNeighborRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, communication] -- maps:keys(M),
		   'ShutdownNeighborRequest'},
		  M, Path);
v_msg_ShutdownNeighborRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShutdownNeighborRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ValidateRibResponse/3}).
v_msg_ValidateRibResponse(#{}, _Path, _) -> ok;
v_msg_ValidateRibResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ValidateRibResponse'},
		  M, Path);
v_msg_ValidateRibResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ValidateRibResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeletePolicyAssignmentResponse/3}).
v_msg_DeletePolicyAssignmentResponse(#{}, _Path, _) ->
    ok;
v_msg_DeletePolicyAssignmentResponse(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeletePolicyAssignmentResponse'},
		  M, Path);
v_msg_DeletePolicyAssignmentResponse(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'DeletePolicyAssignmentResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_InjectMrtResponse/3}).
v_msg_InjectMrtResponse(#{}, _Path, _) -> ok;
v_msg_InjectMrtResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'InjectMrtResponse'},
		  M, Path);
v_msg_InjectMrtResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InjectMrtResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DisableRpkiResponse/3}).
v_msg_DisableRpkiResponse(#{}, _Path, _) -> ok;
v_msg_DisableRpkiResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DisableRpkiResponse'},
		  M, Path);
v_msg_DisableRpkiResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisableRpkiResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableZebraRequest/3}).
v_msg_EnableZebraRequest(#{url := F1, route_types := F2,
			   version := F3, nexthop_trigger_enable := F4,
			   nexthop_trigger_delay := F5},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [url | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [route_types | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [route_types | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [version | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [nexthop_trigger_enable | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_uint32(F5, [nexthop_trigger_delay | Path])
    end,
    ok;
v_msg_EnableZebraRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [url, route_types, version, nexthop_trigger_enable,
		    nexthop_trigger_delay]
		     -- maps:keys(M),
		   'EnableZebraRequest'},
		  M, Path);
v_msg_EnableZebraRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableZebraRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_AddVrfRequest/3}).
v_msg_AddVrfRequest(#{vrf := F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Vrf(F1, [vrf | Path], TrUserData)
    end,
    ok;
v_msg_AddVrfRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [vrf] -- maps:keys(M),
		   'AddVrfRequest'},
		  M, Path);
v_msg_AddVrfRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddVrfRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_DeletePathRequest/3}).
v_msg_DeletePathRequest(#{resource := F1, vrf_id := F2,
			  family := F3, path := F4, uuid := F5},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [resource | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [vrf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [family | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_Path(F4, [path | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [uuid | Path])
    end,
    ok;
v_msg_DeletePathRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [resource, vrf_id, family, path, uuid] -- maps:keys(M),
		   'DeletePathRequest'},
		  M, Path);
v_msg_DeletePathRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeletePathRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnableNeighborResponse/3}).
v_msg_EnableNeighborResponse(#{}, _Path, _) -> ok;
v_msg_EnableNeighborResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'EnableNeighborResponse'},
		  M, Path);
v_msg_EnableNeighborResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableNeighborResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_EnableRpkiRequest/3}).
v_msg_EnableRpkiRequest(#{address := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    ok;
v_msg_EnableRpkiRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address] -- maps:keys(M), 'EnableRpkiRequest'},
		  M, Path);
v_msg_EnableRpkiRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnableRpkiRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetPathRequest/3}).
v_msg_GetPathRequest(#{type := F1, name := F2,
		       family := F3, prefixes := F4},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_Resource(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [family | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_TableLookupPrefix(Elem, [prefixes | Path],
					TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'TableLookupPrefix'}},
			 F4, [prefixes | Path])
    end,
    ok;
v_msg_GetPathRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, name, family, prefixes] -- maps:keys(M),
		   'GetPathRequest'},
		  M, Path);
v_msg_GetPathRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetPathRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReplaceStatementResponse/3}).
v_msg_ReplaceStatementResponse(#{}, _Path, _) -> ok;
v_msg_ReplaceStatementResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReplaceStatementResponse'},
		  M, Path);
v_msg_ReplaceStatementResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReplaceStatementResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeleteBmpRequest/3}).
v_msg_DeleteBmpRequest(#{address := F1, port := F2},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [port | Path])
    end,
    ok;
v_msg_DeleteBmpRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [address, port] -- maps:keys(M), 'DeleteBmpRequest'},
		  M, Path);
v_msg_DeleteBmpRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteBmpRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DeleteBmpResponse/3}).
v_msg_DeleteBmpResponse(#{}, _Path, _) -> ok;
v_msg_DeleteBmpResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteBmpResponse'},
		  M, Path);
v_msg_DeleteBmpResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteBmpResponse'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetPolicyAssignmentRequest/3}).
v_msg_GetPolicyAssignmentRequest(#{assignment := F1},
				 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_PolicyAssignment(F1, [assignment | Path],
				  TrUserData)
    end,
    ok;
v_msg_GetPolicyAssignmentRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [assignment] -- maps:keys(M),
		   'GetPolicyAssignmentRequest'},
		  M, Path);
v_msg_GetPolicyAssignmentRequest(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetPolicyAssignmentRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_DeleteStatementResponse/3}).
v_msg_DeleteStatementResponse(#{}, _Path, _) -> ok;
v_msg_DeleteStatementResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteStatementResponse'},
		  M, Path);
v_msg_DeleteStatementResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteStatementResponse'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_SoftResetNeighborRequest.SoftResetDirection'/2}).
'v_enum_SoftResetNeighborRequest.SoftResetDirection'('IN',
						     _Path) ->
    ok;
'v_enum_SoftResetNeighborRequest.SoftResetDirection'('OUT',
						     _Path) ->
    ok;
'v_enum_SoftResetNeighborRequest.SoftResetDirection'('BOTH',
						     _Path) ->
    ok;
'v_enum_SoftResetNeighborRequest.SoftResetDirection'(V,
						     Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_SoftResetNeighborRequest.SoftResetDirection'(X,
						     Path) ->
    mk_type_error({invalid_enum,
		   'SoftResetNeighborRequest.SoftResetDirection'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_AddBmpRequest.MonitoringPolicy'/2}).
'v_enum_AddBmpRequest.MonitoringPolicy'('PRE', _Path) ->
    ok;
'v_enum_AddBmpRequest.MonitoringPolicy'('POST',
					_Path) ->
    ok;
'v_enum_AddBmpRequest.MonitoringPolicy'('BOTH',
					_Path) ->
    ok;
'v_enum_AddBmpRequest.MonitoringPolicy'('LOCAL',
					_Path) ->
    ok;
'v_enum_AddBmpRequest.MonitoringPolicy'('ALL', _Path) ->
    ok;
'v_enum_AddBmpRequest.MonitoringPolicy'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_AddBmpRequest.MonitoringPolicy'(X, Path) ->
    mk_type_error({invalid_enum,
		   'AddBmpRequest.MonitoringPolicy'},
		  X, Path).

-dialyzer({nowarn_function,v_enum_Resource/2}).
v_enum_Resource('GLOBAL', _Path) -> ok;
v_enum_Resource('LOCAL', _Path) -> ok;
v_enum_Resource('ADJ_IN', _Path) -> ok;
v_enum_Resource('ADJ_OUT', _Path) -> ok;
v_enum_Resource('VRF', _Path) -> ok;
v_enum_Resource(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_Resource(X, Path) ->
    mk_type_error({invalid_enum, 'Resource'}, X, Path).

-dialyzer({nowarn_function,'v_enum_RPKIValidation.State'/2}).
'v_enum_RPKIValidation.State'('STATE_NONE', _Path) ->
    ok;
'v_enum_RPKIValidation.State'('STATE_NOT_FOUND',
			      _Path) ->
    ok;
'v_enum_RPKIValidation.State'('STATE_VALID', _Path) ->
    ok;
'v_enum_RPKIValidation.State'('STATE_INVALID', _Path) ->
    ok;
'v_enum_RPKIValidation.State'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_RPKIValidation.State'(X, Path) ->
    mk_type_error({invalid_enum, 'RPKIValidation.State'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_RPKIValidation.Reason'/2}).
'v_enum_RPKIValidation.Reason'('REASOT_NONE', _Path) ->
    ok;
'v_enum_RPKIValidation.Reason'('REASON_AS', _Path) ->
    ok;
'v_enum_RPKIValidation.Reason'('REASON_LENGTH',
			       _Path) ->
    ok;
'v_enum_RPKIValidation.Reason'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_RPKIValidation.Reason'(X, Path) ->
    mk_type_error({invalid_enum, 'RPKIValidation.Reason'},
		  X, Path).

-dialyzer({nowarn_function,v_enum_TableLookupOption/2}).
v_enum_TableLookupOption('LOOKUP_EXACT', _Path) -> ok;
v_enum_TableLookupOption('LOOKUP_LONGER', _Path) -> ok;
v_enum_TableLookupOption('LOOKUP_SHORTER', _Path) -> ok;
v_enum_TableLookupOption(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_TableLookupOption(X, Path) ->
    mk_type_error({invalid_enum, 'TableLookupOption'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_PeerConf.RemovePrivateAs'/2}).
'v_enum_PeerConf.RemovePrivateAs'('NONE', _Path) -> ok;
'v_enum_PeerConf.RemovePrivateAs'('ALL', _Path) -> ok;
'v_enum_PeerConf.RemovePrivateAs'('REPLACE', _Path) ->
    ok;
'v_enum_PeerConf.RemovePrivateAs'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_PeerConf.RemovePrivateAs'(X, Path) ->
    mk_type_error({invalid_enum,
		   'PeerConf.RemovePrivateAs'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_PeerState.AdminState'/2}).
'v_enum_PeerState.AdminState'('UP', _Path) -> ok;
'v_enum_PeerState.AdminState'('DOWN', _Path) -> ok;
'v_enum_PeerState.AdminState'('PFX_CT', _Path) -> ok;
'v_enum_PeerState.AdminState'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_PeerState.AdminState'(X, Path) ->
    mk_type_error({invalid_enum, 'PeerState.AdminState'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_DefinedType/2}).
v_enum_DefinedType('PREFIX', _Path) -> ok;
v_enum_DefinedType('NEIGHBOR', _Path) -> ok;
v_enum_DefinedType('TAG', _Path) -> ok;
v_enum_DefinedType('AS_PATH', _Path) -> ok;
v_enum_DefinedType('COMMUNITY', _Path) -> ok;
v_enum_DefinedType('EXT_COMMUNITY', _Path) -> ok;
v_enum_DefinedType('LARGE_COMMUNITY', _Path) -> ok;
v_enum_DefinedType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_DefinedType(X, Path) ->
    mk_type_error({invalid_enum, 'DefinedType'}, X, Path).

-dialyzer({nowarn_function,v_enum_MatchType/2}).
v_enum_MatchType('ANY', _Path) -> ok;
v_enum_MatchType('ALL', _Path) -> ok;
v_enum_MatchType('INVERT', _Path) -> ok;
v_enum_MatchType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_MatchType(X, Path) ->
    mk_type_error({invalid_enum, 'MatchType'}, X, Path).

-dialyzer({nowarn_function,v_enum_AsPathLengthType/2}).
v_enum_AsPathLengthType('EQ', _Path) -> ok;
v_enum_AsPathLengthType('GE', _Path) -> ok;
v_enum_AsPathLengthType('LE', _Path) -> ok;
v_enum_AsPathLengthType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_AsPathLengthType(X, Path) ->
    mk_type_error({invalid_enum, 'AsPathLengthType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_Conditions.RouteType'/2}).
'v_enum_Conditions.RouteType'('ROUTE_TYPE_NONE',
			      _Path) ->
    ok;
'v_enum_Conditions.RouteType'('ROUTE_TYPE_INTERNAL',
			      _Path) ->
    ok;
'v_enum_Conditions.RouteType'('ROUTE_TYPE_EXTERNAL',
			      _Path) ->
    ok;
'v_enum_Conditions.RouteType'('ROUTE_TYPE_LOCAL',
			      _Path) ->
    ok;
'v_enum_Conditions.RouteType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Conditions.RouteType'(X, Path) ->
    mk_type_error({invalid_enum, 'Conditions.RouteType'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_RouteAction/2}).
v_enum_RouteAction('NONE', _Path) -> ok;
v_enum_RouteAction('ACCEPT', _Path) -> ok;
v_enum_RouteAction('REJECT', _Path) -> ok;
v_enum_RouteAction(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_RouteAction(X, Path) ->
    mk_type_error({invalid_enum, 'RouteAction'}, X, Path).

-dialyzer({nowarn_function,v_enum_CommunityActionType/2}).
v_enum_CommunityActionType('COMMUNITY_ADD', _Path) ->
    ok;
v_enum_CommunityActionType('COMMUNITY_REMOVE', _Path) ->
    ok;
v_enum_CommunityActionType('COMMUNITY_REPLACE',
			   _Path) ->
    ok;
v_enum_CommunityActionType(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_CommunityActionType(X, Path) ->
    mk_type_error({invalid_enum, 'CommunityActionType'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_MedActionType/2}).
v_enum_MedActionType('MED_MOD', _Path) -> ok;
v_enum_MedActionType('MED_REPLACE', _Path) -> ok;
v_enum_MedActionType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_MedActionType(X, Path) ->
    mk_type_error({invalid_enum, 'MedActionType'}, X, Path).

-dialyzer({nowarn_function,v_enum_PolicyType/2}).
v_enum_PolicyType('IN', _Path) -> ok;
v_enum_PolicyType('IMPORT', _Path) -> ok;
v_enum_PolicyType('EXPORT', _Path) -> ok;
v_enum_PolicyType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_PolicyType(X, Path) ->
    mk_type_error({invalid_enum, 'PolicyType'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'SoftResetNeighborRequest.SoftResetDirection'},
      [{'IN', 0}, {'OUT', 1}, {'BOTH', 2}]},
     {{enum, 'AddBmpRequest.MonitoringPolicy'},
      [{'PRE', 0}, {'POST', 1}, {'BOTH', 2}, {'LOCAL', 3},
       {'ALL', 4}]},
     {{enum, 'Resource'},
      [{'GLOBAL', 0}, {'LOCAL', 1}, {'ADJ_IN', 2},
       {'ADJ_OUT', 3}, {'VRF', 4}]},
     {{enum, 'RPKIValidation.State'},
      [{'STATE_NONE', 0}, {'STATE_NOT_FOUND', 1},
       {'STATE_VALID', 2}, {'STATE_INVALID', 3}]},
     {{enum, 'RPKIValidation.Reason'},
      [{'REASOT_NONE', 0}, {'REASON_AS', 1},
       {'REASON_LENGTH', 2}]},
     {{enum, 'TableLookupOption'},
      [{'LOOKUP_EXACT', 0}, {'LOOKUP_LONGER', 1},
       {'LOOKUP_SHORTER', 2}]},
     {{enum, 'PeerConf.RemovePrivateAs'},
      [{'NONE', 0}, {'ALL', 1}, {'REPLACE', 2}]},
     {{enum, 'PeerState.AdminState'},
      [{'UP', 0}, {'DOWN', 1}, {'PFX_CT', 2}]},
     {{enum, 'DefinedType'},
      [{'PREFIX', 0}, {'NEIGHBOR', 1}, {'TAG', 2},
       {'AS_PATH', 3}, {'COMMUNITY', 4}, {'EXT_COMMUNITY', 5},
       {'LARGE_COMMUNITY', 6}]},
     {{enum, 'MatchType'},
      [{'ANY', 0}, {'ALL', 1}, {'INVERT', 2}]},
     {{enum, 'AsPathLengthType'},
      [{'EQ', 0}, {'GE', 1}, {'LE', 2}]},
     {{enum, 'Conditions.RouteType'},
      [{'ROUTE_TYPE_NONE', 0}, {'ROUTE_TYPE_INTERNAL', 1},
       {'ROUTE_TYPE_EXTERNAL', 2}, {'ROUTE_TYPE_LOCAL', 3}]},
     {{enum, 'RouteAction'},
      [{'NONE', 0}, {'ACCEPT', 1}, {'REJECT', 2}]},
     {{enum, 'CommunityActionType'},
      [{'COMMUNITY_ADD', 0}, {'COMMUNITY_REMOVE', 1},
       {'COMMUNITY_REPLACE', 2}]},
     {{enum, 'MedActionType'},
      [{'MED_MOD', 0}, {'MED_REPLACE', 1}]},
     {{enum, 'PolicyType'},
      [{'IN', 0}, {'IMPORT', 1}, {'EXPORT', 2}]},
     {{msg, 'MedAction'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'MedActionType'}, occurrence => optional,
	 opts => []},
       #{name => value, fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'DisableNeighborResponse'}, []},
     {{msg, 'DeleteNeighborResponse'}, []},
     {{msg, 'Global'},
      [#{name => as, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => router_id, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => listen_port, fnum => 3, rnum => 4,
	 type => int32, occurrence => optional, opts => []},
       #{name => listen_addresses, fnum => 4, rnum => 5,
	 type => string, occurrence => repeated, opts => []},
       #{name => families, fnum => 5, rnum => 6,
	 type => uint32, occurrence => repeated,
	 opts => [packed]},
       #{name => use_multiple_paths, fnum => 6, rnum => 7,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'StartServerRequest'},
      [#{name => global, fnum => 1, rnum => 2,
	 type => {msg, 'Global'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DeleteRpkiRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'GetPolicyRequest'}, []},
     {{msg, 'RPKIConf'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => remote_port, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'Roa'},
      [#{name => as, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => prefixlen, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => maxlen, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => prefix, fnum => 4, rnum => 5, type => string,
	 occurrence => optional, opts => []},
       #{name => conf, fnum => 5, rnum => 6,
	 type => {msg, 'RPKIConf'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GetRoaResponse'},
      [#{name => roas, fnum => 1, rnum => 2,
	 type => {msg, 'Roa'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'GetDefinedSetRequest'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'DefinedType'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteVrfResponse'}, []},
     {{msg, 'TableLookupPrefix'},
      [#{name => prefix, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => lookup_option, fnum => 2, rnum => 3,
	 type => {enum, 'TableLookupOption'},
	 occurrence => optional, opts => []}]},
     {{msg, 'AfiSafiConfig'},
      [#{name => family, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => enabled, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'DisableMrtResponse'}, []},
     {{msg, 'AddStatementResponse'}, []},
     {{msg, 'TableInfo'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => family, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => num_destination, fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []},
       #{name => num_path, fnum => 5, rnum => 6,
	 type => uint64, occurrence => optional, opts => []},
       #{name => num_accepted, fnum => 6, rnum => 7,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'GetRibInfoResponse'},
      [#{name => info, fnum => 1, rnum => 2,
	 type => {msg, 'TableInfo'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'CommunityAction'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'CommunityActionType'},
	 occurrence => optional, opts => []},
       #{name => communities, fnum => 2, rnum => 3,
	 type => string, occurrence => repeated, opts => []}]},
     {{msg, 'LocalPrefAction'},
      [#{name => value, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'NexthopAction'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => self, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'AsPrependAction'},
      [#{name => asn, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => repeat, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => use_left_most, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'Actions'},
      [#{name => route_action, fnum => 1, rnum => 2,
	 type => {enum, 'RouteAction'}, occurrence => optional,
	 opts => []},
       #{name => community, fnum => 2, rnum => 3,
	 type => {msg, 'CommunityAction'},
	 occurrence => optional, opts => []},
       #{name => med, fnum => 3, rnum => 4,
	 type => {msg, 'MedAction'}, occurrence => optional,
	 opts => []},
       #{name => as_prepend, fnum => 4, rnum => 5,
	 type => {msg, 'AsPrependAction'},
	 occurrence => optional, opts => []},
       #{name => ext_community, fnum => 5, rnum => 6,
	 type => {msg, 'CommunityAction'},
	 occurrence => optional, opts => []},
       #{name => nexthop, fnum => 6, rnum => 7,
	 type => {msg, 'NexthopAction'}, occurrence => optional,
	 opts => []},
       #{name => local_pref, fnum => 7, rnum => 8,
	 type => {msg, 'LocalPrefAction'},
	 occurrence => optional, opts => []},
       #{name => large_community, fnum => 8, rnum => 9,
	 type => {msg, 'CommunityAction'},
	 occurrence => optional, opts => []}]},
     {{msg, 'MatchSet'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'MatchType'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AsPathLength'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'AsPathLengthType'},
	 occurrence => optional, opts => []},
       #{name => length, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'Conditions'},
      [#{name => prefix_set, fnum => 1, rnum => 2,
	 type => {msg, 'MatchSet'}, occurrence => optional,
	 opts => []},
       #{name => neighbor_set, fnum => 2, rnum => 3,
	 type => {msg, 'MatchSet'}, occurrence => optional,
	 opts => []},
       #{name => as_path_length, fnum => 3, rnum => 4,
	 type => {msg, 'AsPathLength'}, occurrence => optional,
	 opts => []},
       #{name => as_path_set, fnum => 4, rnum => 5,
	 type => {msg, 'MatchSet'}, occurrence => optional,
	 opts => []},
       #{name => community_set, fnum => 5, rnum => 6,
	 type => {msg, 'MatchSet'}, occurrence => optional,
	 opts => []},
       #{name => ext_community_set, fnum => 6, rnum => 7,
	 type => {msg, 'MatchSet'}, occurrence => optional,
	 opts => []},
       #{name => rpki_result, fnum => 7, rnum => 8,
	 type => int32, occurrence => optional, opts => []},
       #{name => route_type, fnum => 8, rnum => 9,
	 type => {enum, 'Conditions.RouteType'},
	 occurrence => optional, opts => []},
       #{name => large_community_set, fnum => 9, rnum => 10,
	 type => {msg, 'MatchSet'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'Statement'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => conditions, fnum => 2, rnum => 3,
	 type => {msg, 'Conditions'}, occurrence => optional,
	 opts => []},
       #{name => actions, fnum => 3, rnum => 4,
	 type => {msg, 'Actions'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GetStatementResponse'},
      [#{name => statements, fnum => 1, rnum => 2,
	 type => {msg, 'Statement'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'UseMultiplePathsConfig'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'AddVrfResponse'}, []},
     {{msg, 'PrefixLimit'},
      [#{name => family, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => max_prefixes, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => shutdown_threshold_pct, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'PeerConf'},
      [#{name => auth_password, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => local_as, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []},
       #{name => neighbor_address, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => peer_as, fnum => 5, rnum => 6, type => uint32,
	 occurrence => optional, opts => []},
       #{name => peer_group, fnum => 6, rnum => 7,
	 type => string, occurrence => optional, opts => []},
       #{name => peer_type, fnum => 7, rnum => 8,
	 type => uint32, occurrence => optional, opts => []},
       #{name => remove_private_as, fnum => 8, rnum => 9,
	 type => {enum, 'PeerConf.RemovePrivateAs'},
	 occurrence => optional, opts => []},
       #{name => route_flap_damping, fnum => 9, rnum => 10,
	 type => bool, occurrence => optional, opts => []},
       #{name => send_community, fnum => 10, rnum => 11,
	 type => uint32, occurrence => optional, opts => []},
       #{name => remote_cap, fnum => 11, rnum => 12,
	 type => bytes, occurrence => repeated, opts => []},
       #{name => local_cap, fnum => 12, rnum => 13,
	 type => bytes, occurrence => repeated, opts => []},
       #{name => id, fnum => 13, rnum => 14, type => string,
	 occurrence => optional, opts => []},
       #{name => prefix_limits, fnum => 14, rnum => 15,
	 type => {msg, 'PrefixLimit'}, occurrence => repeated,
	 opts => []},
       #{name => local_address, fnum => 15, rnum => 16,
	 type => string, occurrence => optional, opts => []},
       #{name => neighbor_interface, fnum => 16, rnum => 17,
	 type => string, occurrence => optional, opts => []},
       #{name => vrf, fnum => 17, rnum => 18, type => string,
	 occurrence => optional, opts => []},
       #{name => allow_own_as, fnum => 18, rnum => 19,
	 type => uint32, occurrence => optional, opts => []},
       #{name => replace_peer_as, fnum => 19, rnum => 20,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'Policy'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => statements, fnum => 2, rnum => 3,
	 type => {msg, 'Statement'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'PolicyAssignment'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'PolicyType'}, occurrence => optional,
	 opts => []},
       #{name => resource, fnum => 2, rnum => 3,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []},
       #{name => policies, fnum => 4, rnum => 5,
	 type => {msg, 'Policy'}, occurrence => repeated,
	 opts => []},
       #{name => default, fnum => 5, rnum => 6,
	 type => {enum, 'RouteAction'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AddPolicyAssignmentRequest'},
      [#{name => assignment, fnum => 1, rnum => 2,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []}]},
     {{msg, 'GetPolicyResponse'},
      [#{name => policies, fnum => 1, rnum => 2,
	 type => {msg, 'Policy'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'RouteSelectionOptionsConfig'},
      [#{name => always_compare_med, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => ignore_as_path_length, fnum => 2, rnum => 3,
	 type => bool, occurrence => optional, opts => []},
       #{name => external_compare_router_id, fnum => 3,
	 rnum => 4, type => bool, occurrence => optional,
	 opts => []},
       #{name => advertise_inactive_routes, fnum => 4,
	 rnum => 5, type => bool, occurrence => optional,
	 opts => []},
       #{name => enable_aigp, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => ignore_next_hop_igp_metric, fnum => 6,
	 rnum => 7, type => bool, occurrence => optional,
	 opts => []}]},
     {{msg, 'ApplyPolicy'},
      [#{name => in_policy, fnum => 1, rnum => 2,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []},
       #{name => export_policy, fnum => 2, rnum => 3,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []},
       #{name => import_policy, fnum => 3, rnum => 4,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []}]},
     {{msg, 'AddPolicyAssignmentResponse'}, []},
     {{msg, 'Transport'},
      [#{name => local_address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => local_port, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => mtu_discovery, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => passive_mode, fnum => 4, rnum => 5,
	 type => bool, occurrence => optional, opts => []},
       #{name => remote_address, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => remote_port, fnum => 6, rnum => 7,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcp_mss, fnum => 7, rnum => 8, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'AddNeighborResponse'}, []},
     {{msg, 'GetVrfRequest'}, []},
     {{msg, 'AddStatementRequest'},
      [#{name => statement, fnum => 1, rnum => 2,
	 type => {msg, 'Statement'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'IbgpState'},
      [#{name => maximum_paths, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'IbgpConfig'},
      [#{name => maximum_paths, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'Ibgp'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'IbgpConfig'}, occurrence => optional,
	 opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'IbgpState'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'EbgpState'},
      [#{name => allow_multiple_as, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => maximum_paths, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'EbgpConfig'},
      [#{name => allow_multiple_as, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => maximum_paths, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'Ebgp'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'EbgpConfig'}, occurrence => optional,
	 opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'EbgpState'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'UseMultiplePathsState'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'UseMultiplePaths'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'UseMultiplePathsConfig'},
	 occurrence => optional, opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'UseMultiplePathsState'},
	 occurrence => optional, opts => []},
       #{name => ebgp, fnum => 3, rnum => 4,
	 type => {msg, 'Ebgp'}, occurrence => optional,
	 opts => []},
       #{name => ibgp, fnum => 4, rnum => 5,
	 type => {msg, 'Ibgp'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'LongLivedGracefulRestartState'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => received, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []},
       #{name => advertised, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => peer_restart_time, fnum => 4, rnum => 5,
	 type => uint32, occurrence => optional, opts => []},
       #{name => peer_restart_timer_expired, fnum => 5,
	 rnum => 6, type => bool, occurrence => optional,
	 opts => []}]},
     {{msg, 'LongLivedGracefulRestartConfig'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => restart_time, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'LongLivedGracefulRestart'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'LongLivedGracefulRestartConfig'},
	 occurrence => optional, opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'LongLivedGracefulRestartState'},
	 occurrence => optional, opts => []}]},
     {{msg, 'ResetNeighborResponse'}, []},
     {{msg, 'AddPathsState'},
      [#{name => 'receive', fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => send_max, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'AddPathsConfig'},
      [#{name => 'receive', fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => send_max, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'AddPaths'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'AddPathsConfig'}, occurrence => optional,
	 opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'AddPathsState'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'RouteTargetMembershipState'},
      [#{name => deferral_time, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'RouteTargetMembershipConfig'},
      [#{name => deferral_time, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'RouteTargetMembership'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'RouteTargetMembershipConfig'},
	 occurrence => optional, opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'RouteTargetMembershipState'},
	 occurrence => optional, opts => []}]},
     {{msg, 'RouteSelectionOptionsState'},
      [#{name => always_compare_med, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => ignore_as_path_length, fnum => 2, rnum => 3,
	 type => bool, occurrence => optional, opts => []},
       #{name => external_compare_router_id, fnum => 3,
	 rnum => 4, type => bool, occurrence => optional,
	 opts => []},
       #{name => advertise_inactive_routes, fnum => 4,
	 rnum => 5, type => bool, occurrence => optional,
	 opts => []},
       #{name => enable_aigp, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => ignore_next_hop_igp_metric, fnum => 6,
	 rnum => 7, type => bool, occurrence => optional,
	 opts => []}]},
     {{msg, 'RouteSelectionOptions'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'RouteSelectionOptionsConfig'},
	 occurrence => optional, opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'RouteSelectionOptionsState'},
	 occurrence => optional, opts => []}]},
     {{msg, 'MpGracefulRestartState'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => received, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []},
       #{name => advertised, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => end_of_rib_received, fnum => 4, rnum => 5,
	 type => bool, occurrence => optional, opts => []},
       #{name => end_of_rib_sent, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'MpGracefulRestartConfig'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'MpGracefulRestart'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'MpGracefulRestartConfig'},
	 occurrence => optional, opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'MpGracefulRestartState'},
	 occurrence => optional, opts => []}]},
     {{msg, 'AfiSafi'},
      [#{name => mp_graceful_restart, fnum => 1, rnum => 2,
	 type => {msg, 'MpGracefulRestart'},
	 occurrence => optional, opts => []},
       #{name => config, fnum => 2, rnum => 3,
	 type => {msg, 'AfiSafiConfig'}, occurrence => optional,
	 opts => []},
       #{name => apply_policy, fnum => 3, rnum => 4,
	 type => {msg, 'ApplyPolicy'}, occurrence => optional,
	 opts => []},
       #{name => route_selection_options, fnum => 4, rnum => 5,
	 type => {msg, 'RouteSelectionOptions'},
	 occurrence => optional, opts => []},
       #{name => use_multiple_paths, fnum => 5, rnum => 6,
	 type => {msg, 'UseMultiplePaths'},
	 occurrence => optional, opts => []},
       #{name => prefix_limits, fnum => 6, rnum => 7,
	 type => {msg, 'PrefixLimit'}, occurrence => optional,
	 opts => []},
       #{name => route_target_membership, fnum => 7, rnum => 8,
	 type => {msg, 'RouteTargetMembership'},
	 occurrence => optional, opts => []},
       #{name => long_lived_graceful_restart, fnum => 8,
	 rnum => 9, type => {msg, 'LongLivedGracefulRestart'},
	 occurrence => optional, opts => []},
       #{name => add_paths, fnum => 9, rnum => 10,
	 type => {msg, 'AddPaths'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GracefulRestart'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => restart_time, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => helper_only, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => deferral_time, fnum => 4, rnum => 5,
	 type => uint32, occurrence => optional, opts => []},
       #{name => notification_enabled, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => longlived_enabled, fnum => 6, rnum => 7,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'RouteServer'},
      [#{name => route_server_client, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'TimersState'},
      [#{name => connect_retry, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => hold_time, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => keepalive_interval, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => minimum_advertisement_interval, fnum => 4,
	 rnum => 5, type => uint64, occurrence => optional,
	 opts => []},
       #{name => negotiated_hold_time, fnum => 5, rnum => 6,
	 type => uint64, occurrence => optional, opts => []},
       #{name => uptime, fnum => 6, rnum => 7, type => uint64,
	 occurrence => optional, opts => []},
       #{name => downtime, fnum => 7, rnum => 8,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'TimersConfig'},
      [#{name => connect_retry, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => hold_time, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => keepalive_interval, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => minimum_advertisement_interval, fnum => 4,
	 rnum => 5, type => uint64, occurrence => optional,
	 opts => []}]},
     {{msg, 'Timers'},
      [#{name => config, fnum => 1, rnum => 2,
	 type => {msg, 'TimersConfig'}, occurrence => optional,
	 opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'TimersState'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'Queues'},
      [#{name => input, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => output, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'Message'},
      [#{name => 'NOTIFICATION', fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => 'UPDATE', fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => 'OPEN', fnum => 3, rnum => 4, type => uint64,
	 occurrence => optional, opts => []},
       #{name => 'KEEPALIVE', fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []},
       #{name => 'REFRESH', fnum => 5, rnum => 6,
	 type => uint64, occurrence => optional, opts => []},
       #{name => 'DISCARDED', fnum => 6, rnum => 7,
	 type => uint64, occurrence => optional, opts => []},
       #{name => 'TOTAL', fnum => 7, rnum => 8, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, 'Messages'},
      [#{name => received, fnum => 1, rnum => 2,
	 type => {msg, 'Message'}, occurrence => optional,
	 opts => []},
       #{name => sent, fnum => 2, rnum => 3,
	 type => {msg, 'Message'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'PeerState'},
      [#{name => auth_password, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => local_as, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []},
       #{name => messages, fnum => 4, rnum => 5,
	 type => {msg, 'Messages'}, occurrence => optional,
	 opts => []},
       #{name => neighbor_address, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => peer_as, fnum => 6, rnum => 7, type => uint32,
	 occurrence => optional, opts => []},
       #{name => peer_group, fnum => 7, rnum => 8,
	 type => string, occurrence => optional, opts => []},
       #{name => peer_type, fnum => 8, rnum => 9,
	 type => uint32, occurrence => optional, opts => []},
       #{name => queues, fnum => 9, rnum => 10,
	 type => {msg, 'Queues'}, occurrence => optional,
	 opts => []},
       #{name => remove_private_as, fnum => 10, rnum => 11,
	 type => uint32, occurrence => optional, opts => []},
       #{name => route_flap_damping, fnum => 11, rnum => 12,
	 type => bool, occurrence => optional, opts => []},
       #{name => send_community, fnum => 12, rnum => 13,
	 type => uint32, occurrence => optional, opts => []},
       #{name => session_state, fnum => 13, rnum => 14,
	 type => uint32, occurrence => optional, opts => []},
       #{name => supported_capabilities, fnum => 14,
	 rnum => 15, type => string, occurrence => repeated,
	 opts => []},
       #{name => bgp_state, fnum => 15, rnum => 16,
	 type => string, occurrence => optional, opts => []},
       #{name => admin_state, fnum => 16, rnum => 17,
	 type => {enum, 'PeerState.AdminState'},
	 occurrence => optional, opts => []},
       #{name => received, fnum => 17, rnum => 18,
	 type => uint32, occurrence => optional, opts => []},
       #{name => accepted, fnum => 18, rnum => 19,
	 type => uint32, occurrence => optional, opts => []},
       #{name => advertised, fnum => 19, rnum => 20,
	 type => uint32, occurrence => optional, opts => []},
       #{name => out_q, fnum => 20, rnum => 21, type => uint32,
	 occurrence => optional, opts => []},
       #{name => flops, fnum => 21, rnum => 22, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'RouteReflector'},
      [#{name => route_reflector_client, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => route_reflector_cluster_id, fnum => 2,
	 rnum => 3, type => string, occurrence => optional,
	 opts => []}]},
     {{msg, 'EbgpMultihop'},
      [#{name => enabled, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => multihop_ttl, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'Peer'},
      [#{name => families, fnum => 1, rnum => 2,
	 type => uint32, occurrence => repeated,
	 opts => [packed]},
       #{name => apply_policy, fnum => 2, rnum => 3,
	 type => {msg, 'ApplyPolicy'}, occurrence => optional,
	 opts => []},
       #{name => conf, fnum => 3, rnum => 4,
	 type => {msg, 'PeerConf'}, occurrence => optional,
	 opts => []},
       #{name => ebgp_multihop, fnum => 4, rnum => 5,
	 type => {msg, 'EbgpMultihop'}, occurrence => optional,
	 opts => []},
       #{name => route_reflector, fnum => 5, rnum => 6,
	 type => {msg, 'RouteReflector'}, occurrence => optional,
	 opts => []},
       #{name => info, fnum => 6, rnum => 7,
	 type => {msg, 'PeerState'}, occurrence => optional,
	 opts => []},
       #{name => timers, fnum => 7, rnum => 8,
	 type => {msg, 'Timers'}, occurrence => optional,
	 opts => []},
       #{name => transport, fnum => 8, rnum => 9,
	 type => {msg, 'Transport'}, occurrence => optional,
	 opts => []},
       #{name => route_server, fnum => 9, rnum => 10,
	 type => {msg, 'RouteServer'}, occurrence => optional,
	 opts => []},
       #{name => graceful_restart, fnum => 10, rnum => 11,
	 type => {msg, 'GracefulRestart'},
	 occurrence => optional, opts => []},
       #{name => afi_safis, fnum => 11, rnum => 12,
	 type => {msg, 'AfiSafi'}, occurrence => repeated,
	 opts => []},
       #{name => add_paths, fnum => 12, rnum => 13,
	 type => {msg, 'AddPaths'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AddNeighborRequest'},
      [#{name => peer, fnum => 1, rnum => 2,
	 type => {msg, 'Peer'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'ValidateRibRequest'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => family, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => prefix, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeletePolicyAssignmentRequest'},
      [#{name => assignment, fnum => 1, rnum => 2,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []},
       #{name => all, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'RPKIValidation'},
      [#{name => state, fnum => 1, rnum => 2,
	 type => {enum, 'RPKIValidation.State'},
	 occurrence => optional, opts => []},
       #{name => reason, fnum => 2, rnum => 3,
	 type => {enum, 'RPKIValidation.Reason'},
	 occurrence => optional, opts => []},
       #{name => matched, fnum => 3, rnum => 4,
	 type => {msg, 'Roa'}, occurrence => repeated,
	 opts => []},
       #{name => unmatched_as, fnum => 4, rnum => 5,
	 type => {msg, 'Roa'}, occurrence => repeated,
	 opts => []},
       #{name => unmatched_length, fnum => 5, rnum => 6,
	 type => {msg, 'Roa'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'Path'},
      [#{name => nlri, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => pattrs, fnum => 2, rnum => 3, type => bytes,
	 occurrence => repeated, opts => []},
       #{name => age, fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []},
       #{name => best, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => is_withdraw, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => validation, fnum => 6, rnum => 7,
	 type => int32, occurrence => optional, opts => []},
       #{name => validation_detail, fnum => 7, rnum => 8,
	 type => {msg, 'RPKIValidation'}, occurrence => optional,
	 opts => []},
       #{name => no_implicit_withdraw, fnum => 8, rnum => 9,
	 type => bool, occurrence => optional, opts => []},
       #{name => family, fnum => 9, rnum => 10, type => uint32,
	 occurrence => optional, opts => []},
       #{name => source_asn, fnum => 10, rnum => 11,
	 type => uint32, occurrence => optional, opts => []},
       #{name => source_id, fnum => 11, rnum => 12,
	 type => string, occurrence => optional, opts => []},
       #{name => filtered, fnum => 12, rnum => 13,
	 type => bool, occurrence => optional, opts => []},
       #{name => stale, fnum => 13, rnum => 14, type => bool,
	 occurrence => optional, opts => []},
       #{name => is_from_external, fnum => 14, rnum => 15,
	 type => bool, occurrence => optional, opts => []},
       #{name => neighbor_ip, fnum => 15, rnum => 16,
	 type => string, occurrence => optional, opts => []},
       #{name => uuid, fnum => 16, rnum => 17, type => bytes,
	 occurrence => optional, opts => []},
       #{name => is_nexthop_invalid, fnum => 17, rnum => 18,
	 type => bool, occurrence => optional, opts => []},
       #{name => identifier, fnum => 18, rnum => 19,
	 type => uint32, occurrence => optional, opts => []},
       #{name => local_identifier, fnum => 19, rnum => 20,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'Destination'},
      [#{name => prefix, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => paths, fnum => 2, rnum => 3,
	 type => {msg, 'Path'}, occurrence => repeated,
	 opts => []},
       #{name => longer_prefixes, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => shorter_prefixes, fnum => 4, rnum => 5,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'Table'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => family, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => destinations, fnum => 4, rnum => 5,
	 type => {msg, 'Destination'}, occurrence => repeated,
	 opts => []},
       #{name => post_policy, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'MonitorRibRequest'},
      [#{name => table, fnum => 1, rnum => 2,
	 type => {msg, 'Table'}, occurrence => optional,
	 opts => []},
       #{name => current, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'ShutdownNeighborResponse'}, []},
     {{msg, 'AddRpkiResponse'}, []},
     {{msg, 'AddPolicyRequest'},
      [#{name => policy, fnum => 1, rnum => 2,
	 type => {msg, 'Policy'}, occurrence => optional,
	 opts => []},
       #{name => refer_existing_statements, fnum => 2,
	 rnum => 3, type => bool, occurrence => optional,
	 opts => []}]},
     {{msg, 'RPKIState'},
      [#{name => uptime, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => downtime, fnum => 2, rnum => 3, type => int64,
	 occurrence => optional, opts => []},
       #{name => up, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []},
       #{name => record_ipv4, fnum => 4, rnum => 5,
	 type => uint32, occurrence => optional, opts => []},
       #{name => record_ipv6, fnum => 5, rnum => 6,
	 type => uint32, occurrence => optional, opts => []},
       #{name => prefix_ipv4, fnum => 6, rnum => 7,
	 type => uint32, occurrence => optional, opts => []},
       #{name => prefix_ipv6, fnum => 7, rnum => 8,
	 type => uint32, occurrence => optional, opts => []},
       #{name => serial, fnum => 8, rnum => 9, type => uint32,
	 occurrence => optional, opts => []},
       #{name => received_ipv4, fnum => 9, rnum => 10,
	 type => int64, occurrence => optional, opts => []},
       #{name => received_ipv6, fnum => 10, rnum => 11,
	 type => int64, occurrence => optional, opts => []},
       #{name => serial_notify, fnum => 11, rnum => 12,
	 type => int64, occurrence => optional, opts => []},
       #{name => cache_reset, fnum => 12, rnum => 13,
	 type => int64, occurrence => optional, opts => []},
       #{name => cache_response, fnum => 13, rnum => 14,
	 type => int64, occurrence => optional, opts => []},
       #{name => end_of_data, fnum => 14, rnum => 15,
	 type => int64, occurrence => optional, opts => []},
       #{name => error, fnum => 15, rnum => 16, type => int64,
	 occurrence => optional, opts => []},
       #{name => serial_query, fnum => 16, rnum => 17,
	 type => int64, occurrence => optional, opts => []},
       #{name => reset_query, fnum => 17, rnum => 18,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'Rpki'},
      [#{name => conf, fnum => 1, rnum => 2,
	 type => {msg, 'RPKIConf'}, occurrence => optional,
	 opts => []},
       #{name => state, fnum => 2, rnum => 3,
	 type => {msg, 'RPKIState'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AddPathRequest'},
      [#{name => resource, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => vrf_id, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => path, fnum => 3, rnum => 4,
	 type => {msg, 'Path'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'ResetRpkiResponse'}, []},
     {{msg, 'ResetRpkiRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'SoftResetNeighborRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => direction, fnum => 2, rnum => 3,
	 type =>
	     {enum, 'SoftResetNeighborRequest.SoftResetDirection'},
	 occurrence => optional, opts => []}]},
     {{msg, 'AddPolicyResponse'}, []},
     {{msg, 'EnableNeighborRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'AddPathResponse'},
      [#{name => uuid, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'Vrf'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => rd, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => import_rt, fnum => 3, rnum => 4,
	 type => bytes, occurrence => repeated, opts => []},
       #{name => export_rt, fnum => 4, rnum => 5,
	 type => bytes, occurrence => repeated, opts => []},
       #{name => id, fnum => 5, rnum => 6, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'GetVrfResponse'},
      [#{name => vrfs, fnum => 1, rnum => 2,
	 type => {msg, 'Vrf'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'SoftResetRpkiRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'StopServerRequest'}, []},
     {{msg, 'AddBmpResponse'}, []},
     {{msg, 'GetRpkiRequest'},
      [#{name => family, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteNeighborRequest'},
      [#{name => peer, fnum => 1, rnum => 2,
	 type => {msg, 'Peer'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'AfiSafiState'},
      [#{name => family, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => enabled, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []},
       #{name => total_paths, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []},
       #{name => total_prefixes, fnum => 4, rnum => 5,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'GetServerResponse'},
      [#{name => global, fnum => 1, rnum => 2,
	 type => {msg, 'Global'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'EnableMrtResponse'}, []},
     {{msg, 'InjectMrtRequest'},
      [#{name => resource, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => vrf_id, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => paths, fnum => 3, rnum => 4,
	 type => {msg, 'Path'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'Prefix'},
      [#{name => ip_prefix, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => mask_length_min, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => mask_length_max, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'DefinedSet'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'DefinedType'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => list, fnum => 3, rnum => 4, type => string,
	 occurrence => repeated, opts => []},
       #{name => prefixes, fnum => 4, rnum => 5,
	 type => {msg, 'Prefix'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'AddDefinedSetRequest'},
      [#{name => set, fnum => 1, rnum => 2,
	 type => {msg, 'DefinedSet'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'ReplacePolicyAssignmentRequest'},
      [#{name => assignment, fnum => 1, rnum => 2,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []}]},
     {{msg, 'DeletePathResponse'}, []},
     {{msg, 'DeletePolicyRequest'},
      [#{name => policy, fnum => 1, rnum => 2,
	 type => {msg, 'Policy'}, occurrence => optional,
	 opts => []},
       #{name => preserve_statements, fnum => 2, rnum => 3,
	 type => bool, occurrence => optional, opts => []},
       #{name => all, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteVrfRequest'},
      [#{name => vrf, fnum => 1, rnum => 2,
	 type => {msg, 'Vrf'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GetPolicyAssignmentResponse'},
      [#{name => assignment, fnum => 1, rnum => 2,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteDefinedSetResponse'}, []},
     {{msg, 'ReplacePolicyAssignmentResponse'}, []},
     {{msg, 'GetServerRequest'}, []},
     {{msg, 'AddBmpRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => type, fnum => 3, rnum => 4,
	 type => {enum, 'AddBmpRequest.MonitoringPolicy'},
	 occurrence => optional, opts => []}]},
     {{msg, 'ResetNeighborRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => communication, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'GetRibInfoRequest'},
      [#{name => info, fnum => 1, rnum => 2,
	 type => {msg, 'TableInfo'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GetRibRequest'},
      [#{name => table, fnum => 1, rnum => 2,
	 type => {msg, 'Table'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GetStatementRequest'}, []},
     {{msg, 'ReplaceStatementRequest'},
      [#{name => statement, fnum => 1, rnum => 2,
	 type => {msg, 'Statement'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'StopServerResponse'}, []},
     {{msg, 'DeleteStatementRequest'},
      [#{name => statement, fnum => 1, rnum => 2,
	 type => {msg, 'Statement'}, occurrence => optional,
	 opts => []},
       #{name => all, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'AddRpkiRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => lifetime, fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'GetRibResponse'},
      [#{name => table, fnum => 1, rnum => 2,
	 type => {msg, 'Table'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DisableMrtRequest'}, []},
     {{msg, 'DisableRpkiRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'EnableRpkiResponse'}, []},
     {{msg, 'ReplaceDefinedSetRequest'},
      [#{name => set, fnum => 1, rnum => 2,
	 type => {msg, 'DefinedSet'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DisableNeighborRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => communication, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'DeletePolicyResponse'}, []},
     {{msg, 'SoftResetRpkiResponse'}, []},
     {{msg, 'GetNeighborResponse'},
      [#{name => peers, fnum => 1, rnum => 2,
	 type => {msg, 'Peer'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'ReplacePolicyResponse'}, []},
     {{msg, 'GetRpkiResponse'},
      [#{name => servers, fnum => 1, rnum => 2,
	 type => {msg, 'Rpki'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'SoftResetNeighborResponse'}, []},
     {{msg, 'AddDefinedSetResponse'}, []},
     {{msg, 'GetNeighborRequest'},
      [#{name => enableAdvertised, fnum => 1, rnum => 2,
	 type => bool, occurrence => optional, opts => []},
       #{name => address, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'EnableMrtRequest'},
      [#{name => dump_type, fnum => 1, rnum => 2,
	 type => int32, occurrence => optional, opts => []},
       #{name => filename, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => interval, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'ReplacePolicyRequest'},
      [#{name => policy, fnum => 1, rnum => 2,
	 type => {msg, 'Policy'}, occurrence => optional,
	 opts => []},
       #{name => refer_existing_statements, fnum => 2,
	 rnum => 3, type => bool, occurrence => optional,
	 opts => []},
       #{name => preserve_statements, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []}]},
     {{msg, 'Arguments'},
      [#{name => resource, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => family, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => name, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'GetRoaRequest'},
      [#{name => family, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteDefinedSetRequest'},
      [#{name => set, fnum => 1, rnum => 2,
	 type => {msg, 'DefinedSet'}, occurrence => optional,
	 opts => []},
       #{name => all, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteRpkiResponse'}, []},
     {{msg, 'EnableZebraResponse'}, []},
     {{msg, 'StartServerResponse'}, []},
     {{msg, 'ReplaceDefinedSetResponse'}, []},
     {{msg, 'GetDefinedSetResponse'},
      [#{name => sets, fnum => 1, rnum => 2,
	 type => {msg, 'DefinedSet'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'ShutdownNeighborRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => communication, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'ValidateRibResponse'}, []},
     {{msg, 'DeletePolicyAssignmentResponse'}, []},
     {{msg, 'InjectMrtResponse'}, []},
     {{msg, 'DisableRpkiResponse'}, []},
     {{msg, 'EnableZebraRequest'},
      [#{name => url, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => route_types, fnum => 2, rnum => 3,
	 type => string, occurrence => repeated, opts => []},
       #{name => version, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => nexthop_trigger_enable, fnum => 4, rnum => 5,
	 type => bool, occurrence => optional, opts => []},
       #{name => nexthop_trigger_delay, fnum => 5, rnum => 6,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'AddVrfRequest'},
      [#{name => vrf, fnum => 1, rnum => 2,
	 type => {msg, 'Vrf'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DeletePathRequest'},
      [#{name => resource, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => vrf_id, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => family, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => path, fnum => 4, rnum => 5,
	 type => {msg, 'Path'}, occurrence => optional,
	 opts => []},
       #{name => uuid, fnum => 5, rnum => 6, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'EnableNeighborResponse'}, []},
     {{msg, 'EnableRpkiRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'GetPathRequest'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'Resource'}, occurrence => optional,
	 opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => family, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => prefixes, fnum => 4, rnum => 5,
	 type => {msg, 'TableLookupPrefix'},
	 occurrence => repeated, opts => []}]},
     {{msg, 'ReplaceStatementResponse'}, []},
     {{msg, 'DeleteBmpRequest'},
      [#{name => address, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteBmpResponse'}, []},
     {{msg, 'GetPolicyAssignmentRequest'},
      [#{name => assignment, fnum => 1, rnum => 2,
	 type => {msg, 'PolicyAssignment'},
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteStatementResponse'}, []}].


get_msg_names() ->
    ['MedAction', 'DisableNeighborResponse',
     'DeleteNeighborResponse', 'Global',
     'StartServerRequest', 'DeleteRpkiRequest',
     'GetPolicyRequest', 'RPKIConf', 'Roa', 'GetRoaResponse',
     'GetDefinedSetRequest', 'DeleteVrfResponse',
     'TableLookupPrefix', 'AfiSafiConfig',
     'DisableMrtResponse', 'AddStatementResponse',
     'TableInfo', 'GetRibInfoResponse', 'CommunityAction',
     'LocalPrefAction', 'NexthopAction', 'AsPrependAction',
     'Actions', 'MatchSet', 'AsPathLength', 'Conditions',
     'Statement', 'GetStatementResponse',
     'UseMultiplePathsConfig', 'AddVrfResponse',
     'PrefixLimit', 'PeerConf', 'Policy', 'PolicyAssignment',
     'AddPolicyAssignmentRequest', 'GetPolicyResponse',
     'RouteSelectionOptionsConfig', 'ApplyPolicy',
     'AddPolicyAssignmentResponse', 'Transport',
     'AddNeighborResponse', 'GetVrfRequest',
     'AddStatementRequest', 'IbgpState', 'IbgpConfig',
     'Ibgp', 'EbgpState', 'EbgpConfig', 'Ebgp',
     'UseMultiplePathsState', 'UseMultiplePaths',
     'LongLivedGracefulRestartState',
     'LongLivedGracefulRestartConfig',
     'LongLivedGracefulRestart', 'ResetNeighborResponse',
     'AddPathsState', 'AddPathsConfig', 'AddPaths',
     'RouteTargetMembershipState',
     'RouteTargetMembershipConfig', 'RouteTargetMembership',
     'RouteSelectionOptionsState', 'RouteSelectionOptions',
     'MpGracefulRestartState', 'MpGracefulRestartConfig',
     'MpGracefulRestart', 'AfiSafi', 'GracefulRestart',
     'RouteServer', 'TimersState', 'TimersConfig', 'Timers',
     'Queues', 'Message', 'Messages', 'PeerState',
     'RouteReflector', 'EbgpMultihop', 'Peer',
     'AddNeighborRequest', 'ValidateRibRequest',
     'DeletePolicyAssignmentRequest', 'RPKIValidation',
     'Path', 'Destination', 'Table', 'MonitorRibRequest',
     'ShutdownNeighborResponse', 'AddRpkiResponse',
     'AddPolicyRequest', 'RPKIState', 'Rpki',
     'AddPathRequest', 'ResetRpkiResponse',
     'ResetRpkiRequest', 'SoftResetNeighborRequest',
     'AddPolicyResponse', 'EnableNeighborRequest',
     'AddPathResponse', 'Vrf', 'GetVrfResponse',
     'SoftResetRpkiRequest', 'StopServerRequest',
     'AddBmpResponse', 'GetRpkiRequest',
     'DeleteNeighborRequest', 'AfiSafiState',
     'GetServerResponse', 'EnableMrtResponse',
     'InjectMrtRequest', 'Prefix', 'DefinedSet',
     'AddDefinedSetRequest',
     'ReplacePolicyAssignmentRequest', 'DeletePathResponse',
     'DeletePolicyRequest', 'DeleteVrfRequest',
     'GetPolicyAssignmentResponse',
     'DeleteDefinedSetResponse',
     'ReplacePolicyAssignmentResponse', 'GetServerRequest',
     'AddBmpRequest', 'ResetNeighborRequest',
     'GetRibInfoRequest', 'GetRibRequest',
     'GetStatementRequest', 'ReplaceStatementRequest',
     'StopServerResponse', 'DeleteStatementRequest',
     'AddRpkiRequest', 'GetRibResponse', 'DisableMrtRequest',
     'DisableRpkiRequest', 'EnableRpkiResponse',
     'ReplaceDefinedSetRequest', 'DisableNeighborRequest',
     'DeletePolicyResponse', 'SoftResetRpkiResponse',
     'GetNeighborResponse', 'ReplacePolicyResponse',
     'GetRpkiResponse', 'SoftResetNeighborResponse',
     'AddDefinedSetResponse', 'GetNeighborRequest',
     'EnableMrtRequest', 'ReplacePolicyRequest', 'Arguments',
     'GetRoaRequest', 'DeleteDefinedSetRequest',
     'DeleteRpkiResponse', 'EnableZebraResponse',
     'StartServerResponse', 'ReplaceDefinedSetResponse',
     'GetDefinedSetResponse', 'ShutdownNeighborRequest',
     'ValidateRibResponse', 'DeletePolicyAssignmentResponse',
     'InjectMrtResponse', 'DisableRpkiResponse',
     'EnableZebraRequest', 'AddVrfRequest',
     'DeletePathRequest', 'EnableNeighborResponse',
     'EnableRpkiRequest', 'GetPathRequest',
     'ReplaceStatementResponse', 'DeleteBmpRequest',
     'DeleteBmpResponse', 'GetPolicyAssignmentRequest',
     'DeleteStatementResponse'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['MedAction', 'DisableNeighborResponse',
     'DeleteNeighborResponse', 'Global',
     'StartServerRequest', 'DeleteRpkiRequest',
     'GetPolicyRequest', 'RPKIConf', 'Roa', 'GetRoaResponse',
     'GetDefinedSetRequest', 'DeleteVrfResponse',
     'TableLookupPrefix', 'AfiSafiConfig',
     'DisableMrtResponse', 'AddStatementResponse',
     'TableInfo', 'GetRibInfoResponse', 'CommunityAction',
     'LocalPrefAction', 'NexthopAction', 'AsPrependAction',
     'Actions', 'MatchSet', 'AsPathLength', 'Conditions',
     'Statement', 'GetStatementResponse',
     'UseMultiplePathsConfig', 'AddVrfResponse',
     'PrefixLimit', 'PeerConf', 'Policy', 'PolicyAssignment',
     'AddPolicyAssignmentRequest', 'GetPolicyResponse',
     'RouteSelectionOptionsConfig', 'ApplyPolicy',
     'AddPolicyAssignmentResponse', 'Transport',
     'AddNeighborResponse', 'GetVrfRequest',
     'AddStatementRequest', 'IbgpState', 'IbgpConfig',
     'Ibgp', 'EbgpState', 'EbgpConfig', 'Ebgp',
     'UseMultiplePathsState', 'UseMultiplePaths',
     'LongLivedGracefulRestartState',
     'LongLivedGracefulRestartConfig',
     'LongLivedGracefulRestart', 'ResetNeighborResponse',
     'AddPathsState', 'AddPathsConfig', 'AddPaths',
     'RouteTargetMembershipState',
     'RouteTargetMembershipConfig', 'RouteTargetMembership',
     'RouteSelectionOptionsState', 'RouteSelectionOptions',
     'MpGracefulRestartState', 'MpGracefulRestartConfig',
     'MpGracefulRestart', 'AfiSafi', 'GracefulRestart',
     'RouteServer', 'TimersState', 'TimersConfig', 'Timers',
     'Queues', 'Message', 'Messages', 'PeerState',
     'RouteReflector', 'EbgpMultihop', 'Peer',
     'AddNeighborRequest', 'ValidateRibRequest',
     'DeletePolicyAssignmentRequest', 'RPKIValidation',
     'Path', 'Destination', 'Table', 'MonitorRibRequest',
     'ShutdownNeighborResponse', 'AddRpkiResponse',
     'AddPolicyRequest', 'RPKIState', 'Rpki',
     'AddPathRequest', 'ResetRpkiResponse',
     'ResetRpkiRequest', 'SoftResetNeighborRequest',
     'AddPolicyResponse', 'EnableNeighborRequest',
     'AddPathResponse', 'Vrf', 'GetVrfResponse',
     'SoftResetRpkiRequest', 'StopServerRequest',
     'AddBmpResponse', 'GetRpkiRequest',
     'DeleteNeighborRequest', 'AfiSafiState',
     'GetServerResponse', 'EnableMrtResponse',
     'InjectMrtRequest', 'Prefix', 'DefinedSet',
     'AddDefinedSetRequest',
     'ReplacePolicyAssignmentRequest', 'DeletePathResponse',
     'DeletePolicyRequest', 'DeleteVrfRequest',
     'GetPolicyAssignmentResponse',
     'DeleteDefinedSetResponse',
     'ReplacePolicyAssignmentResponse', 'GetServerRequest',
     'AddBmpRequest', 'ResetNeighborRequest',
     'GetRibInfoRequest', 'GetRibRequest',
     'GetStatementRequest', 'ReplaceStatementRequest',
     'StopServerResponse', 'DeleteStatementRequest',
     'AddRpkiRequest', 'GetRibResponse', 'DisableMrtRequest',
     'DisableRpkiRequest', 'EnableRpkiResponse',
     'ReplaceDefinedSetRequest', 'DisableNeighborRequest',
     'DeletePolicyResponse', 'SoftResetRpkiResponse',
     'GetNeighborResponse', 'ReplacePolicyResponse',
     'GetRpkiResponse', 'SoftResetNeighborResponse',
     'AddDefinedSetResponse', 'GetNeighborRequest',
     'EnableMrtRequest', 'ReplacePolicyRequest', 'Arguments',
     'GetRoaRequest', 'DeleteDefinedSetRequest',
     'DeleteRpkiResponse', 'EnableZebraResponse',
     'StartServerResponse', 'ReplaceDefinedSetResponse',
     'GetDefinedSetResponse', 'ShutdownNeighborRequest',
     'ValidateRibResponse', 'DeletePolicyAssignmentResponse',
     'InjectMrtResponse', 'DisableRpkiResponse',
     'EnableZebraRequest', 'AddVrfRequest',
     'DeletePathRequest', 'EnableNeighborResponse',
     'EnableRpkiRequest', 'GetPathRequest',
     'ReplaceStatementResponse', 'DeleteBmpRequest',
     'DeleteBmpResponse', 'GetPolicyAssignmentRequest',
     'DeleteStatementResponse'].


get_enum_names() ->
    ['SoftResetNeighborRequest.SoftResetDirection',
     'AddBmpRequest.MonitoringPolicy', 'Resource',
     'RPKIValidation.State', 'RPKIValidation.Reason',
     'TableLookupOption', 'PeerConf.RemovePrivateAs',
     'PeerState.AdminState', 'DefinedType', 'MatchType',
     'AsPathLengthType', 'Conditions.RouteType',
     'RouteAction', 'CommunityActionType', 'MedActionType',
     'PolicyType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('MedAction') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'MedActionType'}, occurrence => optional,
       opts => []},
     #{name => value, fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('DisableNeighborResponse') -> [];
find_msg_def('DeleteNeighborResponse') -> [];
find_msg_def('Global') ->
    [#{name => as, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => router_id, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => listen_port, fnum => 3, rnum => 4,
       type => int32, occurrence => optional, opts => []},
     #{name => listen_addresses, fnum => 4, rnum => 5,
       type => string, occurrence => repeated, opts => []},
     #{name => families, fnum => 5, rnum => 6,
       type => uint32, occurrence => repeated,
       opts => [packed]},
     #{name => use_multiple_paths, fnum => 6, rnum => 7,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('StartServerRequest') ->
    [#{name => global, fnum => 1, rnum => 2,
       type => {msg, 'Global'}, occurrence => optional,
       opts => []}];
find_msg_def('DeleteRpkiRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('GetPolicyRequest') -> [];
find_msg_def('RPKIConf') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => remote_port, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('Roa') ->
    [#{name => as, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => prefixlen, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => maxlen, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => prefix, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => conf, fnum => 5, rnum => 6,
       type => {msg, 'RPKIConf'}, occurrence => optional,
       opts => []}];
find_msg_def('GetRoaResponse') ->
    [#{name => roas, fnum => 1, rnum => 2,
       type => {msg, 'Roa'}, occurrence => repeated,
       opts => []}];
find_msg_def('GetDefinedSetRequest') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'DefinedType'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('DeleteVrfResponse') -> [];
find_msg_def('TableLookupPrefix') ->
    [#{name => prefix, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => lookup_option, fnum => 2, rnum => 3,
       type => {enum, 'TableLookupOption'},
       occurrence => optional, opts => []}];
find_msg_def('AfiSafiConfig') ->
    [#{name => family, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => enabled, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('DisableMrtResponse') -> [];
find_msg_def('AddStatementResponse') -> [];
find_msg_def('TableInfo') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => family, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => num_destination, fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []},
     #{name => num_path, fnum => 5, rnum => 6,
       type => uint64, occurrence => optional, opts => []},
     #{name => num_accepted, fnum => 6, rnum => 7,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def('GetRibInfoResponse') ->
    [#{name => info, fnum => 1, rnum => 2,
       type => {msg, 'TableInfo'}, occurrence => optional,
       opts => []}];
find_msg_def('CommunityAction') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'CommunityActionType'},
       occurrence => optional, opts => []},
     #{name => communities, fnum => 2, rnum => 3,
       type => string, occurrence => repeated, opts => []}];
find_msg_def('LocalPrefAction') ->
    [#{name => value, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('NexthopAction') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => self, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('AsPrependAction') ->
    [#{name => asn, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => repeat, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => use_left_most, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('Actions') ->
    [#{name => route_action, fnum => 1, rnum => 2,
       type => {enum, 'RouteAction'}, occurrence => optional,
       opts => []},
     #{name => community, fnum => 2, rnum => 3,
       type => {msg, 'CommunityAction'},
       occurrence => optional, opts => []},
     #{name => med, fnum => 3, rnum => 4,
       type => {msg, 'MedAction'}, occurrence => optional,
       opts => []},
     #{name => as_prepend, fnum => 4, rnum => 5,
       type => {msg, 'AsPrependAction'},
       occurrence => optional, opts => []},
     #{name => ext_community, fnum => 5, rnum => 6,
       type => {msg, 'CommunityAction'},
       occurrence => optional, opts => []},
     #{name => nexthop, fnum => 6, rnum => 7,
       type => {msg, 'NexthopAction'}, occurrence => optional,
       opts => []},
     #{name => local_pref, fnum => 7, rnum => 8,
       type => {msg, 'LocalPrefAction'},
       occurrence => optional, opts => []},
     #{name => large_community, fnum => 8, rnum => 9,
       type => {msg, 'CommunityAction'},
       occurrence => optional, opts => []}];
find_msg_def('MatchSet') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'MatchType'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AsPathLength') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'AsPathLengthType'},
       occurrence => optional, opts => []},
     #{name => length, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('Conditions') ->
    [#{name => prefix_set, fnum => 1, rnum => 2,
       type => {msg, 'MatchSet'}, occurrence => optional,
       opts => []},
     #{name => neighbor_set, fnum => 2, rnum => 3,
       type => {msg, 'MatchSet'}, occurrence => optional,
       opts => []},
     #{name => as_path_length, fnum => 3, rnum => 4,
       type => {msg, 'AsPathLength'}, occurrence => optional,
       opts => []},
     #{name => as_path_set, fnum => 4, rnum => 5,
       type => {msg, 'MatchSet'}, occurrence => optional,
       opts => []},
     #{name => community_set, fnum => 5, rnum => 6,
       type => {msg, 'MatchSet'}, occurrence => optional,
       opts => []},
     #{name => ext_community_set, fnum => 6, rnum => 7,
       type => {msg, 'MatchSet'}, occurrence => optional,
       opts => []},
     #{name => rpki_result, fnum => 7, rnum => 8,
       type => int32, occurrence => optional, opts => []},
     #{name => route_type, fnum => 8, rnum => 9,
       type => {enum, 'Conditions.RouteType'},
       occurrence => optional, opts => []},
     #{name => large_community_set, fnum => 9, rnum => 10,
       type => {msg, 'MatchSet'}, occurrence => optional,
       opts => []}];
find_msg_def('Statement') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => conditions, fnum => 2, rnum => 3,
       type => {msg, 'Conditions'}, occurrence => optional,
       opts => []},
     #{name => actions, fnum => 3, rnum => 4,
       type => {msg, 'Actions'}, occurrence => optional,
       opts => []}];
find_msg_def('GetStatementResponse') ->
    [#{name => statements, fnum => 1, rnum => 2,
       type => {msg, 'Statement'}, occurrence => repeated,
       opts => []}];
find_msg_def('UseMultiplePathsConfig') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('AddVrfResponse') -> [];
find_msg_def('PrefixLimit') ->
    [#{name => family, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => max_prefixes, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => shutdown_threshold_pct, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('PeerConf') ->
    [#{name => auth_password, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => local_as, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []},
     #{name => neighbor_address, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => peer_as, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []},
     #{name => peer_group, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []},
     #{name => peer_type, fnum => 7, rnum => 8,
       type => uint32, occurrence => optional, opts => []},
     #{name => remove_private_as, fnum => 8, rnum => 9,
       type => {enum, 'PeerConf.RemovePrivateAs'},
       occurrence => optional, opts => []},
     #{name => route_flap_damping, fnum => 9, rnum => 10,
       type => bool, occurrence => optional, opts => []},
     #{name => send_community, fnum => 10, rnum => 11,
       type => uint32, occurrence => optional, opts => []},
     #{name => remote_cap, fnum => 11, rnum => 12,
       type => bytes, occurrence => repeated, opts => []},
     #{name => local_cap, fnum => 12, rnum => 13,
       type => bytes, occurrence => repeated, opts => []},
     #{name => id, fnum => 13, rnum => 14, type => string,
       occurrence => optional, opts => []},
     #{name => prefix_limits, fnum => 14, rnum => 15,
       type => {msg, 'PrefixLimit'}, occurrence => repeated,
       opts => []},
     #{name => local_address, fnum => 15, rnum => 16,
       type => string, occurrence => optional, opts => []},
     #{name => neighbor_interface, fnum => 16, rnum => 17,
       type => string, occurrence => optional, opts => []},
     #{name => vrf, fnum => 17, rnum => 18, type => string,
       occurrence => optional, opts => []},
     #{name => allow_own_as, fnum => 18, rnum => 19,
       type => uint32, occurrence => optional, opts => []},
     #{name => replace_peer_as, fnum => 19, rnum => 20,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('Policy') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => statements, fnum => 2, rnum => 3,
       type => {msg, 'Statement'}, occurrence => repeated,
       opts => []}];
find_msg_def('PolicyAssignment') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'PolicyType'}, occurrence => optional,
       opts => []},
     #{name => resource, fnum => 2, rnum => 3,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => policies, fnum => 4, rnum => 5,
       type => {msg, 'Policy'}, occurrence => repeated,
       opts => []},
     #{name => default, fnum => 5, rnum => 6,
       type => {enum, 'RouteAction'}, occurrence => optional,
       opts => []}];
find_msg_def('AddPolicyAssignmentRequest') ->
    [#{name => assignment, fnum => 1, rnum => 2,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []}];
find_msg_def('GetPolicyResponse') ->
    [#{name => policies, fnum => 1, rnum => 2,
       type => {msg, 'Policy'}, occurrence => repeated,
       opts => []}];
find_msg_def('RouteSelectionOptionsConfig') ->
    [#{name => always_compare_med, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => ignore_as_path_length, fnum => 2, rnum => 3,
       type => bool, occurrence => optional, opts => []},
     #{name => external_compare_router_id, fnum => 3,
       rnum => 4, type => bool, occurrence => optional,
       opts => []},
     #{name => advertise_inactive_routes, fnum => 4,
       rnum => 5, type => bool, occurrence => optional,
       opts => []},
     #{name => enable_aigp, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => ignore_next_hop_igp_metric, fnum => 6,
       rnum => 7, type => bool, occurrence => optional,
       opts => []}];
find_msg_def('ApplyPolicy') ->
    [#{name => in_policy, fnum => 1, rnum => 2,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []},
     #{name => export_policy, fnum => 2, rnum => 3,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []},
     #{name => import_policy, fnum => 3, rnum => 4,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []}];
find_msg_def('AddPolicyAssignmentResponse') -> [];
find_msg_def('Transport') ->
    [#{name => local_address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => local_port, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => mtu_discovery, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => passive_mode, fnum => 4, rnum => 5,
       type => bool, occurrence => optional, opts => []},
     #{name => remote_address, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => remote_port, fnum => 6, rnum => 7,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcp_mss, fnum => 7, rnum => 8, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('AddNeighborResponse') -> [];
find_msg_def('GetVrfRequest') -> [];
find_msg_def('AddStatementRequest') ->
    [#{name => statement, fnum => 1, rnum => 2,
       type => {msg, 'Statement'}, occurrence => optional,
       opts => []}];
find_msg_def('IbgpState') ->
    [#{name => maximum_paths, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('IbgpConfig') ->
    [#{name => maximum_paths, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('Ibgp') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'IbgpConfig'}, occurrence => optional,
       opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'IbgpState'}, occurrence => optional,
       opts => []}];
find_msg_def('EbgpState') ->
    [#{name => allow_multiple_as, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => maximum_paths, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('EbgpConfig') ->
    [#{name => allow_multiple_as, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => maximum_paths, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('Ebgp') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'EbgpConfig'}, occurrence => optional,
       opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'EbgpState'}, occurrence => optional,
       opts => []}];
find_msg_def('UseMultiplePathsState') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('UseMultiplePaths') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'UseMultiplePathsConfig'},
       occurrence => optional, opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'UseMultiplePathsState'},
       occurrence => optional, opts => []},
     #{name => ebgp, fnum => 3, rnum => 4,
       type => {msg, 'Ebgp'}, occurrence => optional,
       opts => []},
     #{name => ibgp, fnum => 4, rnum => 5,
       type => {msg, 'Ibgp'}, occurrence => optional,
       opts => []}];
find_msg_def('LongLivedGracefulRestartState') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => received, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []},
     #{name => advertised, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => peer_restart_time, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []},
     #{name => peer_restart_timer_expired, fnum => 5,
       rnum => 6, type => bool, occurrence => optional,
       opts => []}];
find_msg_def('LongLivedGracefulRestartConfig') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => restart_time, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('LongLivedGracefulRestart') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'LongLivedGracefulRestartConfig'},
       occurrence => optional, opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'LongLivedGracefulRestartState'},
       occurrence => optional, opts => []}];
find_msg_def('ResetNeighborResponse') -> [];
find_msg_def('AddPathsState') ->
    [#{name => 'receive', fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => send_max, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('AddPathsConfig') ->
    [#{name => 'receive', fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => send_max, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('AddPaths') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'AddPathsConfig'}, occurrence => optional,
       opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'AddPathsState'}, occurrence => optional,
       opts => []}];
find_msg_def('RouteTargetMembershipState') ->
    [#{name => deferral_time, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('RouteTargetMembershipConfig') ->
    [#{name => deferral_time, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('RouteTargetMembership') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'RouteTargetMembershipConfig'},
       occurrence => optional, opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'RouteTargetMembershipState'},
       occurrence => optional, opts => []}];
find_msg_def('RouteSelectionOptionsState') ->
    [#{name => always_compare_med, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => ignore_as_path_length, fnum => 2, rnum => 3,
       type => bool, occurrence => optional, opts => []},
     #{name => external_compare_router_id, fnum => 3,
       rnum => 4, type => bool, occurrence => optional,
       opts => []},
     #{name => advertise_inactive_routes, fnum => 4,
       rnum => 5, type => bool, occurrence => optional,
       opts => []},
     #{name => enable_aigp, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => ignore_next_hop_igp_metric, fnum => 6,
       rnum => 7, type => bool, occurrence => optional,
       opts => []}];
find_msg_def('RouteSelectionOptions') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'RouteSelectionOptionsConfig'},
       occurrence => optional, opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'RouteSelectionOptionsState'},
       occurrence => optional, opts => []}];
find_msg_def('MpGracefulRestartState') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => received, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []},
     #{name => advertised, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => end_of_rib_received, fnum => 4, rnum => 5,
       type => bool, occurrence => optional, opts => []},
     #{name => end_of_rib_sent, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('MpGracefulRestartConfig') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('MpGracefulRestart') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'MpGracefulRestartConfig'},
       occurrence => optional, opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'MpGracefulRestartState'},
       occurrence => optional, opts => []}];
find_msg_def('AfiSafi') ->
    [#{name => mp_graceful_restart, fnum => 1, rnum => 2,
       type => {msg, 'MpGracefulRestart'},
       occurrence => optional, opts => []},
     #{name => config, fnum => 2, rnum => 3,
       type => {msg, 'AfiSafiConfig'}, occurrence => optional,
       opts => []},
     #{name => apply_policy, fnum => 3, rnum => 4,
       type => {msg, 'ApplyPolicy'}, occurrence => optional,
       opts => []},
     #{name => route_selection_options, fnum => 4, rnum => 5,
       type => {msg, 'RouteSelectionOptions'},
       occurrence => optional, opts => []},
     #{name => use_multiple_paths, fnum => 5, rnum => 6,
       type => {msg, 'UseMultiplePaths'},
       occurrence => optional, opts => []},
     #{name => prefix_limits, fnum => 6, rnum => 7,
       type => {msg, 'PrefixLimit'}, occurrence => optional,
       opts => []},
     #{name => route_target_membership, fnum => 7, rnum => 8,
       type => {msg, 'RouteTargetMembership'},
       occurrence => optional, opts => []},
     #{name => long_lived_graceful_restart, fnum => 8,
       rnum => 9, type => {msg, 'LongLivedGracefulRestart'},
       occurrence => optional, opts => []},
     #{name => add_paths, fnum => 9, rnum => 10,
       type => {msg, 'AddPaths'}, occurrence => optional,
       opts => []}];
find_msg_def('GracefulRestart') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => restart_time, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => helper_only, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => deferral_time, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []},
     #{name => notification_enabled, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => longlived_enabled, fnum => 6, rnum => 7,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('RouteServer') ->
    [#{name => route_server_client, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('TimersState') ->
    [#{name => connect_retry, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => hold_time, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => keepalive_interval, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => minimum_advertisement_interval, fnum => 4,
       rnum => 5, type => uint64, occurrence => optional,
       opts => []},
     #{name => negotiated_hold_time, fnum => 5, rnum => 6,
       type => uint64, occurrence => optional, opts => []},
     #{name => uptime, fnum => 6, rnum => 7, type => uint64,
       occurrence => optional, opts => []},
     #{name => downtime, fnum => 7, rnum => 8,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def('TimersConfig') ->
    [#{name => connect_retry, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => hold_time, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => keepalive_interval, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => minimum_advertisement_interval, fnum => 4,
       rnum => 5, type => uint64, occurrence => optional,
       opts => []}];
find_msg_def('Timers') ->
    [#{name => config, fnum => 1, rnum => 2,
       type => {msg, 'TimersConfig'}, occurrence => optional,
       opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'TimersState'}, occurrence => optional,
       opts => []}];
find_msg_def('Queues') ->
    [#{name => input, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => output, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('Message') ->
    [#{name => 'NOTIFICATION', fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => 'UPDATE', fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => 'OPEN', fnum => 3, rnum => 4, type => uint64,
       occurrence => optional, opts => []},
     #{name => 'KEEPALIVE', fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []},
     #{name => 'REFRESH', fnum => 5, rnum => 6,
       type => uint64, occurrence => optional, opts => []},
     #{name => 'DISCARDED', fnum => 6, rnum => 7,
       type => uint64, occurrence => optional, opts => []},
     #{name => 'TOTAL', fnum => 7, rnum => 8, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def('Messages') ->
    [#{name => received, fnum => 1, rnum => 2,
       type => {msg, 'Message'}, occurrence => optional,
       opts => []},
     #{name => sent, fnum => 2, rnum => 3,
       type => {msg, 'Message'}, occurrence => optional,
       opts => []}];
find_msg_def('PeerState') ->
    [#{name => auth_password, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => local_as, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []},
     #{name => messages, fnum => 4, rnum => 5,
       type => {msg, 'Messages'}, occurrence => optional,
       opts => []},
     #{name => neighbor_address, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => peer_as, fnum => 6, rnum => 7, type => uint32,
       occurrence => optional, opts => []},
     #{name => peer_group, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []},
     #{name => peer_type, fnum => 8, rnum => 9,
       type => uint32, occurrence => optional, opts => []},
     #{name => queues, fnum => 9, rnum => 10,
       type => {msg, 'Queues'}, occurrence => optional,
       opts => []},
     #{name => remove_private_as, fnum => 10, rnum => 11,
       type => uint32, occurrence => optional, opts => []},
     #{name => route_flap_damping, fnum => 11, rnum => 12,
       type => bool, occurrence => optional, opts => []},
     #{name => send_community, fnum => 12, rnum => 13,
       type => uint32, occurrence => optional, opts => []},
     #{name => session_state, fnum => 13, rnum => 14,
       type => uint32, occurrence => optional, opts => []},
     #{name => supported_capabilities, fnum => 14,
       rnum => 15, type => string, occurrence => repeated,
       opts => []},
     #{name => bgp_state, fnum => 15, rnum => 16,
       type => string, occurrence => optional, opts => []},
     #{name => admin_state, fnum => 16, rnum => 17,
       type => {enum, 'PeerState.AdminState'},
       occurrence => optional, opts => []},
     #{name => received, fnum => 17, rnum => 18,
       type => uint32, occurrence => optional, opts => []},
     #{name => accepted, fnum => 18, rnum => 19,
       type => uint32, occurrence => optional, opts => []},
     #{name => advertised, fnum => 19, rnum => 20,
       type => uint32, occurrence => optional, opts => []},
     #{name => out_q, fnum => 20, rnum => 21, type => uint32,
       occurrence => optional, opts => []},
     #{name => flops, fnum => 21, rnum => 22, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('RouteReflector') ->
    [#{name => route_reflector_client, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => route_reflector_cluster_id, fnum => 2,
       rnum => 3, type => string, occurrence => optional,
       opts => []}];
find_msg_def('EbgpMultihop') ->
    [#{name => enabled, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => multihop_ttl, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('Peer') ->
    [#{name => families, fnum => 1, rnum => 2,
       type => uint32, occurrence => repeated,
       opts => [packed]},
     #{name => apply_policy, fnum => 2, rnum => 3,
       type => {msg, 'ApplyPolicy'}, occurrence => optional,
       opts => []},
     #{name => conf, fnum => 3, rnum => 4,
       type => {msg, 'PeerConf'}, occurrence => optional,
       opts => []},
     #{name => ebgp_multihop, fnum => 4, rnum => 5,
       type => {msg, 'EbgpMultihop'}, occurrence => optional,
       opts => []},
     #{name => route_reflector, fnum => 5, rnum => 6,
       type => {msg, 'RouteReflector'}, occurrence => optional,
       opts => []},
     #{name => info, fnum => 6, rnum => 7,
       type => {msg, 'PeerState'}, occurrence => optional,
       opts => []},
     #{name => timers, fnum => 7, rnum => 8,
       type => {msg, 'Timers'}, occurrence => optional,
       opts => []},
     #{name => transport, fnum => 8, rnum => 9,
       type => {msg, 'Transport'}, occurrence => optional,
       opts => []},
     #{name => route_server, fnum => 9, rnum => 10,
       type => {msg, 'RouteServer'}, occurrence => optional,
       opts => []},
     #{name => graceful_restart, fnum => 10, rnum => 11,
       type => {msg, 'GracefulRestart'},
       occurrence => optional, opts => []},
     #{name => afi_safis, fnum => 11, rnum => 12,
       type => {msg, 'AfiSafi'}, occurrence => repeated,
       opts => []},
     #{name => add_paths, fnum => 12, rnum => 13,
       type => {msg, 'AddPaths'}, occurrence => optional,
       opts => []}];
find_msg_def('AddNeighborRequest') ->
    [#{name => peer, fnum => 1, rnum => 2,
       type => {msg, 'Peer'}, occurrence => optional,
       opts => []}];
find_msg_def('ValidateRibRequest') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => family, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => prefix, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []}];
find_msg_def('DeletePolicyAssignmentRequest') ->
    [#{name => assignment, fnum => 1, rnum => 2,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []},
     #{name => all, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('RPKIValidation') ->
    [#{name => state, fnum => 1, rnum => 2,
       type => {enum, 'RPKIValidation.State'},
       occurrence => optional, opts => []},
     #{name => reason, fnum => 2, rnum => 3,
       type => {enum, 'RPKIValidation.Reason'},
       occurrence => optional, opts => []},
     #{name => matched, fnum => 3, rnum => 4,
       type => {msg, 'Roa'}, occurrence => repeated,
       opts => []},
     #{name => unmatched_as, fnum => 4, rnum => 5,
       type => {msg, 'Roa'}, occurrence => repeated,
       opts => []},
     #{name => unmatched_length, fnum => 5, rnum => 6,
       type => {msg, 'Roa'}, occurrence => repeated,
       opts => []}];
find_msg_def('Path') ->
    [#{name => nlri, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => pattrs, fnum => 2, rnum => 3, type => bytes,
       occurrence => repeated, opts => []},
     #{name => age, fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []},
     #{name => best, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => is_withdraw, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => validation, fnum => 6, rnum => 7,
       type => int32, occurrence => optional, opts => []},
     #{name => validation_detail, fnum => 7, rnum => 8,
       type => {msg, 'RPKIValidation'}, occurrence => optional,
       opts => []},
     #{name => no_implicit_withdraw, fnum => 8, rnum => 9,
       type => bool, occurrence => optional, opts => []},
     #{name => family, fnum => 9, rnum => 10, type => uint32,
       occurrence => optional, opts => []},
     #{name => source_asn, fnum => 10, rnum => 11,
       type => uint32, occurrence => optional, opts => []},
     #{name => source_id, fnum => 11, rnum => 12,
       type => string, occurrence => optional, opts => []},
     #{name => filtered, fnum => 12, rnum => 13,
       type => bool, occurrence => optional, opts => []},
     #{name => stale, fnum => 13, rnum => 14, type => bool,
       occurrence => optional, opts => []},
     #{name => is_from_external, fnum => 14, rnum => 15,
       type => bool, occurrence => optional, opts => []},
     #{name => neighbor_ip, fnum => 15, rnum => 16,
       type => string, occurrence => optional, opts => []},
     #{name => uuid, fnum => 16, rnum => 17, type => bytes,
       occurrence => optional, opts => []},
     #{name => is_nexthop_invalid, fnum => 17, rnum => 18,
       type => bool, occurrence => optional, opts => []},
     #{name => identifier, fnum => 18, rnum => 19,
       type => uint32, occurrence => optional, opts => []},
     #{name => local_identifier, fnum => 19, rnum => 20,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('Destination') ->
    [#{name => prefix, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => paths, fnum => 2, rnum => 3,
       type => {msg, 'Path'}, occurrence => repeated,
       opts => []},
     #{name => longer_prefixes, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => shorter_prefixes, fnum => 4, rnum => 5,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('Table') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => family, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => destinations, fnum => 4, rnum => 5,
       type => {msg, 'Destination'}, occurrence => repeated,
       opts => []},
     #{name => post_policy, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('MonitorRibRequest') ->
    [#{name => table, fnum => 1, rnum => 2,
       type => {msg, 'Table'}, occurrence => optional,
       opts => []},
     #{name => current, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('ShutdownNeighborResponse') -> [];
find_msg_def('AddRpkiResponse') -> [];
find_msg_def('AddPolicyRequest') ->
    [#{name => policy, fnum => 1, rnum => 2,
       type => {msg, 'Policy'}, occurrence => optional,
       opts => []},
     #{name => refer_existing_statements, fnum => 2,
       rnum => 3, type => bool, occurrence => optional,
       opts => []}];
find_msg_def('RPKIState') ->
    [#{name => uptime, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => downtime, fnum => 2, rnum => 3, type => int64,
       occurrence => optional, opts => []},
     #{name => up, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []},
     #{name => record_ipv4, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []},
     #{name => record_ipv6, fnum => 5, rnum => 6,
       type => uint32, occurrence => optional, opts => []},
     #{name => prefix_ipv4, fnum => 6, rnum => 7,
       type => uint32, occurrence => optional, opts => []},
     #{name => prefix_ipv6, fnum => 7, rnum => 8,
       type => uint32, occurrence => optional, opts => []},
     #{name => serial, fnum => 8, rnum => 9, type => uint32,
       occurrence => optional, opts => []},
     #{name => received_ipv4, fnum => 9, rnum => 10,
       type => int64, occurrence => optional, opts => []},
     #{name => received_ipv6, fnum => 10, rnum => 11,
       type => int64, occurrence => optional, opts => []},
     #{name => serial_notify, fnum => 11, rnum => 12,
       type => int64, occurrence => optional, opts => []},
     #{name => cache_reset, fnum => 12, rnum => 13,
       type => int64, occurrence => optional, opts => []},
     #{name => cache_response, fnum => 13, rnum => 14,
       type => int64, occurrence => optional, opts => []},
     #{name => end_of_data, fnum => 14, rnum => 15,
       type => int64, occurrence => optional, opts => []},
     #{name => error, fnum => 15, rnum => 16, type => int64,
       occurrence => optional, opts => []},
     #{name => serial_query, fnum => 16, rnum => 17,
       type => int64, occurrence => optional, opts => []},
     #{name => reset_query, fnum => 17, rnum => 18,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('Rpki') ->
    [#{name => conf, fnum => 1, rnum => 2,
       type => {msg, 'RPKIConf'}, occurrence => optional,
       opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {msg, 'RPKIState'}, occurrence => optional,
       opts => []}];
find_msg_def('AddPathRequest') ->
    [#{name => resource, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => vrf_id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => path, fnum => 3, rnum => 4,
       type => {msg, 'Path'}, occurrence => optional,
       opts => []}];
find_msg_def('ResetRpkiResponse') -> [];
find_msg_def('ResetRpkiRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def('SoftResetNeighborRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => direction, fnum => 2, rnum => 3,
       type =>
	   {enum, 'SoftResetNeighborRequest.SoftResetDirection'},
       occurrence => optional, opts => []}];
find_msg_def('AddPolicyResponse') -> [];
find_msg_def('EnableNeighborRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def('AddPathResponse') ->
    [#{name => uuid, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('Vrf') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => rd, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => import_rt, fnum => 3, rnum => 4,
       type => bytes, occurrence => repeated, opts => []},
     #{name => export_rt, fnum => 4, rnum => 5,
       type => bytes, occurrence => repeated, opts => []},
     #{name => id, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('GetVrfResponse') ->
    [#{name => vrfs, fnum => 1, rnum => 2,
       type => {msg, 'Vrf'}, occurrence => repeated,
       opts => []}];
find_msg_def('SoftResetRpkiRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def('StopServerRequest') -> [];
find_msg_def('AddBmpResponse') -> [];
find_msg_def('GetRpkiRequest') ->
    [#{name => family, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('DeleteNeighborRequest') ->
    [#{name => peer, fnum => 1, rnum => 2,
       type => {msg, 'Peer'}, occurrence => optional,
       opts => []}];
find_msg_def('AfiSafiState') ->
    [#{name => family, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => enabled, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []},
     #{name => total_paths, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []},
     #{name => total_prefixes, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('GetServerResponse') ->
    [#{name => global, fnum => 1, rnum => 2,
       type => {msg, 'Global'}, occurrence => optional,
       opts => []}];
find_msg_def('EnableMrtResponse') -> [];
find_msg_def('InjectMrtRequest') ->
    [#{name => resource, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => vrf_id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => paths, fnum => 3, rnum => 4,
       type => {msg, 'Path'}, occurrence => repeated,
       opts => []}];
find_msg_def('Prefix') ->
    [#{name => ip_prefix, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => mask_length_min, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => mask_length_max, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('DefinedSet') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'DefinedType'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => list, fnum => 3, rnum => 4, type => string,
       occurrence => repeated, opts => []},
     #{name => prefixes, fnum => 4, rnum => 5,
       type => {msg, 'Prefix'}, occurrence => repeated,
       opts => []}];
find_msg_def('AddDefinedSetRequest') ->
    [#{name => set, fnum => 1, rnum => 2,
       type => {msg, 'DefinedSet'}, occurrence => optional,
       opts => []}];
find_msg_def('ReplacePolicyAssignmentRequest') ->
    [#{name => assignment, fnum => 1, rnum => 2,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []}];
find_msg_def('DeletePathResponse') -> [];
find_msg_def('DeletePolicyRequest') ->
    [#{name => policy, fnum => 1, rnum => 2,
       type => {msg, 'Policy'}, occurrence => optional,
       opts => []},
     #{name => preserve_statements, fnum => 2, rnum => 3,
       type => bool, occurrence => optional, opts => []},
     #{name => all, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('DeleteVrfRequest') ->
    [#{name => vrf, fnum => 1, rnum => 2,
       type => {msg, 'Vrf'}, occurrence => optional,
       opts => []}];
find_msg_def('GetPolicyAssignmentResponse') ->
    [#{name => assignment, fnum => 1, rnum => 2,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []}];
find_msg_def('DeleteDefinedSetResponse') -> [];
find_msg_def('ReplacePolicyAssignmentResponse') -> [];
find_msg_def('GetServerRequest') -> [];
find_msg_def('AddBmpRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => type, fnum => 3, rnum => 4,
       type => {enum, 'AddBmpRequest.MonitoringPolicy'},
       occurrence => optional, opts => []}];
find_msg_def('ResetNeighborRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => communication, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('GetRibInfoRequest') ->
    [#{name => info, fnum => 1, rnum => 2,
       type => {msg, 'TableInfo'}, occurrence => optional,
       opts => []}];
find_msg_def('GetRibRequest') ->
    [#{name => table, fnum => 1, rnum => 2,
       type => {msg, 'Table'}, occurrence => optional,
       opts => []}];
find_msg_def('GetStatementRequest') -> [];
find_msg_def('ReplaceStatementRequest') ->
    [#{name => statement, fnum => 1, rnum => 2,
       type => {msg, 'Statement'}, occurrence => optional,
       opts => []}];
find_msg_def('StopServerResponse') -> [];
find_msg_def('DeleteStatementRequest') ->
    [#{name => statement, fnum => 1, rnum => 2,
       type => {msg, 'Statement'}, occurrence => optional,
       opts => []},
     #{name => all, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('AddRpkiRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => lifetime, fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('GetRibResponse') ->
    [#{name => table, fnum => 1, rnum => 2,
       type => {msg, 'Table'}, occurrence => optional,
       opts => []}];
find_msg_def('DisableMrtRequest') -> [];
find_msg_def('DisableRpkiRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def('EnableRpkiResponse') -> [];
find_msg_def('ReplaceDefinedSetRequest') ->
    [#{name => set, fnum => 1, rnum => 2,
       type => {msg, 'DefinedSet'}, occurrence => optional,
       opts => []}];
find_msg_def('DisableNeighborRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => communication, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('DeletePolicyResponse') -> [];
find_msg_def('SoftResetRpkiResponse') -> [];
find_msg_def('GetNeighborResponse') ->
    [#{name => peers, fnum => 1, rnum => 2,
       type => {msg, 'Peer'}, occurrence => repeated,
       opts => []}];
find_msg_def('ReplacePolicyResponse') -> [];
find_msg_def('GetRpkiResponse') ->
    [#{name => servers, fnum => 1, rnum => 2,
       type => {msg, 'Rpki'}, occurrence => repeated,
       opts => []}];
find_msg_def('SoftResetNeighborResponse') -> [];
find_msg_def('AddDefinedSetResponse') -> [];
find_msg_def('GetNeighborRequest') ->
    [#{name => enableAdvertised, fnum => 1, rnum => 2,
       type => bool, occurrence => optional, opts => []},
     #{name => address, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('EnableMrtRequest') ->
    [#{name => dump_type, fnum => 1, rnum => 2,
       type => int32, occurrence => optional, opts => []},
     #{name => filename, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => interval, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def('ReplacePolicyRequest') ->
    [#{name => policy, fnum => 1, rnum => 2,
       type => {msg, 'Policy'}, occurrence => optional,
       opts => []},
     #{name => refer_existing_statements, fnum => 2,
       rnum => 3, type => bool, occurrence => optional,
       opts => []},
     #{name => preserve_statements, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []}];
find_msg_def('Arguments') ->
    [#{name => resource, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => family, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => name, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []}];
find_msg_def('GetRoaRequest') ->
    [#{name => family, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('DeleteDefinedSetRequest') ->
    [#{name => set, fnum => 1, rnum => 2,
       type => {msg, 'DefinedSet'}, occurrence => optional,
       opts => []},
     #{name => all, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('DeleteRpkiResponse') -> [];
find_msg_def('EnableZebraResponse') -> [];
find_msg_def('StartServerResponse') -> [];
find_msg_def('ReplaceDefinedSetResponse') -> [];
find_msg_def('GetDefinedSetResponse') ->
    [#{name => sets, fnum => 1, rnum => 2,
       type => {msg, 'DefinedSet'}, occurrence => repeated,
       opts => []}];
find_msg_def('ShutdownNeighborRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => communication, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('ValidateRibResponse') -> [];
find_msg_def('DeletePolicyAssignmentResponse') -> [];
find_msg_def('InjectMrtResponse') -> [];
find_msg_def('DisableRpkiResponse') -> [];
find_msg_def('EnableZebraRequest') ->
    [#{name => url, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => route_types, fnum => 2, rnum => 3,
       type => string, occurrence => repeated, opts => []},
     #{name => version, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => nexthop_trigger_enable, fnum => 4, rnum => 5,
       type => bool, occurrence => optional, opts => []},
     #{name => nexthop_trigger_delay, fnum => 5, rnum => 6,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('AddVrfRequest') ->
    [#{name => vrf, fnum => 1, rnum => 2,
       type => {msg, 'Vrf'}, occurrence => optional,
       opts => []}];
find_msg_def('DeletePathRequest') ->
    [#{name => resource, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => vrf_id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => family, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => path, fnum => 4, rnum => 5,
       type => {msg, 'Path'}, occurrence => optional,
       opts => []},
     #{name => uuid, fnum => 5, rnum => 6, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('EnableNeighborResponse') -> [];
find_msg_def('EnableRpkiRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def('GetPathRequest') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'Resource'}, occurrence => optional,
       opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => family, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => prefixes, fnum => 4, rnum => 5,
       type => {msg, 'TableLookupPrefix'},
       occurrence => repeated, opts => []}];
find_msg_def('ReplaceStatementResponse') -> [];
find_msg_def('DeleteBmpRequest') ->
    [#{name => address, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('DeleteBmpResponse') -> [];
find_msg_def('GetPolicyAssignmentRequest') ->
    [#{name => assignment, fnum => 1, rnum => 2,
       type => {msg, 'PolicyAssignment'},
       occurrence => optional, opts => []}];
find_msg_def('DeleteStatementResponse') -> [];
find_msg_def(_) -> error.


find_enum_def('SoftResetNeighborRequest.SoftResetDirection') ->
    [{'IN', 0}, {'OUT', 1}, {'BOTH', 2}];
find_enum_def('AddBmpRequest.MonitoringPolicy') ->
    [{'PRE', 0}, {'POST', 1}, {'BOTH', 2}, {'LOCAL', 3},
     {'ALL', 4}];
find_enum_def('Resource') ->
    [{'GLOBAL', 0}, {'LOCAL', 1}, {'ADJ_IN', 2},
     {'ADJ_OUT', 3}, {'VRF', 4}];
find_enum_def('RPKIValidation.State') ->
    [{'STATE_NONE', 0}, {'STATE_NOT_FOUND', 1},
     {'STATE_VALID', 2}, {'STATE_INVALID', 3}];
find_enum_def('RPKIValidation.Reason') ->
    [{'REASOT_NONE', 0}, {'REASON_AS', 1},
     {'REASON_LENGTH', 2}];
find_enum_def('TableLookupOption') ->
    [{'LOOKUP_EXACT', 0}, {'LOOKUP_LONGER', 1},
     {'LOOKUP_SHORTER', 2}];
find_enum_def('PeerConf.RemovePrivateAs') ->
    [{'NONE', 0}, {'ALL', 1}, {'REPLACE', 2}];
find_enum_def('PeerState.AdminState') ->
    [{'UP', 0}, {'DOWN', 1}, {'PFX_CT', 2}];
find_enum_def('DefinedType') ->
    [{'PREFIX', 0}, {'NEIGHBOR', 1}, {'TAG', 2},
     {'AS_PATH', 3}, {'COMMUNITY', 4}, {'EXT_COMMUNITY', 5},
     {'LARGE_COMMUNITY', 6}];
find_enum_def('MatchType') ->
    [{'ANY', 0}, {'ALL', 1}, {'INVERT', 2}];
find_enum_def('AsPathLengthType') ->
    [{'EQ', 0}, {'GE', 1}, {'LE', 2}];
find_enum_def('Conditions.RouteType') ->
    [{'ROUTE_TYPE_NONE', 0}, {'ROUTE_TYPE_INTERNAL', 1},
     {'ROUTE_TYPE_EXTERNAL', 2}, {'ROUTE_TYPE_LOCAL', 3}];
find_enum_def('RouteAction') ->
    [{'NONE', 0}, {'ACCEPT', 1}, {'REJECT', 2}];
find_enum_def('CommunityActionType') ->
    [{'COMMUNITY_ADD', 0}, {'COMMUNITY_REMOVE', 1},
     {'COMMUNITY_REPLACE', 2}];
find_enum_def('MedActionType') ->
    [{'MED_MOD', 0}, {'MED_REPLACE', 1}];
find_enum_def('PolicyType') ->
    [{'IN', 0}, {'IMPORT', 1}, {'EXPORT', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('SoftResetNeighborRequest.SoftResetDirection',
		     Value) ->
    'enum_symbol_by_value_SoftResetNeighborRequest.SoftResetDirection'(Value);
enum_symbol_by_value('AddBmpRequest.MonitoringPolicy',
		     Value) ->
    'enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'(Value);
enum_symbol_by_value('Resource', Value) ->
    enum_symbol_by_value_Resource(Value);
enum_symbol_by_value('RPKIValidation.State', Value) ->
    'enum_symbol_by_value_RPKIValidation.State'(Value);
enum_symbol_by_value('RPKIValidation.Reason', Value) ->
    'enum_symbol_by_value_RPKIValidation.Reason'(Value);
enum_symbol_by_value('TableLookupOption', Value) ->
    enum_symbol_by_value_TableLookupOption(Value);
enum_symbol_by_value('PeerConf.RemovePrivateAs',
		     Value) ->
    'enum_symbol_by_value_PeerConf.RemovePrivateAs'(Value);
enum_symbol_by_value('PeerState.AdminState', Value) ->
    'enum_symbol_by_value_PeerState.AdminState'(Value);
enum_symbol_by_value('DefinedType', Value) ->
    enum_symbol_by_value_DefinedType(Value);
enum_symbol_by_value('MatchType', Value) ->
    enum_symbol_by_value_MatchType(Value);
enum_symbol_by_value('AsPathLengthType', Value) ->
    enum_symbol_by_value_AsPathLengthType(Value);
enum_symbol_by_value('Conditions.RouteType', Value) ->
    'enum_symbol_by_value_Conditions.RouteType'(Value);
enum_symbol_by_value('RouteAction', Value) ->
    enum_symbol_by_value_RouteAction(Value);
enum_symbol_by_value('CommunityActionType', Value) ->
    enum_symbol_by_value_CommunityActionType(Value);
enum_symbol_by_value('MedActionType', Value) ->
    enum_symbol_by_value_MedActionType(Value);
enum_symbol_by_value('PolicyType', Value) ->
    enum_symbol_by_value_PolicyType(Value).


enum_value_by_symbol('SoftResetNeighborRequest.SoftResetDirection',
		     Sym) ->
    'enum_value_by_symbol_SoftResetNeighborRequest.SoftResetDirection'(Sym);
enum_value_by_symbol('AddBmpRequest.MonitoringPolicy',
		     Sym) ->
    'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'(Sym);
enum_value_by_symbol('Resource', Sym) ->
    enum_value_by_symbol_Resource(Sym);
enum_value_by_symbol('RPKIValidation.State', Sym) ->
    'enum_value_by_symbol_RPKIValidation.State'(Sym);
enum_value_by_symbol('RPKIValidation.Reason', Sym) ->
    'enum_value_by_symbol_RPKIValidation.Reason'(Sym);
enum_value_by_symbol('TableLookupOption', Sym) ->
    enum_value_by_symbol_TableLookupOption(Sym);
enum_value_by_symbol('PeerConf.RemovePrivateAs', Sym) ->
    'enum_value_by_symbol_PeerConf.RemovePrivateAs'(Sym);
enum_value_by_symbol('PeerState.AdminState', Sym) ->
    'enum_value_by_symbol_PeerState.AdminState'(Sym);
enum_value_by_symbol('DefinedType', Sym) ->
    enum_value_by_symbol_DefinedType(Sym);
enum_value_by_symbol('MatchType', Sym) ->
    enum_value_by_symbol_MatchType(Sym);
enum_value_by_symbol('AsPathLengthType', Sym) ->
    enum_value_by_symbol_AsPathLengthType(Sym);
enum_value_by_symbol('Conditions.RouteType', Sym) ->
    'enum_value_by_symbol_Conditions.RouteType'(Sym);
enum_value_by_symbol('RouteAction', Sym) ->
    enum_value_by_symbol_RouteAction(Sym);
enum_value_by_symbol('CommunityActionType', Sym) ->
    enum_value_by_symbol_CommunityActionType(Sym);
enum_value_by_symbol('MedActionType', Sym) ->
    enum_value_by_symbol_MedActionType(Sym);
enum_value_by_symbol('PolicyType', Sym) ->
    enum_value_by_symbol_PolicyType(Sym).


'enum_symbol_by_value_SoftResetNeighborRequest.SoftResetDirection'(0) ->
    'IN';
'enum_symbol_by_value_SoftResetNeighborRequest.SoftResetDirection'(1) ->
    'OUT';
'enum_symbol_by_value_SoftResetNeighborRequest.SoftResetDirection'(2) ->
    'BOTH'.


'enum_value_by_symbol_SoftResetNeighborRequest.SoftResetDirection'('IN') ->
    0;
'enum_value_by_symbol_SoftResetNeighborRequest.SoftResetDirection'('OUT') ->
    1;
'enum_value_by_symbol_SoftResetNeighborRequest.SoftResetDirection'('BOTH') ->
    2.

'enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'(0) ->
    'PRE';
'enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'(1) ->
    'POST';
'enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'(2) ->
    'BOTH';
'enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'(3) ->
    'LOCAL';
'enum_symbol_by_value_AddBmpRequest.MonitoringPolicy'(4) ->
    'ALL'.


'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'('PRE') ->
    0;
'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'('POST') ->
    1;
'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'('BOTH') ->
    2;
'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'('LOCAL') ->
    3;
'enum_value_by_symbol_AddBmpRequest.MonitoringPolicy'('ALL') ->
    4.

enum_symbol_by_value_Resource(0) -> 'GLOBAL';
enum_symbol_by_value_Resource(1) -> 'LOCAL';
enum_symbol_by_value_Resource(2) -> 'ADJ_IN';
enum_symbol_by_value_Resource(3) -> 'ADJ_OUT';
enum_symbol_by_value_Resource(4) -> 'VRF'.


enum_value_by_symbol_Resource('GLOBAL') -> 0;
enum_value_by_symbol_Resource('LOCAL') -> 1;
enum_value_by_symbol_Resource('ADJ_IN') -> 2;
enum_value_by_symbol_Resource('ADJ_OUT') -> 3;
enum_value_by_symbol_Resource('VRF') -> 4.

'enum_symbol_by_value_RPKIValidation.State'(0) ->
    'STATE_NONE';
'enum_symbol_by_value_RPKIValidation.State'(1) ->
    'STATE_NOT_FOUND';
'enum_symbol_by_value_RPKIValidation.State'(2) ->
    'STATE_VALID';
'enum_symbol_by_value_RPKIValidation.State'(3) ->
    'STATE_INVALID'.


'enum_value_by_symbol_RPKIValidation.State'('STATE_NONE') ->
    0;
'enum_value_by_symbol_RPKIValidation.State'('STATE_NOT_FOUND') ->
    1;
'enum_value_by_symbol_RPKIValidation.State'('STATE_VALID') ->
    2;
'enum_value_by_symbol_RPKIValidation.State'('STATE_INVALID') ->
    3.

'enum_symbol_by_value_RPKIValidation.Reason'(0) ->
    'REASOT_NONE';
'enum_symbol_by_value_RPKIValidation.Reason'(1) ->
    'REASON_AS';
'enum_symbol_by_value_RPKIValidation.Reason'(2) ->
    'REASON_LENGTH'.


'enum_value_by_symbol_RPKIValidation.Reason'('REASOT_NONE') ->
    0;
'enum_value_by_symbol_RPKIValidation.Reason'('REASON_AS') ->
    1;
'enum_value_by_symbol_RPKIValidation.Reason'('REASON_LENGTH') ->
    2.

enum_symbol_by_value_TableLookupOption(0) ->
    'LOOKUP_EXACT';
enum_symbol_by_value_TableLookupOption(1) ->
    'LOOKUP_LONGER';
enum_symbol_by_value_TableLookupOption(2) ->
    'LOOKUP_SHORTER'.


enum_value_by_symbol_TableLookupOption('LOOKUP_EXACT') ->
    0;
enum_value_by_symbol_TableLookupOption('LOOKUP_LONGER') ->
    1;
enum_value_by_symbol_TableLookupOption('LOOKUP_SHORTER') ->
    2.

'enum_symbol_by_value_PeerConf.RemovePrivateAs'(0) ->
    'NONE';
'enum_symbol_by_value_PeerConf.RemovePrivateAs'(1) ->
    'ALL';
'enum_symbol_by_value_PeerConf.RemovePrivateAs'(2) ->
    'REPLACE'.


'enum_value_by_symbol_PeerConf.RemovePrivateAs'('NONE') ->
    0;
'enum_value_by_symbol_PeerConf.RemovePrivateAs'('ALL') ->
    1;
'enum_value_by_symbol_PeerConf.RemovePrivateAs'('REPLACE') ->
    2.

'enum_symbol_by_value_PeerState.AdminState'(0) -> 'UP';
'enum_symbol_by_value_PeerState.AdminState'(1) ->
    'DOWN';
'enum_symbol_by_value_PeerState.AdminState'(2) ->
    'PFX_CT'.


'enum_value_by_symbol_PeerState.AdminState'('UP') -> 0;
'enum_value_by_symbol_PeerState.AdminState'('DOWN') ->
    1;
'enum_value_by_symbol_PeerState.AdminState'('PFX_CT') ->
    2.

enum_symbol_by_value_DefinedType(0) -> 'PREFIX';
enum_symbol_by_value_DefinedType(1) -> 'NEIGHBOR';
enum_symbol_by_value_DefinedType(2) -> 'TAG';
enum_symbol_by_value_DefinedType(3) -> 'AS_PATH';
enum_symbol_by_value_DefinedType(4) -> 'COMMUNITY';
enum_symbol_by_value_DefinedType(5) -> 'EXT_COMMUNITY';
enum_symbol_by_value_DefinedType(6) ->
    'LARGE_COMMUNITY'.


enum_value_by_symbol_DefinedType('PREFIX') -> 0;
enum_value_by_symbol_DefinedType('NEIGHBOR') -> 1;
enum_value_by_symbol_DefinedType('TAG') -> 2;
enum_value_by_symbol_DefinedType('AS_PATH') -> 3;
enum_value_by_symbol_DefinedType('COMMUNITY') -> 4;
enum_value_by_symbol_DefinedType('EXT_COMMUNITY') -> 5;
enum_value_by_symbol_DefinedType('LARGE_COMMUNITY') ->
    6.

enum_symbol_by_value_MatchType(0) -> 'ANY';
enum_symbol_by_value_MatchType(1) -> 'ALL';
enum_symbol_by_value_MatchType(2) -> 'INVERT'.


enum_value_by_symbol_MatchType('ANY') -> 0;
enum_value_by_symbol_MatchType('ALL') -> 1;
enum_value_by_symbol_MatchType('INVERT') -> 2.

enum_symbol_by_value_AsPathLengthType(0) -> 'EQ';
enum_symbol_by_value_AsPathLengthType(1) -> 'GE';
enum_symbol_by_value_AsPathLengthType(2) -> 'LE'.


enum_value_by_symbol_AsPathLengthType('EQ') -> 0;
enum_value_by_symbol_AsPathLengthType('GE') -> 1;
enum_value_by_symbol_AsPathLengthType('LE') -> 2.

'enum_symbol_by_value_Conditions.RouteType'(0) ->
    'ROUTE_TYPE_NONE';
'enum_symbol_by_value_Conditions.RouteType'(1) ->
    'ROUTE_TYPE_INTERNAL';
'enum_symbol_by_value_Conditions.RouteType'(2) ->
    'ROUTE_TYPE_EXTERNAL';
'enum_symbol_by_value_Conditions.RouteType'(3) ->
    'ROUTE_TYPE_LOCAL'.


'enum_value_by_symbol_Conditions.RouteType'('ROUTE_TYPE_NONE') ->
    0;
'enum_value_by_symbol_Conditions.RouteType'('ROUTE_TYPE_INTERNAL') ->
    1;
'enum_value_by_symbol_Conditions.RouteType'('ROUTE_TYPE_EXTERNAL') ->
    2;
'enum_value_by_symbol_Conditions.RouteType'('ROUTE_TYPE_LOCAL') ->
    3.

enum_symbol_by_value_RouteAction(0) -> 'NONE';
enum_symbol_by_value_RouteAction(1) -> 'ACCEPT';
enum_symbol_by_value_RouteAction(2) -> 'REJECT'.


enum_value_by_symbol_RouteAction('NONE') -> 0;
enum_value_by_symbol_RouteAction('ACCEPT') -> 1;
enum_value_by_symbol_RouteAction('REJECT') -> 2.

enum_symbol_by_value_CommunityActionType(0) ->
    'COMMUNITY_ADD';
enum_symbol_by_value_CommunityActionType(1) ->
    'COMMUNITY_REMOVE';
enum_symbol_by_value_CommunityActionType(2) ->
    'COMMUNITY_REPLACE'.


enum_value_by_symbol_CommunityActionType('COMMUNITY_ADD') ->
    0;
enum_value_by_symbol_CommunityActionType('COMMUNITY_REMOVE') ->
    1;
enum_value_by_symbol_CommunityActionType('COMMUNITY_REPLACE') ->
    2.

enum_symbol_by_value_MedActionType(0) -> 'MED_MOD';
enum_symbol_by_value_MedActionType(1) -> 'MED_REPLACE'.


enum_value_by_symbol_MedActionType('MED_MOD') -> 0;
enum_value_by_symbol_MedActionType('MED_REPLACE') -> 1.

enum_symbol_by_value_PolicyType(0) -> 'IN';
enum_symbol_by_value_PolicyType(1) -> 'IMPORT';
enum_symbol_by_value_PolicyType(2) -> 'EXPORT'.


enum_value_by_symbol_PolicyType('IN') -> 0;
enum_value_by_symbol_PolicyType('IMPORT') -> 1;
enum_value_by_symbol_PolicyType('EXPORT') -> 2.


get_service_names() -> ['GobgpApi'].


get_service_def('GobgpApi') ->
    {{service, 'GobgpApi'},
     [#{name => 'StartServer', input => 'StartServerRequest',
	output => 'StartServerResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'StopServer', input => 'StopServerRequest',
	output => 'StopServerResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetServer', input => 'GetServerRequest',
	output => 'GetServerResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AddNeighbor', input => 'AddNeighborRequest',
	output => 'AddNeighborResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeleteNeighbor',
	input => 'DeleteNeighborRequest',
	output => 'DeleteNeighborResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetNeighbor', input => 'GetNeighborRequest',
	output => 'GetNeighborResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'ResetNeighbor',
	input => 'ResetNeighborRequest',
	output => 'ResetNeighborResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'SoftResetNeighbor',
	input => 'SoftResetNeighborRequest',
	output => 'SoftResetNeighborResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'ShutdownNeighbor',
	input => 'ShutdownNeighborRequest',
	output => 'ShutdownNeighborResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'EnableNeighbor',
	input => 'EnableNeighborRequest',
	output => 'EnableNeighborResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'DisableNeighbor',
	input => 'DisableNeighborRequest',
	output => 'DisableNeighborResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetRib', input => 'GetRibRequest',
	output => 'GetRibResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetPath', input => 'GetPathRequest',
	output => 'Path', input_stream => false,
	output_stream => true, opts => []},
      #{name => 'ValidateRib', input => 'ValidateRibRequest',
	output => 'ValidateRibResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AddPath', input => 'AddPathRequest',
	output => 'AddPathResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeletePath', input => 'DeletePathRequest',
	output => 'DeletePathResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'MonitorRib', input => 'MonitorRibRequest',
	output => 'Destination', input_stream => false,
	output_stream => true, opts => []},
      #{name => 'MonitorPeerState', input => 'Arguments',
	output => 'Peer', input_stream => false,
	output_stream => true, opts => []},
      #{name => 'EnableMrt', input => 'EnableMrtRequest',
	output => 'EnableMrtResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DisableMrt', input => 'DisableMrtRequest',
	output => 'DisableMrtResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'InjectMrt', input => 'InjectMrtRequest',
	output => 'InjectMrtResponse', input_stream => true,
	output_stream => false, opts => []},
      #{name => 'AddBmp', input => 'AddBmpRequest',
	output => 'AddBmpResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeleteBmp', input => 'DeleteBmpRequest',
	output => 'DeleteBmpResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetRpki', input => 'GetRpkiRequest',
	output => 'GetRpkiResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AddRpki', input => 'AddRpkiRequest',
	output => 'AddRpkiResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeleteRpki', input => 'DeleteRpkiRequest',
	output => 'DeleteRpkiResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'EnableRpki', input => 'EnableRpkiRequest',
	output => 'EnableRpkiResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DisableRpki', input => 'DisableRpkiRequest',
	output => 'DisableRpkiResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'ResetRpki', input => 'ResetRpkiRequest',
	output => 'ResetRpkiResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'SoftResetRpki',
	input => 'SoftResetRpkiRequest',
	output => 'SoftResetRpkiResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetRoa', input => 'GetRoaRequest',
	output => 'GetRoaResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'EnableZebra', input => 'EnableZebraRequest',
	output => 'EnableZebraResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AddVrf', input => 'AddVrfRequest',
	output => 'AddVrfResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeleteVrf', input => 'DeleteVrfRequest',
	output => 'DeleteVrfResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetVrf', input => 'GetVrfRequest',
	output => 'GetVrfResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetDefinedSet',
	input => 'GetDefinedSetRequest',
	output => 'GetDefinedSetResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'AddDefinedSet',
	input => 'AddDefinedSetRequest',
	output => 'AddDefinedSetResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'DeleteDefinedSet',
	input => 'DeleteDefinedSetRequest',
	output => 'DeleteDefinedSetResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'ReplaceDefinedSet',
	input => 'ReplaceDefinedSetRequest',
	output => 'ReplaceDefinedSetResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetStatement',
	input => 'GetStatementRequest',
	output => 'GetStatementResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AddStatement',
	input => 'AddStatementRequest',
	output => 'AddStatementResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeleteStatement',
	input => 'DeleteStatementRequest',
	output => 'DeleteStatementResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'ReplaceStatement',
	input => 'ReplaceStatementRequest',
	output => 'ReplaceStatementResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetPolicy', input => 'GetPolicyRequest',
	output => 'GetPolicyResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AddPolicy', input => 'AddPolicyRequest',
	output => 'AddPolicyResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'DeletePolicy',
	input => 'DeletePolicyRequest',
	output => 'DeletePolicyResponse', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'ReplacePolicy',
	input => 'ReplacePolicyRequest',
	output => 'ReplacePolicyResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetPolicyAssignment',
	input => 'GetPolicyAssignmentRequest',
	output => 'GetPolicyAssignmentResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'AddPolicyAssignment',
	input => 'AddPolicyAssignmentRequest',
	output => 'AddPolicyAssignmentResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'DeletePolicyAssignment',
	input => 'DeletePolicyAssignmentRequest',
	output => 'DeletePolicyAssignmentResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'ReplacePolicyAssignment',
	input => 'ReplacePolicyAssignmentRequest',
	output => 'ReplacePolicyAssignmentResponse',
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetRibInfo', input => 'GetRibInfoRequest',
	output => 'GetRibInfoResponse', input_stream => false,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('GobgpApi') ->
    ['StartServer', 'StopServer', 'GetServer',
     'AddNeighbor', 'DeleteNeighbor', 'GetNeighbor',
     'ResetNeighbor', 'SoftResetNeighbor',
     'ShutdownNeighbor', 'EnableNeighbor', 'DisableNeighbor',
     'GetRib', 'GetPath', 'ValidateRib', 'AddPath',
     'DeletePath', 'MonitorRib', 'MonitorPeerState',
     'EnableMrt', 'DisableMrt', 'InjectMrt', 'AddBmp',
     'DeleteBmp', 'GetRpki', 'AddRpki', 'DeleteRpki',
     'EnableRpki', 'DisableRpki', 'ResetRpki',
     'SoftResetRpki', 'GetRoa', 'EnableZebra', 'AddVrf',
     'DeleteVrf', 'GetVrf', 'GetDefinedSet', 'AddDefinedSet',
     'DeleteDefinedSet', 'ReplaceDefinedSet', 'GetStatement',
     'AddStatement', 'DeleteStatement', 'ReplaceStatement',
     'GetPolicy', 'AddPolicy', 'DeletePolicy',
     'ReplacePolicy', 'GetPolicyAssignment',
     'AddPolicyAssignment', 'DeletePolicyAssignment',
     'ReplacePolicyAssignment', 'GetRibInfo'];
get_rpc_names(_) -> error.


find_rpc_def('GobgpApi', RpcName) ->
    find_rpc_def_GobgpApi(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_GobgpApi('StartServer') ->
    #{name => 'StartServer', input => 'StartServerRequest',
      output => 'StartServerResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('StopServer') ->
    #{name => 'StopServer', input => 'StopServerRequest',
      output => 'StopServerResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('GetServer') ->
    #{name => 'GetServer', input => 'GetServerRequest',
      output => 'GetServerResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddNeighbor') ->
    #{name => 'AddNeighbor', input => 'AddNeighborRequest',
      output => 'AddNeighborResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeleteNeighbor') ->
    #{name => 'DeleteNeighbor',
      input => 'DeleteNeighborRequest',
      output => 'DeleteNeighborResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetNeighbor') ->
    #{name => 'GetNeighbor', input => 'GetNeighborRequest',
      output => 'GetNeighborResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('ResetNeighbor') ->
    #{name => 'ResetNeighbor',
      input => 'ResetNeighborRequest',
      output => 'ResetNeighborResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('SoftResetNeighbor') ->
    #{name => 'SoftResetNeighbor',
      input => 'SoftResetNeighborRequest',
      output => 'SoftResetNeighborResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('ShutdownNeighbor') ->
    #{name => 'ShutdownNeighbor',
      input => 'ShutdownNeighborRequest',
      output => 'ShutdownNeighborResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('EnableNeighbor') ->
    #{name => 'EnableNeighbor',
      input => 'EnableNeighborRequest',
      output => 'EnableNeighborResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('DisableNeighbor') ->
    #{name => 'DisableNeighbor',
      input => 'DisableNeighborRequest',
      output => 'DisableNeighborResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetRib') ->
    #{name => 'GetRib', input => 'GetRibRequest',
      output => 'GetRibResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('GetPath') ->
    #{name => 'GetPath', input => 'GetPathRequest',
      output => 'Path', input_stream => false,
      output_stream => true, opts => []};
find_rpc_def_GobgpApi('ValidateRib') ->
    #{name => 'ValidateRib', input => 'ValidateRibRequest',
      output => 'ValidateRibResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddPath') ->
    #{name => 'AddPath', input => 'AddPathRequest',
      output => 'AddPathResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeletePath') ->
    #{name => 'DeletePath', input => 'DeletePathRequest',
      output => 'DeletePathResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('MonitorRib') ->
    #{name => 'MonitorRib', input => 'MonitorRibRequest',
      output => 'Destination', input_stream => false,
      output_stream => true, opts => []};
find_rpc_def_GobgpApi('MonitorPeerState') ->
    #{name => 'MonitorPeerState', input => 'Arguments',
      output => 'Peer', input_stream => false,
      output_stream => true, opts => []};
find_rpc_def_GobgpApi('EnableMrt') ->
    #{name => 'EnableMrt', input => 'EnableMrtRequest',
      output => 'EnableMrtResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DisableMrt') ->
    #{name => 'DisableMrt', input => 'DisableMrtRequest',
      output => 'DisableMrtResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('InjectMrt') ->
    #{name => 'InjectMrt', input => 'InjectMrtRequest',
      output => 'InjectMrtResponse', input_stream => true,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddBmp') ->
    #{name => 'AddBmp', input => 'AddBmpRequest',
      output => 'AddBmpResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeleteBmp') ->
    #{name => 'DeleteBmp', input => 'DeleteBmpRequest',
      output => 'DeleteBmpResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('GetRpki') ->
    #{name => 'GetRpki', input => 'GetRpkiRequest',
      output => 'GetRpkiResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddRpki') ->
    #{name => 'AddRpki', input => 'AddRpkiRequest',
      output => 'AddRpkiResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeleteRpki') ->
    #{name => 'DeleteRpki', input => 'DeleteRpkiRequest',
      output => 'DeleteRpkiResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('EnableRpki') ->
    #{name => 'EnableRpki', input => 'EnableRpkiRequest',
      output => 'EnableRpkiResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DisableRpki') ->
    #{name => 'DisableRpki', input => 'DisableRpkiRequest',
      output => 'DisableRpkiResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('ResetRpki') ->
    #{name => 'ResetRpki', input => 'ResetRpkiRequest',
      output => 'ResetRpkiResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('SoftResetRpki') ->
    #{name => 'SoftResetRpki',
      input => 'SoftResetRpkiRequest',
      output => 'SoftResetRpkiResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetRoa') ->
    #{name => 'GetRoa', input => 'GetRoaRequest',
      output => 'GetRoaResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('EnableZebra') ->
    #{name => 'EnableZebra', input => 'EnableZebraRequest',
      output => 'EnableZebraResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddVrf') ->
    #{name => 'AddVrf', input => 'AddVrfRequest',
      output => 'AddVrfResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeleteVrf') ->
    #{name => 'DeleteVrf', input => 'DeleteVrfRequest',
      output => 'DeleteVrfResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('GetVrf') ->
    #{name => 'GetVrf', input => 'GetVrfRequest',
      output => 'GetVrfResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('GetDefinedSet') ->
    #{name => 'GetDefinedSet',
      input => 'GetDefinedSetRequest',
      output => 'GetDefinedSetResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('AddDefinedSet') ->
    #{name => 'AddDefinedSet',
      input => 'AddDefinedSetRequest',
      output => 'AddDefinedSetResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('DeleteDefinedSet') ->
    #{name => 'DeleteDefinedSet',
      input => 'DeleteDefinedSetRequest',
      output => 'DeleteDefinedSetResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('ReplaceDefinedSet') ->
    #{name => 'ReplaceDefinedSet',
      input => 'ReplaceDefinedSetRequest',
      output => 'ReplaceDefinedSetResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetStatement') ->
    #{name => 'GetStatement',
      input => 'GetStatementRequest',
      output => 'GetStatementResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddStatement') ->
    #{name => 'AddStatement',
      input => 'AddStatementRequest',
      output => 'AddStatementResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeleteStatement') ->
    #{name => 'DeleteStatement',
      input => 'DeleteStatementRequest',
      output => 'DeleteStatementResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('ReplaceStatement') ->
    #{name => 'ReplaceStatement',
      input => 'ReplaceStatementRequest',
      output => 'ReplaceStatementResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetPolicy') ->
    #{name => 'GetPolicy', input => 'GetPolicyRequest',
      output => 'GetPolicyResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('AddPolicy') ->
    #{name => 'AddPolicy', input => 'AddPolicyRequest',
      output => 'AddPolicyResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('DeletePolicy') ->
    #{name => 'DeletePolicy',
      input => 'DeletePolicyRequest',
      output => 'DeletePolicyResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi('ReplacePolicy') ->
    #{name => 'ReplacePolicy',
      input => 'ReplacePolicyRequest',
      output => 'ReplacePolicyResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetPolicyAssignment') ->
    #{name => 'GetPolicyAssignment',
      input => 'GetPolicyAssignmentRequest',
      output => 'GetPolicyAssignmentResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('AddPolicyAssignment') ->
    #{name => 'AddPolicyAssignment',
      input => 'AddPolicyAssignmentRequest',
      output => 'AddPolicyAssignmentResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('DeletePolicyAssignment') ->
    #{name => 'DeletePolicyAssignment',
      input => 'DeletePolicyAssignmentRequest',
      output => 'DeletePolicyAssignmentResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('ReplacePolicyAssignment') ->
    #{name => 'ReplacePolicyAssignment',
      input => 'ReplacePolicyAssignmentRequest',
      output => 'ReplacePolicyAssignmentResponse',
      input_stream => false, output_stream => false,
      opts => []};
find_rpc_def_GobgpApi('GetRibInfo') ->
    #{name => 'GetRibInfo', input => 'GetRibInfoRequest',
      output => 'GetRibInfoResponse', input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_GobgpApi(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> gobgpapi.



gpb_version_as_string() ->
    "3.28.0".

gpb_version_as_list() ->
    [3,28,0].
